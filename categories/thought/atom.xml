<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="//www.w3.org/2005/Atom">

  <title><![CDATA[Category: thought | conan @ notes:~/]]></title>
  <link href="https://conanblog.me/categories/thought/atom.xml" rel="self"/>
  <link href="https://conanblog.me/"/>
  <updated>2016-01-03T15:24:36-05:00</updated>
  <id>https://conanblog.me/</id>
  <author>
    <name><![CDATA[Conan]]></name>
    <email><![CDATA[conanchou1412@gmail.com]]></email>
  </author>
  <generator uri="//octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一些关于假新闻和标题党的想法]]></title>
    <link href="https://conanblog.me/blog/china/internet/thought/2016/01/03/we-media-fake-news/"/>
    <updated>2016-01-03T11:03:16-05:00</updated>
    <id>https://conanblog.me/blog/china/internet/thought/2016/01/03/we-media-fake-news</id>
    <content type="html"><![CDATA[<p>最近又有一些自媒体的假新闻被忽然炒热，比如最近一篇说苹果收购特斯拉的。不管是愚人节假新闻被挖坟，
还是挖坟、传播者无脑。假新闻、标题党这两年已经泛滥，自媒体更是搞臭了自己的名声。
表面看，这事儿一半关于内容制造者的人品，另一半关于读者和传播者素质，我相信 Fenng 的<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODIyMTE0MA==&amp;mid=401811966&amp;idx=1&amp;sn=76a53dbe421dcba15e923ce79d832eb0&amp;scene=5&amp;srcid=01032MbUPhPM67o8GPanOOSd#rd">这篇文章</a>已经做了很“给力”的讨论。</p>

<p>前不久我也在 Twitter 上跟几个推友讨论了相关话题。</p>

<p><img src="/images/20160103/twitter.png" alt="为保护推友隐私，已经把推号和头像遮掉" /></p>

<!--more-->

<p>我这篇推文虽然得到了很多人的赞同，然而我觉得这并不是问题的全貌和根本。那根本是什么？我觉得是诚信缺失。
你可能觉得这岂不是废话，可是我想说的不仅仅是造假自媒体和恶意传播者的诚信缺失，更是社会诚信缺失的问题。</p>

<p>在进入到分析之前我想先分享一下诚信较高的社会里自媒体是如何生存的。拿 Medium 来说吧，
它是目前运营得最成功的博客平台之一。他们公司也很早就开始想如何犒劳写手/作家。
按照点击量付正相关的酬劳似乎合情合理，毕竟他们是互联网公司，流量和用户数就能直接和间接
给他们带来经济利益。
不过他们第一个枪毙了这个想法，因为这种模式极有可能让人们忽视真正高质量的文章。
所以是毋庸置疑的情怀牌，当然不光文章质量有情怀，整个网站的 UI/UX 也是处处体现情怀。
这里就不多说了，感兴趣的同学可以自己去仔细体验。</p>

<p>而发文的那些专业与非专业的作者们对 Medium 的态度呢？大多数人觉得 Medium 是一个提高知名度的平台，
他们用它来 <strong>建立</strong> 自己的公众形象和声誉，最终从这些知名度和公众形象中，他们能获得一定的经济利益。
当然 Medium 也会给一些明星作家一定的报酬，而我觉得这也是建立在之前这些明星作家们的 <strong>积累</strong> 之上。
而其它类似的自媒体平台也是大同小异。</p>

<p>Surround your pullquote like this {&#8221; text to be quoted &#8220;}</p>

<p>那再来看看在华人社会比较流行的这些自媒体平台。朋友圈、微博、以及类似 Medium 的平台简书。
他们有一个共同点。这也多亏了老罗的发布会我才意识到。就是“打赏”这个功能。我并不是不喜欢这个功能，
事实上我自己也做过产品，换我我也会加同样的功能。
之所以加这个功能，说明产品经理们已经意识到了某种更深层的脉动。顺便插一句，
在写这篇文章做调查时我也发现了一些美国的创业公司试图给 Medium 添加类似“打赏”的功能，可是最终都
因响应不强烈，不了了之了。</p>

<p>接着说回这个打赏的事儿。华人相对来说不喜欢分享，“自扫门前雪”、“肥水不流外人田”、
“多一事不如少一事”、“枪打出头鸟”等思想已经深深影响着我们的行为。
而对于大多数中国网民来说，生活虽不到艰难的地步，但也没有闲到天天有时间写文章。
尤其是一些中产，有思想有知识，但是没时间做没有报酬的“闲事”。
所以产品经理们为了换得更多的质量相对高的内容（从而得到更多用户和流量），
他们要把“闲事”变成“稍正的事”。</p>

<p>情怀牌在这个时候就不管用了，表面上，作家/写手要养家糊口、或赚点外快。
实际上，想想之前我说的行为和经济利益的关系，
在诚信相对缺失的社会，写作这种行为和经济利益如果还是间接关系，还有多少人买账？
必须要直接，而且要赤裸裸地直接，要有视觉和数字的直观冲击。</p>

<p>那诚信在这儿起什么作用？诚信是现金的缓冲带，越没有信任就越是要“一手交钱一手交货”，
越有信任就越可以“赊账”。可诚信这东西怎么来呢？靠 <strong>积累</strong>。
人都是社会动物，不可避免地会相互模仿，
当“积累”这种“吃力不讨好”的方式在一个社会里被一些不诚信的“抄近路”的方式打败时，
人们自然会学习“抄近路”，直到人们发现“抄近路”的弊端大于利益时才会罢休。这不可避免，即便是现在已经
很诚信的社会在早期也面临过这样的历史进程。</p>

<p>Surround your pullquote like this {&#8221; text to be quoted &#8220;}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015->2016]]></title>
    <link href="https://conanblog.me/blog/life/thought/2015/12/31/2015-2016/"/>
    <updated>2015-12-31T13:53:55-05:00</updated>
    <id>https://conanblog.me/blog/life/thought/2015/12/31/2015-2016</id>
    <content type="html"><![CDATA[<p><img src="/images/20151231/hpny.jpg" alt="" /></p>

<p>又是一年忙忙碌碌，可能光從這兩年的博客發表數量就可以看出來。今年跨年，是該稍微寫一點東西了，
免得以後忘記這兩年都幹了些啥。</p>

<!--more-->

<h2 id="section">工作</h2>

<p>2013 年中，我加入了一家為金融公司做私有雲的創業公司。開始的一年多做得非常開心。
因為做的東西很有挑戰，我到現在還記得加入的第二天就接到了一個獨立任務──寫一個 in-memory
graph database，而且不能太臃腫，因為要放進 OpenVSwitch 交換機里跑。之後幹了半個禮拜，
在我離開這家公司時，這個項目依然還在我們數據中心的每一台交換機里運行著。當然其實後來整個
OpenVSwitch 的軟件框架基本都是我寫的。
這也是那一年半里我每天工作的重心。在這個過程中，我的搭檔──一名網絡工程專家，
以及我的上司──一名總是比我多想一步的實時高頻系統專家，都給予了很多的鼓勵和幫助，
不論是硬技術方面的還是軟技術方面的。之後，有了一些人事方面的變動，我老闆跳槽了，
於是我便慢慢變成了個自由人，我也越來越多地涉及到公司產品的其它部份，
尤其是數據庫和數據中心方面的項目。好的不好的事、物都經歷過，這些都是寶貴的經驗。
在我離開的時候，公司好幾個組的夥伴都來跟我說願做我的推薦人，這就讓我很感動。
這種肯定是為我踐行的最好的禮物。</p>

<p>2015 年中，我決定跳槽了。過去的兩年，我成長了，公司也成長了，它再也不是一家創業公司；然而我還是
喜歡創業公司。一次機緣巧合的機會，我去哥大參加一個清華北美地區校友會組織的座談會（應該是我人生
中最接近清華的一次吧，哈哈），結識了一位同是嘉賓的哥大教授。那會兒他剛剛和他的一個博士學生建立了一
個有學術背景的創業公司。當中略過幾次吃飯聊天，大半年之後我便加入了他的公司。現在我剛剛加入這家
公司一個多月吧，它還跟小嬰兒似的，還有很多待做的事情，從架構到功能，從 UI/UX 到代碼。
當然這一切都得建立在團隊對我的信任上。我相信這只是個時間問題。希望 2016 年我能幫助它成長得更好。</p>

<h2 id="section-1">生活</h2>

<p>2014 年初的時候，我邂逅了她，我現在的妻子。她很美，也比我聰明。在我眼裡她無限接近于完美。
我經常偷樂，沒想到我這德行還能追到這麼好的姑娘。在她的細心照料下，我的生活有了質的飛越，
身上的毛病也少了。我很感謝她，在迷茫的時候她幫我解惑，她的支持給我繼續執行的勇氣，
另外她還容忍我玩電子音樂、夢話說程序語言設計，還耐心聽我嘮叨那些偏門冷知識。
來年我依然會努力照顧好她，不給她惹麻煩 ;)</p>

<p>去年回了一次國，時間上也是匆匆忙忙，并沒有來得及見朋友。父母和祖輩都去看望過。都還好，
只是許久不見，他們都老了。我爸雖然還壯實，但是跟我記憶里的樣子已經不一樣了。
忍不住就想起朱自清的《背影》。想到就心疼和無奈。剛認識我老婆那會兒，她問我可有我爸媽的照片，
我那時才意識到我沒有我爸的照片，這麼多年我腦子里還是那個開車送我上學時的他。我爸還不會視頻聊天，
所以這些年一直都是我打網絡電話給他，可是每次都是匆匆幾句話。近幾年，歲月改變了他，想來開始
掛念孩子家人了，才多了幾通十幾分鐘的電話。最近我媽那邊傳來消息，說是外公快不行了，六七年了，
她一個人照料得了癌症的外公。也是非常不容易。想想要不是你們的辛苦，我哪裡有這般無憂的生活？
希望未來我能常回家看看吧。</p>

<p>對了，我要減肥了，BMI逼近正常和肥胖的那條交界線了。</p>

<h2 id="section-2">學習</h2>

<p><img class="left" src="/images/20151231/2016resolution.png" width="200" height="265" title="2016 Resolution" ></p>

<p>這幾年學習倒是沒斷過，工作必須要學的和自己感興趣的。這一點還算欣慰。2015 年初我在 GoodReads
上定下一年 30 本書的挑戰，年末看看自己才差不多完成了一半。不過沒完成挑戰倒沒什麼要緊的，
想想我讀的書畢竟不是暢銷小說，知識密度大多了。
其實左邊這幅圖片的背景就是我今年翻閱過的書籍的一部份。</p>

<p>今年還在 coursera 上上了一些伯克利音樂學院的課，深受啟發。我又看到來年有一些新課，找個時間還是
會再去上一上。</p>

<p>學習方面繼續保持吧。現在唯一覺得時間不太夠用，之後等生活進一步穩定下來應該會有更多時間吧。</p>

<h2 id="section-3">創業</h2>

<p>創業的夢一直在做，想法也一直有，也經常和朋友們分享。再積累幾年，我會再回來的。
今年國內的資本市場也是動盪的一年。一旦錯過一個好窗口，就有可能錯過整片江山。
我曾投資的一家公司就遇到了不小的麻煩。不管怎樣，兄弟繼續加油！</p>

<h2 id="section-4">2015-&gt;2016</h2>

<p>就這樣吧，一篇沒什麼營養的總結，寫在 2015 的最後一天。對來年我也沒什麼高大上的願景，
踏踏實實做好眼前事兒吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不是格子人生]]></title>
    <link href="https://conanblog.me/blog/life/thought/2015/07/20/to-do-or-not-to-do/"/>
    <updated>2015-07-20T12:08:48-04:00</updated>
    <id>https://conanblog.me/blog/life/thought/2015/07/20/to-do-or-not-to-do</id>
    <content type="html"><![CDATA[<p><img src="https://conanblog.me/images/20150720/zen.jpeg" alt="" /></p>

<p>距離上次的更新又是很久了。這個一年多來換了三處地方住，各種各樣的事情接踵而至，工作也從一個項目
變成了四個項目。說真的一直扛著重壓走了很久。不過好就好在，我遇到了我的女朋友。事情沒有太糟糕。</p>

<p><a href="https://conanblog.me/blog/life/hack/productivity/2014/09/01/900-months/">之前的一次更新</a>
我寫了一些關於 GTD 的想法，以及一個私人的項目。隨著時間的推移，我是一直在努力讓自己跟上時間的步伐，
然而事情並沒有非常順利。經過很長時間的努力但如果還是不見成效的話，往往說明了也許我們看/解決問題的
方法有問題。於是就有了這篇隨想/分享。</p>

<!--more-->

<p>讓我決定寫下我的想法的其實是 Jeff Atwood 的 <a href="http://blog.codinghorror.com/todont/"><em>Todon’t</em></a>，
我在讀他的博客文集
<a href="http://www.amazon.com/How-Stop-Sucking-Awesome-Instead-ebook/dp/B00BU3KPQU"><em>How to Stop Sucking and Be Awesome Instead</em></a>
的時候遇到了這篇文章。（題外話，這本書並沒有書名顯得那麽沒營養，其實是很有料的一本書。）</p>

<p>請允許我引用文中的一句話，因為它同樣也是我心中的聲音：</p>

<blockquote>
  <p>If you can’t wake up every day and, using your 100% original equipment God-given organic brain, come up with the three most important things you need to do that day – then you should seriously work on fixing that.</p>
</blockquote>

<p>可能跟大多數使用 GTD 工具的人一樣，我有一個鼠標滾輪滾好多下都不見底的 TODO list。它讓罪惡感在我心裏
慢慢堆積，進而升級變成了壓力。當然這只是加之我身的一部份壓力的具象化。在我之後要提到的一本書里就提到，
我們的壓力來自多方面，比較常見的有：</p>

<ul>
  <li>Traffic stress</li>
  <li>Getting angry</li>
  <li>Interpersonal conflicts</li>
  <li>Frustration over failed weight loss efforts</li>
  <li>Financial stress</li>
  <li>Being overwhelmed with too much to do</li>
  <li>Having regrets</li>
  <li>Discrimination</li>
</ul>

<p>我比對了一下，只能默默在每一項前面打勾……
我一開始覺得可能用一個 TODO list 來記錄並優先排序，然後按照自己的時間
安排來處理這些事務是可以解決這些事情的。可事實告訴我：然並卵。這個“系統”看似完美，可是就跟安全界的
一句名言說得一樣：</p>

<blockquote>
  <p>任何系統里，人總是軟肋</p>
</blockquote>

<p>在這種 TODO 系統裏也是一樣。我成了系統的瓶頸。我有自動腳本幫我篩選新聞、
放進我的 Pocket 服務、並在 TODO 裏創建新項目；我也用 IFTTT 將很多東西自動化。
可是這些最終只是將我的 TODO list 加長。而我只能慢慢地一個一個完成。</p>

<p>在重壓下，我得尋找出路，於是找到了這本書 <a href="http://www.amazon.com/The-Myth-Stress-Happier-Healthier/dp/1439159459"><em>The Myth of Stress</em></a>。
或許在讀書之前我就這麽想，但是似乎在讀完之後我更加篤定：</p>

<blockquote>
  <p>我們承受如此大的壓力，根源並不是這個世界變得糟糕了，真正需要改變的是我們自己</p>
</blockquote>

<p>其實就跟我在大學期間對待考試一樣的態度——平常心。只是進入工作，面對異鄉人的特殊身份、財政、感情、
工作、創業、學習、雜務，我漸漸忘記當年的口頭禪“平常心”。之前我也曾讀到一篇很有意思的文章，表面看起來是說
如何準備自殺，其實是勸好好面對人生的。當中作者就指出一個很關鍵的點：人在面臨大災難的時候往往非常
堅強，反倒是那些瑣事會讓人萌生自殺的念頭。</p>

<p>這才回到了我開頭所引用的觀點，平常心對待日常事務，不要再給自己什麽 TODO List 了。錯過一個事務
也不會怎樣，真正關鍵的、非做不可的事情肯定不會錯過。不管是以哪種方式“不錯過”，要麽是重要到你忘不了
的事情，要麽是有第二次、第三次機會的事。</p>

<p>其實在 <em>The Myth of Stress</em> 和另一本有關壓力的書 <a href="http://www.amazon.com/The-Upside-Stress-Why-Good/dp/1583335617"><em>The Upside of Stress</em></a> 里，
都提到了一個不容忽視的一點：壓力不可避免，適當的壓力能讓你做得更好。</p>

<p>所以經過一段時間的思考和沉澱，我廢除了 GTD 以及相關的 GTD 項目，只用大腦記錄要務。因為工作後雜務太多，
學習變成了一件困難的事情，所以仍然需要對學習給予一定的壓力，比如我給自己設定一個今年閱讀 30 本書的目標。</p>

<p>900 個月的人生，轉瞬即逝，我們為何要選擇不愉快的方式去度過呢？別給自己畫上格子，這不是格子人生。</p>

<p><small>說明：封面圖片我也不知道版權屬誰，是從這裡拿到的：<a href="https://theabysmal.wordpress.com/tag/zen-mind-beginners-mind/">the Abysmal Centre</a>。
暫時先用了，如有問題請聯繫我，我會徹下。</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[勤與懶]]></title>
    <link href="https://conanblog.me/blog/thought/2013/06/09/just-in-case-vs-just-in-time/"/>
    <updated>2013-06-09T22:02:00-04:00</updated>
    <id>https://conanblog.me/blog/thought/2013/06/09/just-in-case-vs-just-in-time</id>
    <content type="html"><![CDATA[<p>「Just In Case」和「Just In Time」，前者是「以防萬一」，而後者是「正好及時」。寫這篇日誌不是爲了給大家解釋這兩個詞組的字面意思，我更想談一談它們字面意思以下的含義，以及它們在程序設計中的意義。</p>

<p>初看之下，這兩個詞組只是長得很像，似乎並沒有什麼聯繫。而事實上我覺得它們間是一種反義的聯繫。「Just In Case」的做法是在處理問題時把所有可預料的情況處理放在前面處理；「Just In Time」則相對應，總是只處理當前需要處理的問題，處理是放在當下的。所以打個形象的比喻就是前者是勤勤懇懇的人，而後者是懶惰精明的人。<!--more--></p>

<p>看到這裏，或許你會認爲前者是好的，後者是壞的。但是這也正是我想澄清的，它們並沒有好壞之分，應該說它們各有各的優勢也各有各的劣勢。此話怎講？我們來用我們學過的知識來打個比方好了。曾经我和很多人一样都有一种困惑，或者说失落感，因为大学本科课程太浅，觉得学得泛而浅；而真正开始工作了又要开始学各种更加深入而专项的知识。为什么不在本科就学呢？其实这样的教育体系是有它存在的意义的。泛而浅的知识是必要的，因为如果你从未开始探索某一领域的知识的话，在将来如果要用到的时候就很难往这一领域的知识想。比如《数学之美》的作者吴军博士就曾经是学信号处理的，而这些知识恰好在他后来的信息和语音处理领域可以得到应用。如果他之前学的，比方说，会计學，他或许最终会用一样的知识体系去解决问题，但很显然，他很有可能得走更多的弯路。所以这些在本科学到的泛而浅的知识其实就是「Just
In Case」的知识。相對應的，那些到了工作中学到的专项深入的知识大多是「Just In Time」的知识。这两种不同类型的知识我們都需要，自然可以看出 JIC 和 JIT 是各有千秋的了。</p>

<p>現在我們再把這兩個概念放到編程語言和程序設計這裏領域來說說吧。可能對編譯有所瞭解的同學會一眼認出JIT，那是一種編譯方式沒錯，不過我想說的是一個更廣一點的概念，就是「lazy」。lazy 是計算機科學裏一個處理問題的策略，說白了就是讓程序避免執行不必要的指令，從而達到提升效能的目的。lazy 這個詞跟我們平時生活中用來形容人的用法其實是一樣的，只是這裏我們似乎因爲它帶來了額外的利益，反而對 lazy
跪舔了。（再次表現出了人類的醜陋本性，嫉妒別人能夠省事，同時又無節操地喜歡對自己有利的東西。）那在程序世界裏跟 JIT 相對的概念跑哪兒去了？其實我們平時正常的、無 laziness 的編程方式就是跟 JIT 相對的編程方式了。</p>

<p>這時候可能有人會覺得，既然 lazy 式的編程方式可以幫我們節省資源，我們爲什麼不全都用這種方式？這就引出了我想說的，不同應用場景這兩種編程風格的利弊了。lazy 也不是徹底的好東西。我們拿分佈式計算裏的一個案例來舉例，Hadoop（MapReduce），如果全都採用 lazy 式的設計方案，那很有可能有些數據就總不會被算，直到被需要的那一刻，這帶來的後果就是本來能夠並行分佈式運算的，但卻因爲
lazy 變成了低效的半並行半流水線的分佈式運算。</p>

<p>聊完了編程，我們來聊聊人生好了。其實「勤奮」與「懶惰」，還真的是個哲學問題呢。有人看起來勤奮，但其實他懶惰；有人看起來懶惰，但其實他勤奮。第一類人，我們通常會用「庸庸碌碌」來形容他，而第二類人更像是「精明能幹」的。第一類人不想走出自己的 confident
zone，所以即便知道自己在做的是重複勞動，他也會「勤勤懇懇」地做下去，「懶」到不願去想有沒有更好的辦法。第二類人合理地避開不需要處理的事物，創造性地產生出可以取代現有方案的新方案，他們可能看起來做的事情並不多，但其實「勤」于思考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[也談編程工具]]></title>
    <link href="https://conanblog.me/blog/thought/tool/2013/04/21/programming-tools/"/>
    <updated>2013-04-21T18:09:00-04:00</updated>
    <id>https://conanblog.me/blog/thought/tool/2013/04/21/programming-tools</id>
    <content type="html"><![CDATA[<p>我總是避免在博客裏談工具，因爲怕被扣上「工具黨」的帽子。今天看到<a href="http://www.yinwang.org/blog-cn/2013/04/20/editor-ide">王垠聊到編輯器與IDE</a>，才想起來我似乎沒有在博客中寫過相關的話題。接觸代碼世界也已經十餘年了，這一拍腦袋，覺得好多話想說。</p>

<p>首先表個態，爭論工具孰好孰壞意義不大，就跟編程語言的爭論一樣無意義，因爲這些東西都不存在絕對的「好壞」，而只存在「適合不適合」，脫離前提的討論是空泛而不切實際的。既然這樣還寫這篇博客幹嘛？只是隨想，算是滿足一下我的傾訴慾望。<!--more--></p>

<h1 id="ide">IDE</h1>

<p>IDE是個很贊的「再發明」，之所以說它是「再發明」因爲我認爲它已經被發明過，只是當時人們沒有認出它。這個我會在下一節聊。喜歡IDE的理由很簡單，因爲它特別省事，尤其是在應付編程語言的知識集遠遠大於人腦對相關知識的記憶集的時候。Java就是個再好不過的例子，它的知識集不僅龐大，而且還時常令人困惑。就其龐大而言，看看它的文檔和相關的書籍就知道，其厚度是可以考慮作爲防身道具的。而對於「令人困惑」我得稍微解釋一下。困惑來自語言中一些對類似概念的
inconsistency。比如 Java 中的 Array、ArrayList、String，我們時常要獲得它們的長度。對於Array，我們得用<code>array.length</code>，是Array的一個屬性；對於ArrayList，我們得用<code>arrayList.size()</code>，是ArrayList的一個方法；對於String，我們得用<code>string.length()</code>，是String的一個方法。</p>

<p>如果沒有IDE，那解決以上的兩大問題就必須藉助於查詢文檔，這樣一來，效率就下降了。有人說可以熟能生巧，那也只是熟手被迫擴大了自己的記憶集而已。這時候IDE的好處就顯現出來了，自動補完和語法提示拯救了大多數 Java 程序員。而且IDE與身居來就「傻瓜模式」，通常從安裝到使用都不會超過30分鐘。</p>

<p>另一個優點是伴隨它的自動化來的，我們知道IDE裏都有很多工程模板和代碼自動化工具。這些東西對於剛入門的程序員特別有用，那些文件結構和代碼結構就是一種行業標準，學習這些標準有助於使自己的成長。</p>

<p>而其缺點也是從「傻瓜模式」引入的。我有多次爲了配置IDE環境而浪費了四五個小時的經歷。簡單的加一些包、修改編譯器版本什麼的倒是容易。但是如果項目比較複雜，牽連到一些其它技術和語言，那可能會要費點心。如果你所使用的技術的社區步伐比較快，那恐怕IDE還不是很支持，或者只支持較舊版本。沒錯，IDE是爲「大多數情況」設計的，你很難保證自己正在開發的項目是不是「大多數情況」。</p>

<p>另外，IDE對用戶而言，是個黑箱，其內部運行機制我們只能靠想當然或查文檔。這也給定製化IDE造成了一定的難度。不知你有沒有遇到過，反正我是遇到過一些小問題怎麼調都有問題，之後重啓IDE或重裝才好。不管問題到後來有沒有解決，都讓你感到莫名其妙。所以現在市場上比較好用的IDE都是非常有針對性的，很少能做到一個IDE就滿足大部分開發需求的，即使有，其體驗也令人着急。</p>

<p>最後是有關權限的問題。用 Windows 的用戶可能不太會遇到我所描述的情況，但是相信用 Linux/Unix 的朋友應該是遇到過類似的。就是項目放在一個不屬於用戶權限的目錄下，要編輯的時候就必須給IDE super user的權限，而IDE的行爲很多時候都是黑箱，且可能涉及到除要修改的文件以外的其它項目文件，我要非常小心地操作，因爲「權利越大，責任越大」。</p>

<h1 id="section">編輯器</h1>

<p>在這個討論中，與IDE相對的就是文本編輯器了。文本編輯器的種類可就多了，有經典的 Vi 和 Emacs，還有較爲現代的TextMate, Sublime。這個小節裏我將特指文本編輯器爲那些有較好CLI支持的編輯器。爲什麼？你應該還記得我在前一節說到IDE是被重新發明的吧，其實我想說，IDE初見端倪還是在Unix環境下。我並不是第一個這麼說的人，如果你看過我們翻譯的<a href="https://conanblog.me/Unix-as-IDE--Chinese-/">「Unix as
IDE」</a>，你就應該明白爲什麼我這麼說了。這裏我簡單闡述下：首先是Unix/Linux
shell下能實現幾乎所有現代IDE的功能，它甚至能更好地實現。而shell下的可編程性又使得個性化配置變得簡單可控。所以上面提到的IDE的缺點被全部修正。當然隨之而來的是易用性問題。如果僅僅是用好shell下的編輯器，其學習曲線倒也還可以接受；但是要把Unix/Linux當作IDE一樣用好，可能不花上個一兩年是不行的。不過這中時間投資是值得的。</p>

<p>這種靈活性和可編程性很大程序上得益於之前被王垠噴的Unix/Linux的以字符爲通信媒介的設計思路。Unix/Linux的設計中，有很多「只做一件事並把事情做到最好」的小程序，這些小程序接受字符串命令並執行。這樣一來，它們即可以單獨運行，也可以作爲一個更大作業的一部分來運行。正是因爲字符串式的控制方式，我們才能如此靈巧地使用這些小程序。想想看，如果這些小程序都是通過對用戶不友好的API來呼叫，系統會怎麼樣？變快了，可是丟失了一些靈活性。這種靈活性，我常常用一個比方來說明它，試想待解決的各種問題就像用石塊鋪的地面，要想弄平整這塊地面，就必須拿那些顆粒更小的黃沙來填充溝壑。而Unix/Linux的這種設計思路正是這種黃沙，這才使得Unix/Linux可以勝任幾乎任何工作。</p>

<p>上面扯的這些可能在沒有相關經驗的人看來有點空，下面我們來點接地氣的，說說我是怎麼用 Vim 以及相關集成環境的吧。由於工作需要，我得寫
Python、Ruby、PHP、Java、Go、JS等相關的程序（其實還包括我現在寫博客的markdown在內的很多文件支持，這裏就不一一列舉了），項目中出現多語言的情況也很多。爲了適應這種詭異的需求，我寫了一套<a href="https://github.com/ConanChou/ConanVimrc">自己的Vim配置</a>。不同編程語言的支持，對我來說只要有語法高亮和正確的縮進以及不用太智能的自動補全就差不多了。除此之外，剛剛我說了很多它的靈活性，例子之一就是我在做RoR開發的時候，TDD就是用 <a href="http://joshuadavey.com/2012/01/10/faster-tdd-feedback-with-tmux-tslime-vim-and-turbux/">Vim + tmux
的快速反饋</a>的方式來做的。那這麼做到底有多爽呢？感覺很像是Emacs下用<a href="http://common-lisp.net/project/slime/">slime</a>做clisp的開發，隨寫隨eval。這些功能性都是較現代IDE有過之而無不及的。</p>

<p>說完功能性，我還覺得使用文本編輯器寫程序能使你更快地變成更好的程序員，至少對我來說是這樣。爲什麼這麼說，首先是「去自動化」，這些經典文本編輯器都是有非常完備的自動化功能的，但是並不會像現代IDE那麼簡單獲得。於是在順利使用各種自動化提高效率之前，你可能得手動做好多從零開始的事情。在此過程中你可以學習到很多技術細節。比如說用某某框架，一些現代IDE可以自動生成好多東西，包括一些配置文件也都是點點按鈕。其實這些技術細節都在那一堆項目文件裏，如果能經自己手，並在特殊情況下按照自己的需要修改這些文件的話，你學到的要比用IDE生成來的多而且快。有些東西，是欲速則不達的。</p>

<p>再來便是思維訓練。記得剛剛學習變成那會兒還只是簡單的藍色窗口下的BASIC，出了問題了只能靠<code>print</code>和想，沒有先進的debugger。後來用上了IDE之後一度迷戀上使用圖形界面debugger這種便利的工具。後來發現，其實往往通過推理的方式來debug更加有效，甚至能預見到還未出現的bug。文本編輯器裏沒有什麼便利的debugger，要用也只能用命令行下的debug工具。這時候你只要還有點惰性，就不太希望輕易使用debug工具。這種思維訓練提供了我全局思考和程序化思維的能力，變成一個活解釋器也不是壞事不是嗎？</p>

<h1 id="section-1">根源？</h1>

<p>我曾看到<a href="http://developers.slashdot.org/story/12/10/30/065244/the-ide-as-a-bad-programming-language-enabler">這樣一種說法</a>，說如果一門語言設計得足夠好的話，IDE是一種多餘的存在。因爲IDE本身就是爲了很大程度上彌補語言設計的不足。聽起來有點偏激？我暫不置評吧，畢竟這篇日誌是談工具，而語言，作爲生產材料，或許可以作爲以後某篇日誌的主題。引入這個評論，其實我是想說分析生產工具無法徹底將其與生產材料分開討論。而確實，不同的編程語言其需要的自動化類型也是不同的。對於設計較差的編程語言，自動化可能更多的是在生成代碼上。而對設計較好的編程語言，自動化可能更多的是放在生產環節上，比如自動測試、編譯、部署等。生產環節的自動化往往是需要很強靈活性的，而前面我也已經說了，這種靈活性恐怕是大多數IDE不具備的，除非有像google內部專門的team做相關的IDE定製化開發的支持。</p>

<p>先拋開語言的優劣，我覺得目前我看到的最想用的IDE就是<a href="http://www.lighttable.com/">LightTable</a>。當然，如果它能兼備靈活性，我會果斷拋棄現在我在使用的開發環境方案。</p>
]]></content>
  </entry>
  
</feed>

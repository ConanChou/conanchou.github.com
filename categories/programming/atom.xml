<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | conan @ notes:~/]]></title>
  <link href="http://ConanChou.github.io/categories/programming/atom.xml" rel="self"/>
  <link href="http://ConanChou.github.io/"/>
  <updated>2015-08-30T23:47:47-04:00</updated>
  <id>http://ConanChou.github.io/</id>
  <author>
    <name><![CDATA[Conan]]></name>
    <email><![CDATA[conanchou1412@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 調優筆記·經驗主義調優]]></title>
    <link href="http://ConanChou.github.io/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips/"/>
    <updated>2012-08-26T14:56:00-04:00</updated>
    <id>http://ConanChou.github.io/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips</id>
    <content type="html"><![CDATA[<p><a href="http://conanchou.github.com/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/">上一次我們聊了「理性主義」</a>，與其相對的哲學流派就是「經驗主義」了，在 Python 的調優中，我們自然也有從前人流傳下來的小技巧來使代碼的效率更高。在優化工作當中，這兩類方式往往是交替使用的。而且廣義地說，流派不一樣不代表它們對同一件事情的看法就是矛盾的。事實上流派不一樣僅僅是研究方式不一樣，最後結論往往是一致的。本文則將重點放在「經驗主義調優」，收集儘可能多的小技巧。預料中會有補充。<!--more--></p>

<p>在列舉各種「術」之前，先說「道」（術指具體做事的方法，道指做事的原理）。領悟了道之後才能在不同情況下做出正確的選擇。一般而言，調優無非在兩方面做優化：時間複雜度和空間複雜度。有時候時間和空間會互相矛盾，而這個時候就不得不在它們中做取捨。不同的應用取捨的決定因素是不一樣的。不過就目前而言，因爲空間越來越廉價，時間越來越寶貴，大部分時候人們會偏向與用空間換時間。當然也有兩者不矛盾的時候，這個時候肯定是綜合複雜度越小越好。除了空間、時間複雜度的取捨之外，還有一個可讀性的問題，實際上有時候爲了優化代碼，可讀性會下降不少。所以這個也是個要權衡的方面。</p>

<p>從複雜度的角度說，選擇的優先級按下面的排列：</p>

<script type="math/tex; mode=display">O(1)>O(\log n)>O(n\log n)>O(n^2)>O(n^3)>O(n^k)>O(k^n)>O(n!)</script>

<p>在 Python 中，對 <code lang="python">list</code>、<code lang="python">collections.deque</code>、<code lang="python">set</code>、<code lang="python">dict</code> 的各種操作的時間複雜度可以在<a href="http://wiki.python.org/moin/TimeComplexity">這裏找到</a>。</p>

<p>下面我就羅列各種「前人的經驗」。其實記住就可以，不過我還是用簡短的描述大致解釋一下原因,便於更加深刻地理解 Python 內部。有興趣的話其實可以用<a href="http://conanchou.github.com/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/">「理性主義」的分析方法</a>來看看下面的這些「經驗」。</p>

<ul>
  <li>
    <h3 id="dictlangpython--listlangpython"><code lang="python">dict</code> &gt; <code lang="python">list</code></h3>
  </li>
</ul>

<p><code lang="python">dict</code> 的數據結構是 Hash Table，查找的時間複雜度 是<script type="math/tex">O(1)</script>；而 <code lang="python">list</code> 的數據結構是 Array，查找的時間複雜度是 <script type="math/tex">O(n)</script>。</p>

<ul>
  <li>
    <h3 id="dictlangpython--dictgetlangpython"><code lang="python">dict[]</code> &gt; <code lang="python">dict.get()</code></h3>
  </li>
</ul>

<p>前者叫「直接獲取」，如果 <code lang="python">key</code> 超出了範圍會報錯；而後者是通過 <code lang="python">dict</code> 的方法調用，如果超出 <code lang="python">key</code> 範圍，它會將默認值賦給剛剛查詢的 <code lang="python">key</code>。顯然 <code lang="python">get()</code> 做了很多事情，慢一些是預料之中的。</p>

<p>這裏插一句題外話。有時候你確實需要類似 <code lang="python">get()</code> 所提供的效果，即這種容錯性，有些程序員傾向於用 <code lang="python">try...except...</code> 和 <code lang="python">dict[]</code> 來實現。在以前，這兩者在運行速度上區別還比較大，新版本的 Python 在這兩種方案下表現得比較一致，只有 10% 的性能差異。所以在這種情況下用 <code lang="python">dict.get()</code> 其實是個不錯的選擇。</p>

<ul>
  <li>
    <h3 id="setlangpython--listlangpython"><code lang="python">set</code> &gt; <code lang="python">list</code></h3>
  </li>
</ul>

<p>前者與生俱來的 <code lang="python">|</code> (union)、<code lang="python">&amp;</code> (intersection) 和 <code lang="python">-</code> (difference) 運算就比 <code lang="python">list</code> 的迭代式效率高。所以涉及到 <code lang="python">list</code> 的這三種運算，最佳方案是轉成 <code lang="python">set</code> 再用相應的 <code lang="python">set</code> 運算符計算，最後再轉到 <code lang="python">list</code>。例如：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">list_a</span><span class="p">)</span> <span class="o">|</span> <span class="nb">set</span><span class="p">(</span><span class="n">list_b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <h3 id="strjoinlangpython--str--str--strlangpython"><code lang="python">str.join()</code> &gt; <code lang="python">str + str + str</code></h3>
  </li>
</ul>

<p>Python 字符串都是不可變的類型，任何類似改變字符串的操作其實都得拷貝原字符串。後者的連加其實是要做多次字符串相加運算的，而前者只要一次。不過就單次的速度而言，在 2.7 以上版本的 Python 中，兩者的區別已經不是很大。</p>

<ul>
  <li>
    <h3 id="langpython--str--str--strlangpython">字符串格式化 <code lang="python">%</code> &gt; <code lang="python">str + str + str</code></h3>
  </li>
</ul>

<p>寫習慣了 PHP 的話很容易就愛後一種方式，但是跟上面一條說的原因差不多，用格式化 <code lang="python">%</code> 的方式要高效一些。</p>

<ul>
  <li>
    <h3 id="section">自帶函數 &gt; 正則表達式</h3>
  </li>
</ul>

<p>Python 字符串自帶了不少有用的方法可以取代正則表達式。比如那些 <code>is</code> 開頭的方法以及 <code>with</code> 結尾的方法。具體的列表可以查看 pydoc：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pydoc str
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <h3 id="sortlangpython--">自帶 <code lang="python">sort</code> &gt; 自寫排序算法</h3>
  </li>
</ul>

<p>如果你不確定你自己寫的算法真的優於 Python 內置的 <code lang="python">sort</code> 方法，那還是使用內置的。因爲 Python 的 <code lang="python">sort</code> 其實會因爲不同的數據類型、甚至根據數據的長度，選擇最優的排序方式。有興趣的話可以去看一看 CPython 有關 <code lang="python">sort</code> 的源碼。</p>

<p>其實大多數自帶函數的效率都比較高，甚至 <code lang="python">add()</code> 都要比 <code lang="python">+</code> 快。所以儘量使用 Python 自帶的函數。</p>

<ul>
  <li>
    <h3 id="listlangpython-comprehensions--"><code lang="python">list</code> comprehensions &gt; 循環</h3>
  </li>
</ul>

<p><code lang="python">list</code> comprehensions 的運行是 CPython 的底層層面的，而一般的循環是在 VM 裏面跑的。很顯然前者要更優。</p>

<ul>
  <li>
    <h3 id="maplangpython--"><code lang="python">map</code> &gt; 循環</h3>
  </li>
</ul>

<p>跟 <code lang="python">list</code> comprehensions 的情況一樣，運算會被推到 C 層面，比 VM 裏跑的效率高。</p>

<ul>
  <li>
    <h3 id="section-1">局部變量 &gt; 全局變量</h3>
  </li>
</ul>

<p>這個尤其要在循環裏注意，就是<a href="http://conanchou.github.com/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/">本系列第二篇</a>裏我們找到的問題。Python 對局部變量的訪問效率要比全局變量的訪問效率高。另外，如果是一些帶「點」的方法，最好也放到循環的外面，因爲每次「點」，相應的方法都要再 <code lang="python">eval</code> 一遍。因此應該像下面這樣寫：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
</span><span class='line'>    <span class="n">upper</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">upper</span>
</span><span class='line'>    <span class="n">newlist</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">append</span> <span class="o">=</span> <span class="n">newlist</span><span class="o">.</span><span class="n">append</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">oldlist</span><span class="p">:</span>
</span><span class='line'>        <span class="n">append</span><span class="p">(</span><span class="n">upper</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">newlist</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>當然，在可以用 <code lang="python">list</code> comprehensions 和 <code lang="python">map</code> 的情況下，優先考慮使用這些。</p>

<ul>
  <li>
    <h3 id="section-2">懶惰 &gt; 勤勞</h3>
  </li>
</ul>

<p>這裏的「懶惰」指 Lazy Evaluation，在 Python 中，我目前知道條件判斷和 2.x 中的 <code lang="python">xrange</code> (即 3.x 中的 <code lang="python">range</code>)。</p>

<p>所以在類似 <code lang="python">if a and b</code> 的語句裏，<code>a</code> 會被先判斷，如果是 <code lang="python">False</code>，<code>b</code> 的運算就被直接跳過了。因此在寫程序時應該把運算量大的部分寫在靠後的部分。</p>

<p><code lang="python">xrange()</code> 不會在運行時就在內存中產生一個 <code lang="python">list</code>，而是在用的時候臨時算出來。看下面的例子：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">r</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">r</span>
</span><span class='line'><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">xr</span> <span class="o">=</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">xr</span>
</span><span class='line'><span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">print</span> <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">print</span> <span class="n">xr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">xr</span><span class="p">)</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">print</span> <span class="n">xr</span>
</span><span class='line'><span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">print</span> <span class="n">iterator</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">rangeiterator</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7fbbed1123f0</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">print</span> <span class="n">iterator</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <h3 id="langpython--langpython"><code lang="python">()</code> &gt; <code lang="python">[]</code></h3>
  </li>
</ul>

<p>前者不可變，後者可變，生成的時間前者更短。</p>

<ul>
  <li>
    <h3 id="islangpython--langpython"><code lang="python">is</code> &gt; <code lang="python">==</code></h3>
  </li>
</ul>

<p><code lang="python">is</code> 是比較對象，<code lang="python">==</code> 是比較對象裏的值。很顯然 <code lang="python">==</code> 要做的事情要稍微多一點。所以在能夠用 <code lang="python">is</code> 的時候要用 <code lang="python">is</code></p>

<ul>
  <li>
    <h3 id="truelangpython">1 &gt; <code lang="python">True</code></h3>
  </li>
</ul>

<p>Python 裏的 <code>bool</code> 也是繼承自 <code>int</code>，單純從運行效率來說，用 <code lang="python">int</code> 代替 <code lang="python">bool</code> 更好。可是可讀性會變差。</p>

<ul>
  <li>
    <h3 id="a--b--clangpython--a--b-and-b--clangpython"><code lang="python">a &gt; b &gt; c</code> &gt; <code lang="python">a &gt; b and b &gt; c</code></h3>
  </li>
</ul>

<p>類似 <code lang="python">map</code> 的情況，前者被放到更底層算，而後者還停留在 VM 內，效率自然有所差異。</p>

<ul>
  <li>
    <h3 id="section-3">循環放在方法裏 &gt; 循環裏調方法</h3>
  </li>
</ul>

<p>假設我們現在有個 <code lang="python">list</code> 需要對其內容一一處理，在你面前是兩條路（假設不用 <code lang="python">list</code> comprehensions 之類更好的方式），一條是將 <code lang="python">list</code> 傳進專門處理的方法，然後在方法內循環處理裏面的元素；另一條是遍歷此 <code lang="python">list</code>，然後將單個的元素用一個方法去做處理。這兩者間前者比較好，因爲 Python
的方法調用還是需要較多的開銷的。看例子，首先是循環裏調方法：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">def</span> <span class="nf">doit</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">x</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">i</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nb">list</span> <span class="o">=</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
</span><span class='line'>    <span class="n">doit</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>改成下面這樣更好</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">def</span> <span class="nf">doit</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">x</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">i</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nb">list</span> <span class="o">=</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span><span class='line'><span class="n">doit</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <h3 id="importlangpython">減少重複 <code lang="python">import</code></h3>
  </li>
</ul>

<p>有時候我們將 <code lang="python">import</code> 放在一個方法的開頭以此來縮小模塊的可用範圍或加快程序的啓動速度。而 Python 也足夠聰明可以防止多次導入相同的庫。但是 <code lang="python">import</code> 本身還是需要開銷一些時間的，無論是不是重複的。所以如果某個方法會被多次調用，最好將 <code lang="python">import</code> 放到方法外面。</p>

<ul>
  <li>
    <h3 id="iflangpython">方法重定向 &gt; <code lang="python">if</code></h3>
  </li>
</ul>

<p>假設我們有這麼一種情況：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Test</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">50</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">str</span> <span class="o">=</span> <span class="n">b</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">100</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">str</span> <span class="o">=</span> <span class="n">c</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">100</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="n">Test</span><span class="p">()</span>
</span><span class='line'><span class="k">def</span> <span class="nf">example</span><span class="p">():</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100000</span><span class="p">):</span>
</span><span class='line'>        <span class="n">a</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="err">”</span><span class="n">b</span><span class="err">”</span><span class="p">,</span><span class="err">”</span><span class="n">c</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>初看這段代碼沒什麼問題，但是如果仔細看，<code lang="python">if</code> 用得很單調。前 50 個也就算了，但是後面的 99950
次 <code lang="python">if</code> 開銷就很大了。如果能省去這些 <code lang="python">if</code> 速度會好很多。這裏其實可以用方法重定向來提高效率：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Test</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">str</span> <span class="o">=</span> <span class="n">b</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">100</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">50</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">check</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">check_post</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">check_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">str</span> <span class="o">=</span> <span class="n">c</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">100</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="n">Test</span><span class="p">()</span>
</span><span class='line'><span class="k">def</span> <span class="nf">example</span><span class="p">():</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100000</span><span class="p">):</span>
</span><span class='line'>        <span class="n">a</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="err">”</span><span class="n">b</span><span class="err">”</span><span class="p">,</span><span class="err">”</span><span class="n">c</span><span class="err">”</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>
***

本文是『Python 調優筆記』系列中的一篇，其它文章還有：

- [序，一切的開始](http://conanchou.github.com/blog/python/optimization/serial/programming/2012/07/23/python-optimization-1/ &#8220;Python 調優筆記·序&#8221;)
- [代碼造影，定位癥結](http://conanchou.github.com/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/ &#8221; Python 調優筆記·代碼造影&#8221;)
- [理性主義調優，一切從根本出發](http://conanchou.github.com/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/ &#8220;Python 調優筆記·理性主義調優&#8221;)
- [經驗主義調優，站在巨人的肩膀上](http://conanchou.github.com/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips/ &#8220;Python 調優筆記·經驗主義調優&#8221;)
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 調優筆記·理性主義調優]]></title>
    <link href="http://ConanChou.github.io/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/"/>
    <updated>2012-08-26T00:10:00-04:00</updated>
    <id>http://ConanChou.github.io/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling</id>
    <content type="html"><![CDATA[<p><a href="http://conanchou.github.com/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/">上次</a>我們學會了如何使用造影工具，使用它們的目的自然是設法找到代碼「慢」的理由。不過在上次的博文裏對於那段代碼慢的分析也是建立在我們有一定經驗的基礎上的。那我們總有第一次，如果第一次我們碰到這樣的瓶頸我們是不是就不知道該如何優化了呢？答案顯然是否定的。計算機作爲一門人造科學，可以說是完全在數學和邏輯的基礎上堆砌起來的，是完全可以推導出問題出在哪裏的（題外話，我認爲後者也屬於前者，可是聯合國教科文組織卻把它們分開了）。本篇博文就是要說如何在無經驗狀態下找到癥結。我稱之爲「理性主義調優」，當然這裏只指代碼級別的調優。（理性主義相對於經驗主義，是兩個相對的哲學流派。）<!--more--></p>

<p>我們要做的第一步就是學會使用代碼造影，上次我們討論的幾個工具並不是你每次每個都要使用，但是先做大範圍的模塊造影，再做有針對性的行造影是造影的常規步驟。</p>

<p>經過上面的第一步，我們會得到一組有問題的代碼。能直接解決的可以直接解決，不能直接找到原因的就是下面我重點要講的了。因爲 Python 是相對很高級的語言，很多底層細節會被隱藏掉，這從某種程度上加大了找出癥結的難度。換句話說，只要能夠摸清楚某行有問題的代碼到底怎麼執行的，那基本也就能夠推導出問題所在了。所以「理性主義調優」的問題就被簡化爲「如何弄懂代碼到底幹什麼」的問題。</p>

<p>爲此去讀長篇的文檔當然算是一個辦法，很學院派，但是並不是很高效。另一條路就是「Disassembling」，有 C 背景的同學多半是聽過這個詞的。說白了，就是把程序執行時在內存裏的每一步操作都打印出來，以供分析。（如果對此不瞭解的同學可以到我翻譯的開源文集<a href="http://www.conanblog.me/Unix-as-IDE-CN/html/compiling.html#id3">相關章節</a>學習）其實 Python 也可以 Disassembling，不過這和 C 的有些區別。因爲我們知道 Python 在運行時，其機制和 Java 是類似的，都是從源碼到字節碼，即
bytecode，而非二進制碼（binary code）；然後再把字節碼放在虛擬機裏運行。所以 Python 裏面的 Disassembling 其實是字節碼層面的。下面用到的工具就來自 Python 自帶的 <code lang="python">dis</code>。</p>

<p>我們繼續之前的<a href="https://raw.github.com/ianozsvald/HighPerformancePython_PyCon2012/master/mandelbrot/pure_python/pure_python_slow.py">代碼例子</a>，只是假設我們現在還不知道「慢」的原因。目前的狀況是我們知道了瓶頸在 <code lang="python">calculate_z_serial_purepython()</code> 裏，並且通過行造影，我們知道 <code lang="python">z[i] = z[i]*z[i] +q[i]</code> 花了很多时间。现在我们来 Disassembling：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kn">import</span> <span class="nn">pure_python_slow</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">pure_python_slow</span><span class="o">.</span><span class="n">calculate_z_serial_purepython</span><span class="p">)</span>
</span><span class='line'><span class="c"># 前略&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">32</span>    <span class="err"> »</span>   <span class="mi">90</span> <span class="n">SETUP_LOOP</span>              <span class="mi">86</span> <span class="p">(</span><span class="n">to</span> <span class="mi">179</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">93</span> <span class="n">LOAD_GLOBAL</span>              <span class="mi">1</span> <span class="p">(</span><span class="nb">range</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">96</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">maxiter</span><span class="p">)</span>
</span><span class='line'>             <span class="mi">99</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">1</span>
</span><span class='line'>            <span class="mi">102</span> <span class="n">GET_ITER</span>          <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>       <span class="err"> »</span>  <span class="mi">103</span> <span class="n">FOR_ITER</span>                <span class="mi">72</span> <span class="p">(</span><span class="n">to</span> <span class="mi">178</span><span class="p">)</span>
</span><span class='line'>            <span class="mi">106</span> <span class="n">STORE_FAST</span>               <span class="mi">5</span> <span class="p">(</span><span class="n">iteration</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">33</span>         <span class="mi">109</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class='line'>            <span class="mi">112</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class='line'>            <span class="mi">115</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 z[i] 的值</span>
</span><span class='line'>            <span class="mi">116</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class='line'>            <span class="mi">119</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class='line'>            <span class="mi">122</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 z[i] 的值</span>
</span><span class='line'>            <span class="mi">123</span> <span class="n">BINARY_MULTIPLY</span>                  <span class="c"># 計算 z[i]&lt;em&gt;z[i]</span>
</span><span class='line'>            <span class="mi">124</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">q</span><span class="p">)</span>   <span class="c"># 載入 q</span>
</span><span class='line'>            <span class="mi">127</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class='line'>            <span class="mi">130</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 q[i] 的值</span>
</span><span class='line'>            <span class="mi">131</span> <span class="n">BINARY_ADD</span>                       <span class="c"># 計算 z[i]&lt;/em&gt;z[i]+q[i]</span>
</span><span class='line'>            <span class="mi">132</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class='line'>            <span class="mi">135</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class='line'>            <span class="mi">138</span> <span class="n">STORE_SUBSCR</span>                     <span class="c"># 保存剛剛的計算結果進 z[i]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">34</span>         <span class="mi">139</span> <span class="n">LOAD_GLOBAL</span>              <span class="mi">2</span> <span class="p">(</span><span class="nb">abs</span><span class="p">)</span> <span class="c"># 載入 abs 方法</span>
</span><span class='line'>            <span class="mi">142</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class='line'>            <span class="mi">145</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class='line'>            <span class="mi">148</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 z[i]</span>
</span><span class='line'>            <span class="mi">149</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">1</span>       <span class="c"># 執行 abs 方法</span>
</span><span class='line'>            <span class="mi">152</span> <span class="n">LOAD_CONST</span>               <span class="mi">6</span> <span class="p">(</span><span class="mf">2.0</span><span class="p">)</span> <span class="c"># 載入 2.0</span>
</span><span class='line'>            <span class="mi">155</span> <span class="n">COMPARE_OP</span>               <span class="mi">4</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;)</span>   <span class="c"># 將 abd 的執行結果和 2.0 比較</span>
</span><span class='line'>            <span class="mi">158</span> <span class="n">POP_JUMP_IF_FALSE</span>      <span class="mi">103</span>       <span class="c"># 根據結果跳到 103&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;section&quot;</span><span class="o">&gt;</span><span class="err">後略</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>因爲我們已經將我們的注意力定在了這幾行，所以我略去了前後無關的內容。後面的註釋是我加的，說實話光是註釋就加得累死我了，那問題看來也很顯然了吧。太多重複調用了，非常不科學。</p>

<p>這裏對輸出的每一列的內容做一個介紹，以便理解，從左往右：</p>

<ol>
  <li>對應源碼的行號</li>
  <li>當前指令用 <code>--&gt;</code> 表示，上面的例子中沒有</li>
  <li>有標記的指令用 <code>&gt;&gt;</code> 表示</li>
  <li>指令地址</li>
  <li>指令名</li>
  <li>指令傳入參數</li>
  <li>解析參數後對應原程序裏的變量名、常量、分支目標和比較符號</li>
</ol>

<p>至於指令名的具體含義，請參考<a href="http://docs.python.org/library/dis.html#python-bytecode-instructions">官方文檔</a>。</p>

<p>以上便是「理性主義調優」。我想我必須強調，「過早優化」沒有好處。所以，use it wisely.</p>

<p>
***

本文是『Python 調優筆記』系列中的一篇，其它文章還有：

- [序，一切的開始](http://conanchou.github.com/blog/python/optimization/serial/programming/2012/07/23/python-optimization-1/ &#8220;Python 調優筆記·序&#8221;)
- [代碼造影，定位癥結](http://conanchou.github.com/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/ &#8221; Python 調優筆記·代碼造影&#8221;)
- [理性主義調優，一切從根本出發](http://conanchou.github.com/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/ &#8220;Python 調優筆記·理性主義調優&#8221;)
- [經驗主義調優，站在巨人的肩膀上](http://conanchou.github.com/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips/ &#8220;Python 調優筆記·經驗主義調優&#8221;)
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Python 的「神奇方法」元編程]]></title>
    <link href="http://ConanChou.github.io/blog/python/programming/2012/08/21/python-metaprogramming-with-magic-methods/"/>
    <updated>2012-08-21T22:41:00-04:00</updated>
    <id>http://ConanChou.github.io/blog/python/programming/2012/08/21/python-metaprogramming-with-magic-methods</id>
    <content type="html"><![CDATA[<p>在開始聊這個話題前，我覺得有必要先簡單說說這兩個概念：「神奇方法」和「元編程」。</p>

<p>什麼是「神奇方法」？其實是我亂翻譯的，英文中大家叫它們「Magic Methods」。我沒有在靜態語言中聽到過這個概念，只在 Python、PHP 這類動態語言中聽到。這是一類比較特殊的方法（Method/Function），是隨語言本身所故有的，在程序中無聲無息地起到作用。它們的命名方式都很特別，比如在 Python 中就是用<code>__</code>開頭用<code>__</code>結尾的方法，而在 PHP
中則是類似地用<code>__</code>開頭的方法。<!--more-->說他們默默無聞一點不假，因爲正常編程的過程中較少的跟它們打交道，就連官方的文檔都只是用只言片語描述了下，以示存在。然而它們非常重要。幸好有一些熱心人做了<a href="http://www.rafekettler.com/magicmethods.html">一份較爲詳細的文檔</a>可作參考。</p>

<p>「元編程」的概念並不新鮮，簡單而廣義地說就是語言本身可以在運行時被修改或可以增量編譯，那麼我們就可以使用該語言進行元編程。而要實現上述功能，語言本身就需要有反射或者泛型編程的語言特性。這術語聽起來很嚇人，但其實說具體如何實踐就不嚇人了。根據維基百科，實現元編程可以有三種方法。一是語言本身暴露一些本身運行時的 API，然後我們可以通過對調教 API
來實現元編程。二是語言本身可以動態地執行一些本身是程序方法的字符串表達式。而第三種可能略有爭議，就是撤徹底底用一種可以形容別的語言的系統來生成目標語言。而元編程的目的嘛，自然是更加簡單優美地解決問題啦。元編程這話題本來就博大精深，我可不敢說我很明白，希望觀者掂量着看這些文字吧。</p>

<p>下面就進入正題。我不會在下文中概括所有有關 Python 的元編程方法，而是通過一個我最近遇到的實例來說明兩件事：元編程跟原子彈都姓 Yuan，它們都很強大；Python 的動態和優美賦予其元編程的能力。</p>

<p>前不久我因工作，需要寫一個腳本來訪問某私有 API，並把內容全部按照 json 結構錄入到數據庫中。接口大致上是這樣的類型：</p>

<p><code>
http://abc.com/jsonrest/api/4.10/search_getRelatedVideos?x=aaa&amp;y=bbb
http://abc.com/jsonrest/api/4.10/search_getRelatedArticles?x=aaa&amp;y=bbb
http://abc.com/jsonrest/api/4.10/search_getRelatedTopics?x=aaa&amp;y=bbb
</code></p>

<p>問題就在於，我要如何做才能簡單而優美地寫一個 API wrapper。這個 wrapper 要可以做到這樣：</p>

<p><code>python
related_articles = api.search_getRelatedArticles(x=aaa, y=bbb)
related_topics = api.search_getRelatedTopics(x=aaa, y=bbb)
</code></p>

<p>而且最好我都不需要一個一個地去實現相應的方法，因爲一旦需要呼叫新的 API，我又必须再添加一個個新的方法。所以我最好可以隨意地寫，wrapper 則幫我生成新方法：</p>

<p><code>python
# 假设 `calculate_getUnrelatedMusic()` 是個新 API 呼叫方法
unrelated_musics = api.calculate_getUnrelatedMusic(x=aaa, y=bbb, z=ccc)
</code></p>

<p>其實說到這裏，我想很多老 Python 程序員應該是想到我要用的「神奇方法」了。沒錯，就是 <code>__getattr__(self, name)</code>。Python 會在找不到所呼叫的 attribute 的時候來調用這個方法。這不正是我想要的嘛，我只要截獲這個方法的邏輯就可以動態生成 API 調用方法了。所以解決方案一下子變得很簡單：</p>

<p>&#8220;` python</p>

<p>class ABCAPI:
    “&#8221;”ABC API wrapper”””</p>

<pre><code># 初始化，很常規
def __init__(self, accesskey, sharedsecret, server='abc.com', version='4.10'):
    self.accesskey = accesskey
    self.sharedsecret = sharedsecret
    self.server = server
    self.version = version

# 這個方法是今天的主角。局部變量 name 就是我們上面所提到的 `search_getRelatedArticles`
# 之類的方法名。而方法裏的那些參數都會被 `**params` 拿進來。這種寫法有關閉包，不在本文
# 討論範疇裏。
def __getattr__(self, name):
    """Get API Call"""
    # 進了方法先判斷下方法名是不是`__`開頭，只要是就拋異常，這樣 `__getattr__()` 就不會
    # 失去原有的行爲模式，即保護私有變量或方法。
    if name.startswith('_'):
        raise AttributeError, name
    else:
        def caller(**params):
            # 构建 API URL 的所有东西都在这儿了，这需要按照一定规律把这些材料组建成合法 URL
            url = self.construct_api_url(name, params)

            # 呼叫刚刚构建好的 URL 并返回结果
            return self.call_url(url)
        return caller

#...
# other utility methods for building the api url and calling the api
#... ```
</code></pre>

<p>以上就是我认为很优美的解决方案，短小精悍。然而这种用法并没有在我上文提到的那個有關「神奇方法」的文檔裏提及。所以在參考的時候請開動腦筋，不要侷限在作者的框框裏。你可以拿它們來做很多意想不到的事情。</p>

<p>那最後我的這種實現方式到底屬於上文提到的哪種元編程實現方式呢？留作思考題吧～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於編程，對我最有用的建議]]></title>
    <link href="http://ConanChou.github.io/blog/programming/zen/2012/08/20/the-best-programming-advice-i-ever-got/"/>
    <updated>2012-08-20T15:58:00-04:00</updated>
    <id>http://ConanChou.github.io/blog/programming/zen/2012/08/20/the-best-programming-advice-i-ever-got</id>
    <content type="html"><![CDATA[<p>關於編程，其實具體用什麼技術並不重要，很多時候是思想或方法決定了效率。今天我讀到一篇帖子：<a href="http://www.informit.com/promotions/promotion.aspx?promo=138930">“The Best Programming Advice I Ever Got”</a>，這些建議都是影響着這些業界精英們的職業生涯的，感覺對我很有用，於是在這裏做一個整理。<!--more--></p>

<ul>
  <li>
    <p>「寫更少的代碼。」不要覺得寫很多代碼來修補一個 bug 是一件很光榮的事情，有時問題的關鍵只是多餘的一行代碼，刪除即可。寫更多的代碼只會增加維護成本。可以少寫代碼就少寫。</p>
  </li>
  <li>
    <p>「在動手修改代碼前，先仔細理解報錯。」這一點看起來是廢話，但是我自己也好、別人也好，都多多少少犯過這樣的錯誤。原因很簡單，因爲人們寫代碼的時候很多是在壓力下完成的，比如要在下班前完成某個功能，或者在這禮拜前完成教授佈置的編程作業。所以經常就有人在沒有理解報錯的情況下枉自猜測着
debug。結果是反而浪費了很多時間在無用地猜測和推理上。這種現象在新手身上尤爲顯著，這裏的新手跟你寫程序的時間沒有關係，我雖然寫了十餘年程序，但對 Lisp 這門語言來說我仍然是新手。</p>
  </li>
  <li>
    <p>「讀多於寫，只讀高質量的書籍，一直更新知識庫。」程序員，尤其是老程序員，會傾向與專攻一項技術。當知識水平滿足了現在的工作需求的時候，一些人可能會停止繼續學習。這樣的程序員往往會遇到以下的情況：比如他是 C++ 程序員，兩年後再看別人新寫的 C++  代碼，可能會很不能理解。因爲他們的知識體系老化了。技術也是隨着摩爾定律一起發展的。所以當你完成了四年的大學，你已經有一半的知識快要淘汰。所以，繼續學習，學習更好更新的知識。</p>
  </li>
  <li>
    <p>「學習新的知識，要從更小的切入點進入。」學習新的知識對於程序員來說可以說是家常便飯，可是學得效果是好是壞往往因人而異。導致這種差異的原因有很多，但是我認爲這一點非常關鍵。很多人在學習一個新技術或編程語言的時候偏向於廣泛地學習。事實上這並無助於你對知識的掌握和理解；相反，如果縮小切入點，你能夠學得更好。比如不是學習 JavaScript 一整本厚厚的書，而是學習 JavaScript 的語義學。這樣學習的知識相對少，但是足夠深入；深入之後逐漸會使你學到更廣泛的其他相關知識。這樣你自然能比別人學得好。這也就能解釋爲什麼有些人能夠在短短幾年內成長爲某領域的專家。</p>
  </li>
  <li>
    <p>「以後別碰別人的代碼。」必須在此聲明，<strong>這不是個好建議；相反，你應該更加積極地團隊合作，讓權利鬥爭、包幹領域和理讓得體去見鬼</strong>。事實上這個建議是作者早年在一個大企業裏做的時候某個上司給他的。因爲他私自修改了別人的代碼而帶來了很多人際關係上的麻煩。我覺得這個很大程度上跟企業文化有關係。我相信程序員們都是或多或少有 Hacker 情懷的，所以自由開放的工作環境才是適合我們的。遇到這樣的公司，無論薪資怎樣，都請跳槽吧，這樣的企業不值得你在那裏浪費青春。</p>
  </li>
  <li>
    <p>「debug 前先深入思考。」這一點跟上面的第二點很像。但是作者在文章中提到了在腦中建立模型，深入地理解 bug，這往往不僅可以讓你很快能夠解決局部的 bug，你甚至還能預見更高層次的 bug。</p>
  </li>
  <li>
    <p>「你要重構代碼，你要 TDD」。代碼重構的目的就在於最大程度地使代碼能夠被重用，要做到這一點，最佳方式是銘記「一個 function 只做一件事，並且把這件事做好」。重構後的代碼通常更加短小便於理解，而且小巧的 function debug 起來也更加方便。其二就是你要貫徹 TDD (Test Driven Design/Development)。筆者一度是 TDD 的反對者，因爲我覺得它太麻煩，浪費了太多時間。而事實上，TDD
恰好可以幫助你節省很多時間。此話怎講？當系統越來越複雜時，任何一個模塊的小變動都有可能引起系統其他部分出錯，那這個時候你可能就需要深入到各個可能出錯的地方尋找癥結。但是如果之前你是一直做 Test 的，那任何新加的模塊或是修改的模塊，只要跑了 Test Suite 你就知道哪兒有問題，而不是等到 release 了，等用戶來給你反饋哪兒哪兒有問題。</p>
  </li>
  <li>
    <p>「重用之前先確保代碼能用」。其實我認爲這是「不要過早重構」的另一種說法。首先你代碼還不能滿足功用的時候你是不知道哪些東西是要擴展的哪些是要重用的。其次如果過早重構很可能讓你一直停滯不前。</p>
  </li>
</ul>

<p>我在總結的時候就已經對以上的好多條深有共鳴了，這些確確實實對我的工作很有幫助。如果還沒有共鳴那恐怕也只是時間問題吧。</p>

<p>最後我也來分享一下對我一直有深遠影響的建議：「70% 思考，30% 做」。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 調優筆記·代碼造影]]></title>
    <link href="http://ConanChou.github.io/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/"/>
    <updated>2012-07-25T00:14:00-04:00</updated>
    <id>http://ConanChou.github.io/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling</id>
    <content type="html"><![CDATA[<p>在序中，我提到了熱門語言的運行速度比較，比較效率的前提是 benchmark 程序的質量必須相當。這也就是說，優化運行速度、比別人的跑得快，前提是你的代碼也足夠好。足夠好自然是沒有個標準，不過我認爲，效率高的代碼必須是將瓶頸消除化，或者說是將瓶頸代碼拉得越快越好。經驗再老道的程序員也有可能沒法看出代碼瓶頸的時候。這個時候我們就需要利用一些工具來幫助我們檢查代碼，看看每個部分的運行時長，這便是 Profiling，我用醫學詞彙來說便是「代碼造影」。<!-- more --></p>

<p>Python 是自帶造影工具的，從 <a href="http://docs.python.org/library/profile.html">官方文檔</a> 看，有三款。但是一款太慢（profile），一款欠維護（hotshot），所以只剩下 <code lang="python">cProfile</code> 可用。爲了演示方便，我必須找一個不大不複雜又 CPU intensive 的小程序。於是我找來了 Ian Ozsvald 在 PyCon 上使用的案例 —— 一個畫分形的 <a href="https://raw.github.com/ianozsvald/HighPerformancePython_PyCon2012/master/mandelbrot/pure_python/pure_python_slow.py">小腳本</a>。</p>

<p>我們不妨先來運行一下該腳本：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python pure_python_slow.py
</span></code></pre></td></tr></table></div></figure></p>

<p>運行結果是會生成這張圖片：</p>

<p><img src="https://public.blu.livefilestore.com/y1pn9Ob0P_ELpnDR_BxhnQc9bjmo0F8y1gz4qudepNB2yt5xpJba35Q_fJmBdGT1TDqCszaOgh2-U_5WkHYh4ldTQ/fractal.png?psid=1" alt="分形" title="分形" /></p>

<p>命令行下的運行結果輸出則是：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Main took 0:00:17.247938
</span><span class='line'>Total sum of elements <span class="o">(</span><span class="k">for</span> validation<span class="o">)</span>: 1148485
</span></code></pre></td></tr></table></div></figure></p>

<p>下面我們來用 cProfile 看看哪些地方用的時間比較長：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python -m cProfile -o rep.prof pure_python_slow.py
</span></code></pre></td></tr></table></div></figure></p>

<p>用這種方法可以對整個腳本進行 profiling，然後把結果輸出到 <code lang="python">rep.prof</code> 中。當然對於一些較大的項目，這麼做是不恰當的，因爲一些大的項目往往有人機交互，所以使用這樣的方式來獲取運行時長顯然不可行。所以 <code lang="python">cProfile</code> 也提供了 function 方式的調用，也就是說可以在代碼裏使用它。而事實上官網的文檔就是這樣用的。使用 Django
的同學可以試試<a href="http://djangosnippets.org/snippets/727/">這樣的代碼</a>。</p>

<p>接着我們來分析一下所得的 profile，在與生成的 profile 文件同目錄下打開 Python 交互命令行：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kn">import</span> <span class="nn">pstats</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">pstats</span><span class="o">.</span><span class="n">Stats</span><span class="p">(</span><span class="err">‘</span><span class="n">rep</span><span class="o">.</span><span class="n">prof</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="err">»</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">sort_stats</span><span class="p">(</span><span class="err">‘</span><span class="n">cumulative</span><span class="err">’</span><span class="p">)</span><span class="o">.</span><span class="n">print_stats</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">Sun</span> <span class="n">May</span> <span class="mi">13</span> <span class="mi">20</span><span class="p">:</span><span class="mi">12</span><span class="p">:</span><span class="mi">47</span> <span class="mi">2012</span>    <span class="n">rep</span><span class="o">.</span><span class="n">prof</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="mi">52166198</span> <span class="n">function</span> <span class="n">calls</span> <span class="p">(</span><span class="mi">52166197</span> <span class="n">primitive</span> <span class="n">calls</span><span class="p">)</span> <span class="ow">in</span> <span class="mf">20.844</span> <span class="n">seconds</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Ordered</span> <span class="n">by</span><span class="p">:</span> <span class="n">cumulative</span> <span class="n">time</span>
</span><span class='line'>   <span class="n">List</span> <span class="n">reduced</span> <span class="kn">from</span> <span class="mi">182</span> <span class="n">to</span> <span class="mi">10</span> <span class="n">due</span> <span class="n">to</span> <span class="n">restriction</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">10</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ncalls</span>  <span class="n">tottime</span>  <span class="n">percall</span>  <span class="n">cumtime</span>  <span class="n">percall</span> <span class="n">filename</span><span class="p">:</span><span class="n">lineno</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
</span><span class='line'>        <span class="mi">1</span>    <span class="mf">0.026</span>    <span class="mf">0.026</span>   <span class="mf">20.844</span>   <span class="mf">20.844</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">1</span><span class="p">(</span><span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>        <span class="mi">1</span>    <span class="mf">0.066</span>    <span class="mf">0.066</span>   <span class="mf">20.818</span>   <span class="mf">20.818</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">40</span><span class="p">(</span><span class="n">calc_pure_python</span><span class="p">)</span>
</span><span class='line'>        <span class="mi">1</span>   <span class="mf">16.048</span>   <span class="mf">16.048</span>   <span class="mf">20.602</span>   <span class="mf">20.602</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">25</span><span class="p">(</span><span class="n">calculate_z_serial_purepython</span><span class="p">)</span>
</span><span class='line'> <span class="mi">51414419</span>    <span class="mf">3.588</span>    <span class="mf">0.000</span>    <span class="mf">3.588</span>    <span class="mf">0.000</span> <span class="p">{</span><span class="nb">abs</span><span class="p">}</span>
</span><span class='line'>   <span class="mi">250001</span>    <span class="mf">0.966</span>    <span class="mf">0.000</span>    <span class="mf">0.966</span>    <span class="mf">0.000</span> <span class="p">{</span><span class="nb">range</span><span class="p">}</span>
</span><span class='line'>        <span class="mi">1</span>    <span class="mf">0.035</span>    <span class="mf">0.035</span>    <span class="mf">0.136</span>    <span class="mf">0.136</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">8</span><span class="p">(</span><span class="n">show</span><span class="p">)</span>
</span><span class='line'>   <span class="mi">250001</span>    <span class="mf">0.042</span>    <span class="mf">0.000</span>    <span class="mf">0.042</span>    <span class="mf">0.000</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">14</span><span class="p">(</span><span class="o">&lt;</span><span class="n">genexpr</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>        <span class="mi">1</span>    <span class="mf">0.018</span>    <span class="mf">0.018</span>    <span class="mf">0.038</span>    <span class="mf">0.038</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">python2</span><span class="o">.</span><span class="mi">7</span><span class="o">/</span><span class="n">dist</span><span class="o">-</span><span class="n">packages</span><span class="o">/</span><span class="n">PIL</span><span class="o">/</span><span class="n">Image</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">27</span><span class="p">(</span><span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">3</span><span class="o">/</span><span class="mi">2</span>    <span class="mf">0.009</span>    <span class="mf">0.003</span>    <span class="mf">0.020</span>    <span class="mf">0.010</span> <span class="p">{</span><span class="nb">apply</span><span class="p">}</span>
</span><span class='line'>        <span class="mi">1</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.019</span>    <span class="mf">0.019</span> <span class="p">{</span><span class="nb">__import__</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">module</span><span class="o">&gt;&lt;/</span><span class="n">genexpr</span><span class="o">&gt;&lt;/</span><span class="n">module</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這裏我們可以看出，加了 <code lang="python">cProfile</code> 原來的程序會運行得略慢一些。這也是意料之中的。</p>

<p>下面我們來仔細看一下造影報告，也就是從第十一行開始的表格。
表格第一行是總時間，第二行是 <code lang="python">calc_pure_python</code> 所用時間，而第三行是 <code lang="python">calculate_z_serial_purepython</code> 所用時間，以此類推。從以上的這個表格我們至少可以判斷：大部分時間都花在了 <code lang="python">calculate_z_serial_purepython</code> 上。</p>

<p>可能這個表格並不是很直觀。那下面我再介紹一種更加直觀的方式 —— <code lang="sh">runsnake</code>。我們回到命令行，用 <code lang="sh">runsnake</code> 跑剛剛生成的造影文件（<code lang="python">rep.prof</code>）:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>runsnake res.prof
</span></code></pre></td></tr></table></div></figure></p>

<p>運行後你會看到這個窗口：</p>

<p><img src="https://xiil8w.blu.livefilestore.com/y1p-S46t388afLR5WALVXfzfgc36A_zh3jlEMbbjm3ouwkI1KEl7CRTPE8OS9mmtW7MZBCkujoUHT19OkiolKb1Dvd37IW8WMd-/runsnake.png?psid=1" alt="RunSnake 運行結果" title="RunSnake 運行結果" /></p>

<p>現在顯而易見了吧， <code lang="python">calculate_z_serial_purepython</code> 就是花時間最多的。可是到底是什麼使得它花這麼久，還是不能從上圖中找到原因。很顯然不是因爲 <code>&lt;abs&gt;</code> 和 <code>&lt;range&gt;</code>。于是我们定位到这个 function：</p>

<p><figure class='code'><figcaption><span>function calculate_z_serial_purepython </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">calculate_z_serial_purepython</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">maxiter</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="o">&amp;</span><span class="c">#8221;”Pure python with complex datatype, iterating over list of q and z”””</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># print out some progress info since it is so slow…</span>
</span><span class='line'>            <span class="k">print</span> <span class="err">“</span><span class="o">%</span><span class="mf">0.2</span><span class="n">f</span><span class="o">%%</span> <span class="n">complete</span><span class="err">”</span> <span class="o">%</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">*</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">iteration</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxiter</span><span class="p">):</span>
</span><span class='line'>            <span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mf">2.0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">iteration</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>有經驗的 Python 程序員可能已經知道問題出在哪裏了，但是我先賣個關子。當然目的是爲了介紹下面的一個造影工具 —— <code>kernprof.py</code>，line profiling，行造影工具。</p>

<p>相比之下，使用 <code>kernprof.py</code> 略麻煩一點。你得在需要做“行造影”的 function 前面加一個 decorator <code lang="python">@profile</code>，然后运行：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>kernprof.py -l -v pure_python_slow_lineprof.py
</span><span class='line'><span class="c">#…略去部分無關輸出</span>
</span><span class='line'>Main took 0:03:38.140994
</span><span class='line'>Total sum of elements <span class="o">(</span><span class="k">for</span> validation<span class="o">)</span>: 1148485
</span><span class='line'>Wrote profile results to pure_python_slow_lineprof.py.lprof
</span><span class='line'>Timer unit: 1e-06 s&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;File: pure_python_slow_lineprof.py
</span><span class='line'>Function: calculate_z_serial_purepython at line 24
</span><span class='line'>Total <span class="nb">time</span>: 112.149 s&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;line-------hits---------time--per-hit----time--line-contents&quot;</span>&gt;Line <span class="c">#      Hits         Time  Per Hit   % Time  Line Contents&lt;/h1&gt;</span>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;24                                           @profile
</span><span class='line'><span class="m">25</span>                                           def calculate_z_serial_purepython<span class="o">(</span>q, maxiter, z<span class="o">)</span>:
</span><span class='line'><span class="m">26</span>                                               <span class="s2">&quot;&quot;&quot;Pure python with complex datatype, iterating over list of q and z&quot;&quot;&quot;</span>
</span><span class='line'><span class="m">27</span>         <span class="m">1</span>         <span class="m">1193</span>   1193.0      0.0      <span class="nv">output</span> <span class="o">=</span> <span class="o">[</span>0<span class="o">]</span> * len<span class="o">(</span>q<span class="o">)</span>
</span><span class='line'><span class="m">28</span>    <span class="m">250001</span>       <span class="m">158612</span>      0.6      0.1      <span class="k">for</span> i in range<span class="o">(</span>len<span class="o">(</span>q<span class="o">))</span>:
</span><span class='line'><span class="m">29</span>    <span class="m">250000</span>       <span class="m">178444</span>      0.7      0.2          <span class="k">if</span> i % <span class="nv">1000</span> <span class="o">==</span> 0:
</span><span class='line'><span class="m">30</span>                                                       <span class="c"># print out some progress info since it is so slow...</span>
</span><span class='line'><span class="m">31</span>       <span class="m">250</span>         <span class="m">5943</span>     23.8      0.0              print <span class="s2">&quot;%0.2f%% complete&quot;</span> % <span class="o">(</span>1.0/len<span class="o">(</span>q<span class="o">)</span> * i * 100<span class="o">)</span>
</span><span class='line'><span class="m">32</span>  <span class="m">51464485</span>     <span class="m">31971119</span>      0.6     28.5          <span class="k">for</span> iteration in range<span class="o">(</span>maxiter<span class="o">)</span>:
</span><span class='line'><span class="m">33</span>  <span class="m">51414419</span>     <span class="m">40896082</span>      0.8     36.5              z<span class="o">[</span>i<span class="o">]</span> <span class="o">=</span> z<span class="o">[</span>i<span class="o">]</span>*z<span class="o">[</span>i<span class="o">]</span> + q<span class="o">[</span>i<span class="o">]</span>
</span><span class='line'><span class="m">34</span>  <span class="m">51414419</span>     <span class="m">38095052</span>      0.7     34.0              <span class="k">if</span> abs<span class="o">(</span>z<span class="o">[</span>i<span class="o">])</span> <span class="p">&amp;</span>gt<span class="p">;</span> 2.0:
</span><span class='line'><span class="m">35</span>    <span class="m">199934</span>       <span class="m">128641</span>      0.6      0.1                  output<span class="o">[</span>i<span class="o">]</span> <span class="o">=</span> iteration
</span><span class='line'><span class="m">36</span>    <span class="m">199934</span>       <span class="m">714362</span>      3.6      0.6                  <span class="nb">break</span>
</span><span class='line'><span class="m">37</span>         <span class="m">1</span>            <span class="m">4</span>      4.0      0.0      <span class="k">return</span> output
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>這裏我爲了不弄亂之前的文件裏的代碼，就直接另存爲了 <code>pure_python_slow_lineprof.py</code>。</p>

<p>如果你剛剛也跟我一起運行的話，你可能會首先注意到，運行速度非常之慢。所以我分享一則小技巧，就是想辦法讓運行的腳本縮小運行 scope。比方說你在做一個 1TB 數據的分析，在做優化的時候可以將目標數據減少到 1GB 之類的，數據量的減小不會對我們的行造影結果產生影響。在我們的這個例子裏，我們可以在運行的命令行末加上 ` 300 300`，這樣腳本就只會算一個 300*300 的分形圖，計算量相對要小很多。</p>

<p>那結果的最重要部分自然是表格部分了，這個表格裏我們可以看到對應代碼行的運行時間。因爲這個代碼相對很簡單，所以我們可以立刻看出是哪裏的問題了。重點在第 32、33、34 行。</p>

<p>這三行裏就有兩個小問題。</p>

<ul>
  <li>首先是 32 行，在 Python 3.x 之前，<code lang="python">range()</code> 和 <code lang="python">xrange()</code> 還是有區別的。前者會在內存中真的生成 <code lang="python">list</code>，而後者只是返回一個類似的 object （我們會在<a href="http://conanchou.github.com/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips/">第四篇</a>中詳細討論到這個問題）。性能上略有提升，但是並不顯著，從運行時間上來說，區別不大。</li>
  <li>33、34 行一直在直接從 <code lang="python">list</code> 裏查詢數據，而雖然查詢時間複雜度是 <script type="math/tex">O(1)</script>，但是代碼一遍又一遍地 <code lang="python">get</code> 和 <code lang="python">set</code>，這樣做勢必會消耗更多時間。</li>
</ul>

<p>所以通過分析，我們知道就以上的第一點而言，我們即使改用成 <code lang="python">xrange()</code>，在速度上我們也不會得到很大的提升。而就第二點，我們可以做如下修改：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">calculate_z_serial_purepython</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">maxiter</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="o">&amp;</span><span class="c">#8221;”Pure python with complex datatype, iterating over list of q and z”””</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">zi</span> <span class="o">=</span> <span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="n">qi</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># print out some progress info since it is so slow…</span>
</span><span class='line'>            <span class="k">print</span> <span class="err">“</span><span class="o">%</span><span class="mf">0.2</span><span class="n">f</span><span class="o">%%</span> <span class="n">complete</span><span class="err">”</span> <span class="o">%</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">*</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">iteration</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">maxiter</span><span class="p">):</span>
</span><span class='line'>            <span class="c">#z[i] = z[i]*z[i] + q[i]</span>
</span><span class='line'>            <span class="n">zi</span> <span class="o">=</span> <span class="n">zi</span> <span class="o">*</span> <span class="n">zi</span> <span class="o">+</span> <span class="n">qi</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">zi</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mf">2.0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">iteration</span>
</span><span class='line'>                <span class="k">break</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>修改後我們再運行一遍行造影：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>File: pure_python_improved_lineprof.py
</span><span class='line'>Function: calculate_z_serial_purepython at line 24
</span><span class='line'>Total <span class="nb">time</span>: 110.898 s&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;line-------hits---------time--per-hit----time--line-contents-1&quot;</span>&gt;Line <span class="c">#      Hits         Time  Per Hit   % Time  Line Contents&lt;/h1&gt;</span>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;24                                           @profile
</span><span class='line'><span class="m">25</span>                                           def calculate_z_serial_purepython<span class="o">(</span>q, maxiter, z<span class="o">)</span>:
</span><span class='line'><span class="m">26</span>                                               <span class="s2">&quot;&quot;&quot;Pure python with complex datatype, iterating over list of q and z&quot;&quot;&quot;</span>
</span><span class='line'><span class="m">27</span>         <span class="m">1</span>         <span class="m">1180</span>   1180.0      0.0      <span class="nv">output</span> <span class="o">=</span> <span class="o">[</span>0<span class="o">]</span> * len<span class="o">(</span>q<span class="o">)</span>
</span><span class='line'><span class="m">28</span>    <span class="m">250001</span>       <span class="m">162404</span>      0.6      0.1      <span class="k">for</span> i in range<span class="o">(</span>len<span class="o">(</span>q<span class="o">))</span>:
</span><span class='line'><span class="m">29</span>    <span class="m">250000</span>       <span class="m">161958</span>      0.6      0.1          <span class="nv">zi</span> <span class="o">=</span> z<span class="o">[</span>i<span class="o">]</span>
</span><span class='line'><span class="m">30</span>    <span class="m">250000</span>       <span class="m">155260</span>      0.6      0.1          <span class="nv">qi</span> <span class="o">=</span> q<span class="o">[</span>i<span class="o">]</span>
</span><span class='line'><span class="m">31</span>    <span class="m">250000</span>       <span class="m">173665</span>      0.7      0.2          <span class="k">if</span> i % <span class="nv">1000</span> <span class="o">==</span> 0:
</span><span class='line'><span class="m">32</span>                                                       <span class="c"># print out some progress info since it is so slow...</span>
</span><span class='line'><span class="m">33</span>       <span class="m">250</span>         <span class="m">5647</span>     22.6      0.0              print <span class="s2">&quot;%0.2f%% complete&quot;</span> % <span class="o">(</span>1.0/len<span class="o">(</span>q<span class="o">)</span> * i * 100<span class="o">)</span>
</span><span class='line'><span class="m">34</span>  <span class="m">51464485</span>     <span class="m">31790147</span>      0.6     28.7          <span class="k">for</span> iteration in xrange<span class="o">(</span>maxiter<span class="o">)</span>:
</span><span class='line'><span class="m">35</span>                                                       <span class="c">#z[i] = z[i]*z[i] + q[i]</span>
</span><span class='line'><span class="m">36</span>  <span class="m">51414419</span>     <span class="m">37946710</span>      0.7     34.2              <span class="nv">zi</span> <span class="o">=</span> zi * zi + qi
</span><span class='line'><span class="m">37</span>  <span class="m">51414419</span>     <span class="m">40239095</span>      0.8     36.3              <span class="k">if</span> abs<span class="o">(</span>zi<span class="o">)</span> <span class="p">&amp;</span>gt<span class="p">;</span> 2.0:
</span><span class='line'><span class="m">38</span>    <span class="m">199934</span>       <span class="m">138030</span>      0.7      0.1                  output<span class="o">[</span>i<span class="o">]</span> <span class="o">=</span> iteration
</span><span class='line'><span class="m">39</span>    <span class="m">199934</span>       <span class="m">123589</span>      0.6      0.1                  <span class="nb">break</span>
</span><span class='line'><span class="m">40</span>         <span class="m">1</span>            <span class="m">4</span>      4.0      0.0      <span class="k">return</span> output
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>看似沒有多大提升？確實，就每行時間上來看確實沒有多大提升，但是從總時間看，有了差不多兩秒的提升。而且如果我把行造影去掉，裸跑的話，速度的提升更加顯著一些（大約 6 秒）。有人說這樣的提升要不要都也無所謂，其實不然。我剛剛說到 scope，如果放大 scope，原先兩秒的優勢可能會被放大到 20 分鐘甚至更多。</p>

<p>大致總結下，代碼造影工具可以有效地幫助你找到代碼運行速度上的癥結，<code lang="python">cProfile</code> 可用於造影模塊的運行，<code lang="sh">RunSnake</code> 可以幫助可視化造影結果，而 <code>kernprof.py</code> 可以對代碼進行更加精準的行造影。另外，在使用這些造影工具的同時，我們還要注意學習前人的經驗，知道如何寫更好的代碼。</p>

<p>最後我要說，代碼層面的優化是很有限的，只要運行機制層面不改變，可能最好的代碼都會很慢，所以本系列之後的文章裏我會談一談優化「運行機制」。</p>

<p>
***

本文是『Python 調優筆記』系列中的一篇，其它文章還有：

- [序，一切的開始](http://conanchou.github.com/blog/python/optimization/serial/programming/2012/07/23/python-optimization-1/ &#8220;Python 調優筆記·序&#8221;)
- [代碼造影，定位癥結](http://conanchou.github.com/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/ &#8221; Python 調優筆記·代碼造影&#8221;)
- [理性主義調優，一切從根本出發](http://conanchou.github.com/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/ &#8220;Python 調優筆記·理性主義調優&#8221;)
- [經驗主義調優，站在巨人的肩膀上](http://conanchou.github.com/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips/ &#8220;Python 調優筆記·經驗主義調優&#8221;)
</p>
]]></content>
  </entry>
  
</feed>

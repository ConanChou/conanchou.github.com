<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://conanblog.me/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="https://conanblog.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://conanblog.me/" rel="alternate" type="text/html" hreflang="zh" /><updated>2018-05-18T10:43:29-04:00</updated><id>https://conanblog.me//</id><title type="html">Conan’s Notes</title><subtitle>Programming Language, Open Source, Design, Music, and everything in between.
</subtitle><author><name>Conan</name></author><entry><title type="html">我也看了老羅的發佈會</title><link href="https://conanblog.me/blog/2018/05/17/i-also-watched-smartisan-conf/" rel="alternate" type="text/html" title="我也看了老羅的發佈會" /><published>2018-05-17T00:00:00-04:00</published><updated>2018-05-17T00:00:00-04:00</updated><id>https://conanblog.me/blog/2018/05/17/i-also-watched-smartisan-conf</id><content type="html" xml:base="https://conanblog.me/blog/2018/05/17/i-also-watched-smartisan-conf/">&lt;p&gt;一個高中同學忽然給我留言，說老羅這次糗大了。跟我算不上熟，他大概以為混跡科技圈的人都在黑老羅，因為很多自媒體黑，以為我也會不看好老羅吧。&lt;/p&gt;

&lt;p&gt;其實我挺喜歡老羅的，不算粉，但至少欣賞他的風格。他敢做敢言，最要命的是他的自嘲。所以不知不覺，雖然人在國外，也不用他們的產品，我竟每年會收看他的單口相聲。&lt;/p&gt;

&lt;p&gt;去年 WWDC 的時候有推友表示不需要浪費時間看發佈會，完了之後看看新聞即可。我表態過我能看發佈會就一定會看，因為我不要別人咀嚼過的信息，我要有自己的判斷。所以我回道，我還沒看老羅的發佈會。之後，花了一晚上看了一遍。&lt;/p&gt;

&lt;p&gt;講真的並沒有那麼糟，是可以看出來準備倉促。但當我看到很多人對他們提出的 TNT 有質疑和嘲笑時，我倒反而放心了許多。從歷史數據來看，大多數好想法在當時看來都是愚蠢可笑的。但好想法都有一個共性，就是從 first principle 推導，是合乎邏輯的。&lt;/p&gt;

&lt;p&gt;Google Assistant，在語音識別技術已經非常成熟的今天，做到 context awareness 依然花了多年，事實上到底效果有多好我們還得測，畢竟是前兩天 Google IO 剛剛公佈的。Elon Musk 去年宣布啟動的人腦接口項目還很久遠。在這樣一個背景下，TNT 巧妙地繞過了很高很大的技術障礙。畢竟你想，他們沒有 Google 的技術積累，用巧勁是唯一的出路。&lt;/p&gt;

&lt;p&gt;從 Siri 和 Amazon Echo 開始，各家大廠都爭相研發語音助手。但我們平心而論，這些語音助手們，沒有一個 killer app，事實上大多數都非常雞肋。那既然如今的 AI 輔助還沒有那麼聰明，人觸摸屏幕又那麼自然，那為什麼人不能向前邁一步來做一下引導呢？&lt;/p&gt;

&lt;p&gt;想法是一方面，執行是另一方面。錘子手機已經做了六年了，十年是個檻。我不太擔心他們的執行力，但依然希望他們能做好。因為我希望看到中國也能有更多有匠人情懷的公司，和一些精心打磨過的產品。&lt;/p&gt;

&lt;p&gt;And FYI,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Haters are confused fans.   by @JackPaul&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Conan</name></author><summary type="html">一個高中同學忽然給我留言，說老羅這次糗大了。跟我算不上熟，他大概以為混跡科技圈的人都在黑老羅，因為很多自媒體黑，以為我也會不看好老羅吧。</summary></entry><entry><title type="html">Life 3.0 筆記，的一部分</title><link href="https://conanblog.me/blog/2018/05/16/life-3-0-notes/" rel="alternate" type="text/html" title="Life 3.0 筆記，的一部分" /><published>2018-05-16T00:00:00-04:00</published><updated>2018-05-16T00:00:00-04:00</updated><id>https://conanblog.me/blog/2018/05/16/life-3-0-notes</id><content type="html" xml:base="https://conanblog.me/blog/2018/05/16/life-3-0-notes/">&lt;p&gt;2017 年底，終於斷斷續續啃完了這本書——《 Life 3.0 》。我從中學到不少東西，覺得值得一讀。作者是 Max Tegmark，宇宙學家，現在是 MIT 的教授。同時他還跟其他人一起成立了兩個科研機構，一個是 Foundational Questions Institute，一個是 Future of Life Institute (FLI)。前者是為基礎物理學和宇宙學服務的，而後者則是為 AI 安全領域服務的。而之所以有這本書，還是因為後者的成功創立。我也是從 Elon Musk 的 twitter 上知道了這本書，Elon 曾資助了 FLI 1千萬美元。正是 Max 對未來人工智能的種種擔憂，他決定要為此做點什麼，才有了後來的這些故事。我在&lt;a href=&quot;/blog/2018/01/01/2017-2018/&quot;&gt;前一篇日誌&lt;/a&gt;裡提到過，我應當向 Max 學習。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;書的開篇就講了一個假想的科技公司 Omega 開發了一個名叫 Prometheus 的人工智能編程系統的故事，由此作者引出了英國數學家 Irving Good 在 1965 年關於 intelligence explosion 的討論：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let an ultraintelligent machine be defined as a machine that can far surpass all the intellectual activities of any man however clever. Since the design of machines is one of these intellectual activities, an ultraintelligent machine could design even better machines; there would then unquestionably be an ‘intelligence explosion,’ and the intelligence of man would be left far behind. Thus the first ultraintelligent machine is the last invention that man need ever make, provided that the machine is docile enough to tell us how to keep it under control.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;簡言之，當一個超智機器被創造出來後，人類就不再需要其他發明，因為這個超智機器可以設計出比人類設計得更好的機器。而此 Prometheus 的命名意謂深刻，它將會像神話中描述的那樣，給人類帶來“火種”。&lt;/p&gt;

&lt;p&gt;當然這個故事只是一個美好的願想。接著作者就開始進入正題了，第一章點題並澄清討論詞彙定義和範疇。基本上所有嚴肅的科學類讀物都是這個套路吧。作者闡明了對生命的定義，進而有了像 1.0、2.0、3.0 這樣的階段。就像寫 LISP 的人一樣，研究物理/數學的人非常喜歡抽象和昇華概念，從而更加接近問題的本質，Max 認為我們對生命的定義應該寬泛一點，他認為生命的本質一種能在保持自身的複雜度（即信息）的同時進行繁衍或複製的行程。 &lt;strong&gt;1.0，軟硬件都得靠演化；2.0，硬件靠演化，但軟件可以通過學習來設計，我們人類就處於這一階段；3.0，可想而知，軟硬件都能被設計&lt;/strong&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;從物質到智能&quot;&gt;從物質到智能&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hydrogen…, given enough time, turns into people. 
– Edward Robert Harrison, 1995&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一些簡單的物質是如何 &lt;em&gt;記憶&lt;/em&gt;、 &lt;em&gt;計算&lt;/em&gt; 甚至 &lt;em&gt;學習&lt;/em&gt;，進而產生智力的。雖然我是計算機科學專業畢業的，但講真的我在看這本書之前都一直有這些模糊的疑問，存儲記憶、計算和學習的本質到底又是什麼。看了這一章後我覺得茅塞頓開。&lt;/p&gt;

&lt;h3 id=&quot;智力&quot;&gt;智力&lt;/h3&gt;

&lt;p&gt;作者對智力的定義非常寬泛，這樣有助於我們理解智力：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;intelligence = ability\ to\ accomplish\ complex\ goals&lt;/script&gt;

&lt;p&gt;如今的人工智能傾向於狹窄領域的智能，而人類的卻很廣博。從 AI 到 AGI (Artificial General Intelligence) 還有很長的路。&lt;/p&gt;

&lt;h3 id=&quot;記憶&quot;&gt;記憶&lt;/h3&gt;

&lt;p&gt;記憶的本質是記錄某種狀態，所以只要某種物質能夠保持一些穩定狀態，就可以用來作為記憶體。沙盤、石板、紙張、電開關、RNA、大腦等等，這些都是可被用作記憶的東西。而 &lt;strong&gt;信息本身也是獨立於物質的&lt;/strong&gt;。值得一提的是人腦記憶的獲取方式有別於我們現在的計算機存儲設備，我們獲取記憶是根據”what“，而計算機的是根據”where“，即尋址。我們這種獲取記憶的方式是自動關聯的，有點像搜索引擎，我們想一個東西，相關聯的信息會自己冒出來。這種獲取記憶的方式其實並不僅僅只有人腦有，物理學家 John Hopfield 在他 1982 的一篇著名論文裡就展示了互聯的神經元也具有這種特性。作者說這種特性在任何多狀態的物理記憶體上都能重現，舉的例子是有兩個谷的平面，一個在 \(\sqrt{2}\) 的位置，而另一個在 \(\pi\) 的位置。這時如果放一個小球在 3 的位置，它會滾落到 \(\pi\) 的位置，於是自動關聯的獲取方式就湧現出來了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/480759/35475776-27c759d0-0372-11e8-858d-c634e161706c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;為此我還專門找來了&lt;a href=&quot;http://www.pnas.org/content/79/8/2554.full.pdf&quot; target=&quot;_blank&quot;&gt;那篇論文&lt;/a&gt;， &lt;strong&gt;其本質就是在存在多個局部極值的函數上，以輸入值查詢最接近的局部極值&lt;/strong&gt;。很多物理系統有這個特性，而互聯神經恰好也具備這種特性，具體的數學模型可見論文的等式 3 和 4。&lt;/p&gt;

&lt;h3 id=&quot;計算&quot;&gt;計算&lt;/h3&gt;

&lt;p&gt;這些理解起來很簡單，那計算呢？計算就是把某個信息或狀態轉化成另一個信息或狀態的過程。計算這種過程對物質的要求就是既不能太死板也不能太靈動，太死板了沒法產生狀態的改變，而太靈動了又沒法穩定狀態。作者提到 &lt;em&gt;计算素&lt;/em&gt; 这个概念，一种假想的可编程的物质材料，計算的最小單位，用以构建计算。在計算機裡就有符合這種條件的東西，比如 NAND 門。你可以用 NAND 構建一個正經計算機，而事實上 Noam Nisan 和 Shimon Schocken 就在&lt;a href=&quot;http://nand2tetris.org&quot; target=&quot;_blank&quot;&gt;一門公開課上教你怎麼做&lt;/a&gt;，或者你也可以用 NOR 門。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/480759/35475754-85b50caa-0371-11e8-9b97-e72955fe6549.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了這些實例，Stephen Wolfram 和 Alan Turing 都曾提出不同的計算模型。所以另一個很重要的事實是，&lt;strong&gt;計算也是獨立於物質的&lt;/strong&gt;。因而我們也逐漸看到了 &lt;strong&gt;計算的本質，或計算和物質的關係：計算是物質在時空中排列的模式&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;學習&quot;&gt;學習&lt;/h3&gt;

&lt;p&gt;講完記憶和計算，就該講學習了。有了上面的理解，學習就變得直截了當了，學習就是我們重複地將某種信息輸入到可塑性記憶體裡，直到記住。比上說一個平面軟土，如果我們不斷在一些地方放置小鐵球，那塊地方就會凹進去，於是下次我們把小鐵球放在一個靠近小坑的地方，小球會因為重力滾落到曾經放了好多次小鐵球的位置，於是這個軟土平面就學會了這些位置。而類似的 John Hopfield 論文裡的互聯神經網也具備這種特性。而如今留下的機器學習其實原理就類似。只是用了更加簡單的一個模型，即非互聯神經網絡，而是單向分層互聯網絡。每個節點對輸入點加權平均，有時還加一些常量，最後再通過一個激活函數把自己的結果轉化後傳送給下一層的節點們。局部的計算是很簡單的，但是整個網絡缺呈現出了一種學習能力。而更神奇的是單層網計算 \(n\) 個數相乘需要 \(2^n\) 個節點，而如果是深網的話只需要 \(4n\) 個節點。所以可想而知我們的大腦是有多麼驚人的計算能力，神經元不光互聯，而且信息流不是單向的。人腦的機制要複雜得多，目前我們還只是一知半解。&lt;/p&gt;

&lt;p&gt;經過上面三個部分的論述，我們知道了 &lt;strong&gt;記憶、計算和學習都是獨立於物質的，也就是說生物組織不是必要的&lt;/strong&gt;。想到這兒，那我們離 Life 3.0 還遠嗎？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;接下來作者用三章討論了近期的挑戰，智能大爆炸以及其後果。基本上作者概述了方方面面的可能性。經過這三章的洗禮，作者的腦洞已經是填不上了，可能是數學、物理學家的職業習慣，在接下來的一章他開始討論生命的極限，進而談及人類的星際遷徙、星際關係等。這些討論中，都閃爍著這個時代思考者們的先進思想，在讀的時候你彷彿能看見精神矍鑠的長者眼睛裡睿智的光。但我並不打算花更多篇幅寫，這些都是開放性的討論，我還是想從知識性的角度去總結這本書。當然這幾章裡面也有很多 facts 可以說，但是離主旨還是遠了點。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;終極目的&quot;&gt;終極目的&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;The mystery of human existence lies not in just staying alive , but in finding something to live for. 
– Fyodor Dostoyevsky, The Brothers Karamazov&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;對目的的討論很重要，因為我們幾乎可以肯定，智能爆炸後，人類的境遇如何完全取決於人類和超智能生物的終極目的的匹配程度。如果相左，可想而知超智能生物會跟三體文明一樣“我消滅你，與你何干”。&lt;/p&gt;

&lt;p&gt;說到目的性，&lt;strong&gt;所有的經典物理定律都表現出了目的性，大自然發生的每個事件基本都可歸納為最大化或最小化某個量。而從數學的角度來描述物理，要麼是預測未來，要麼是最大化某些東西。&lt;/strong&gt;此前我從沒有注意到這個規律，可能只是潛意識裡有痕跡，所以當讀到作者用白底黑字的話明明白白寫出來是，還是不禁拍案叫絕。那這個宇宙的終極目的是什麼？我們會自然而然地想到熱寂吧，想到這樣一個結局，就像作者說的，確實著實令人抑鬱。更令人沮喪和意外的是，我原以為生命的存在可以讓熵減小，但是作者分析其實宇宙產生生命有助於讓熵增大。不然你家為什麼會變亂，地球上的石油為什麼會被開採進而變成散落在各處的石油製品？而人類呢，最終會消失，但卻幫助了宇宙加快了熱寂過程。絕望之時，作者筆鋒一轉，但是我們還有萬有引力——讓這個宇宙不那麼無聊；而且作者的同事 Jeremy England 還有另一個好消息，就是物熱力學除了有熱寂這個傾向性，還有一個叫做 dissipation-driven adaption 的傾向性，是說粒子有對自身編排以最大化能量吸收的傾向。沒有太糟糕。所以大自然/物理學展現出了這種目的性，它是目的性的根源。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;粒子的這種自編排最大化吸收能量的傾向會衍生出另一種宏觀傾向性，即對自身的複製，在這種傾向性的影響下一段時間後，有一些物質的編排能很好地複製自身，我們稱這種類似的編排為生命。&lt;/strong&gt;生命的出現將物理定律世界簡單的逆熵目的性轉化成了複製和生育，然而逆熵的目標並沒有消失，生命本身就是達成逆熵的一種手段。讀到這兒我意識到熱寂的終點不會改變，逆熵、生命、自組織的物質都有生命期限，但我們的意識讓這個世界“變得”有趣美好。&lt;/p&gt;

&lt;p&gt;生命的演化向著越來越複雜的方向發展，於是生命最早的自我複製的目的性就被一些有助益自我複製的簡單規則代替了，這些規則就是我們說的&lt;em&gt;感覺&lt;/em&gt;。在寫這篇文章的時候，我正好在讀《自私的基因》，基因便是那個自我複製體，而我們根據感覺是為了更快的反應速度。當基因將主控權交給大腦後，大部分時候大腦雖然會根據感覺完成複製的基因的使命，但是大腦也有違背基因賦予的使命的時候，比如我們使用節育技術。這個違背並不是我們選擇如此，而是設計使然，因為&lt;strong&gt;感覺才是我們身體的主人，而不是基因&lt;/strong&gt;。事實上 Robert Wright 的 &lt;em&gt;Why Buddhism is True&lt;/em&gt; 也是對這個觀點的佐證。於是我們離開了物理學，穿過了生物學，走進了心理學。&lt;/p&gt;

&lt;h2 id=&quot;本不该有的结语&quot;&gt;本不该有的结语&lt;/h2&gt;

&lt;p&gt;這稿子已經躺在我草稿箱裡快發霉了。書也看完很久了也還沒寫完，就先放這些吧。如果將來我又回來複習，或許會回來填坑。除此之外，如果你對目前我所講述的內容還感興趣的話，應該去看看這本書。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Done is better than good.
  ― Elizabeth Gilbert, Big Magic: Creative Living Beyond Fear&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Conan</name></author><summary type="html">2017 年底，終於斷斷續續啃完了這本書——《 Life 3.0 》。我從中學到不少東西，覺得值得一讀。作者是 Max Tegmark，宇宙學家，現在是 MIT 的教授。同時他還跟其他人一起成立了兩個科研機構，一個是 Foundational Questions Institute，一個是 Future of Life Institute (FLI)。前者是為基礎物理學和宇宙學服務的，而後者則是為 AI 安全領域服務的。而之所以有這本書，還是因為後者的成功創立。我也是從 Elon Musk 的 twitter 上知道了這本書，Elon 曾資助了 FLI 1千萬美元。正是 Max 對未來人工智能的種種擔憂，他決定要為此做點什麼，才有了後來的這些故事。我在前一篇日誌裡提到過，我應當向 Max 學習。</summary></entry><entry><title type="html">2017 -&amp;gt; 2018</title><link href="https://conanblog.me/blog/2018/01/01/2017-2018/" rel="alternate" type="text/html" title="2017 -&gt; 2018" /><published>2018-01-01T00:00:00-05:00</published><updated>2018-01-01T00:00:00-05:00</updated><id>https://conanblog.me/blog/2018/01/01/2017-2018</id><content type="html" xml:base="https://conanblog.me/blog/2018/01/01/2017-2018/">&lt;p&gt;&lt;img src=&quot;/images/20151231/hpny.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今年，2017，我的狀態有過波動。感覺做了很多無用功，但仔細想想也並非如此。&lt;/p&gt;

&lt;h2 id=&quot;生活&quot;&gt;生活&lt;/h2&gt;

&lt;p&gt;今年我們去了好幾個地方，年初去了 DC，看望辦辦的好友，我也順便散散心，到處逛逛。這趟旅行倒是有一點我一個人的時間。因為天太冷，我也就找了個碰頭方便的星巴克寫代碼，當然是寫自己的東西，不然跟上班有啥區別呢。不過還是 on call 了一會兒。倒並沒有因此不開心。畢竟是換了一個環境，有那麼幾個瞬間我覺得做自由職業者挺好的。至少不用回到我的坑，陪伴我的只有左邊整天嗡嗡的服務器機架。（我懷疑我的情緒不穩定是不是因為這噪音，我也甚至很擔心我很在意的聽力）&lt;/p&gt;

&lt;p&gt;夏天我們去了路易斯安那，第一天就被淋成落湯雞，兩人相依趟著洪水走了好幾個小時才回到賓館。我們笑說著，也算是共患難過了。我很喜歡辦辦的一點就是她是清醒樂觀派，對，不是那種無腦樂觀派。我們去那裡是為了辦辦找了很久的 Cajun 菜，當然去了之後才了解到還有別的說法。知道了不少當地的地理歷史知識。總的來說應該算是一趟有意思的旅行。我們在大概一大半的時間就基本把能玩的都玩遍了，不過也好，留下一些時間休息。&lt;/p&gt;

&lt;p&gt;秋天我們還去了三番，沒找到太多好吃的東西，不過倒是好好體會了一下自然風貌和人文氣息。我最鍾意的還是 Amoeba 音像店和 City Lights 書店。這個習慣可能從小就養成了，去得最多的地方就是書店和音像店。從並不富足的零花錢裡省出 1.27 元買口袋書，應該是從那時開始的。Strand 書店可以媲美 City Lights，不過還沒有在紐約看到像 Amoeba 收藏量這麼大的音像店。&lt;/p&gt;

&lt;p&gt;我們的小家算是弄得差不多了。辦辦在裝飾/裝修家的理念上跟我的還是蠻一致的，我們也都很開放思維，即便有細微的分歧也都能商量出共識。具體細節就不多說了，不過有一個理念我覺得值得一提，我們都不喜歡電視，就像 Daft Punk 的曲子說的一樣 Television Rules the Nation，它只會把你的思考關掉，被動信息接收是一件很恐怖的事情。我們認為書和音樂才應該是主宰客廳的東西，所以我們家沒有電視，只有書櫃、黑膠和音響。&lt;/p&gt;

&lt;h2 id=&quot;工作&quot;&gt;工作&lt;/h2&gt;

&lt;p&gt;年初時其實狀態還可以，那時候永強還沒有離職。我們協力將公司的數據庫換了。那段時間學習/做了很多事情。他鐵了心要離開也是沒有辦法的事情，我也知道原委，我只能盡力挽留，但同時也盡可能能多多地把他積攢的經驗學過來。那段時間還是蠻充實的，其中有段時間因為太忙，都沒有去 Gym。可到了快年底的時候，由於雇主在身份問題配合上的拖拉，引發了我再次對自己不自由狀態的清醒意識，於是情緒很不穩定。好在後來跟辦辦說說後，被疏通了不少。年底漸漸又拉回了狀態。不過在此期間，該幹的活兒還是一如既往完成的。我想這是該有的職業素養。&lt;/p&gt;

&lt;p&gt;從各方面講，我都不算是一個經驗老道的架構師。更何況在創業公司，所謂架構師就意味著你啥事都得做。而且就目前公司的情況看，每個人都要能獨當好幾面，不能掉鏈子。所以壓力還是挺大的。2018 要更多地學習。更關鍵的是要積極思考，不能被問題牽著鼻子走。當然有些東西是來自經驗的，沒有經驗就只能多讀書學習了。公司的創始人也是資源豐富，我也希望新的一年能多多和公司的同事和顧問們學習。當然最重要的一點，我會在文末說，因為這一點不僅僅侷限於工作方面。&lt;/p&gt;

&lt;h2 id=&quot;學習&quot;&gt;學習&lt;/h2&gt;

&lt;p&gt;今年學習的東西主要分三塊，除了編程相關的，還有音樂和讀書。&lt;/p&gt;

&lt;h3 id=&quot;編程&quot;&gt;編程&lt;/h3&gt;

&lt;p&gt;前半年有在做那個項目，用了 ClojureScript 和 Electron。寫起來還是不太習慣，畢竟這是我第一次用 FP 寫大項目，而且 Electron 的世界我也很陌生，往往一個問題要先去了解 Electron JS 版，然後再想 ClojureScript 的解決方案。不過這就是學習邊緣技術的代價吧，挺好。&lt;/p&gt;

&lt;p&gt;年末的時候有個想法就是希望用用戶手機端做爬蟲，測了一下 iOS WebKit，可以訪問 DOM，也跟 JS 交互，感覺這條路還是可行的。至於我之前抱怨的 Cookie 問題，我總覺得是我代碼寫得有問題。所以打算真正做的時候再好好 debug。&lt;/p&gt;

&lt;h3 id=&quot;書&quot;&gt;書&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/480759/34470814-ffa2a0a0-ef07-11e7-84eb-80ea728e8f11.png&quot; alt=&quot;2017books&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今年讀的書不多，但感覺總體質量還是不錯的。上圖中我用黃框標出的書都是我心中的前三名，也是花了最長時間讀的書。留下了不少筆記和想法。&lt;/p&gt;

&lt;p&gt;此外我想把訂閱的 WIRED 和 nautil.us 也算進來。在一個讀書群裡我看到一個很受啟發的觀點，不必在意讀的媒介，期刊也好書也好，我們是不是能用“能否引發思考“類似的問題來作為判定“讀書”的標準。&lt;/p&gt;

&lt;h3 id=&quot;音樂&quot;&gt;音樂&lt;/h3&gt;

&lt;p&gt;今年感覺最大的收穫就是意識到音樂的學習就像學習外語一樣，要聽要練，帶腦子的那種。即便現在的科技已經可以讓不會樂器的人也能做音樂，但是要寫出好的作品還是需要紮實的基礎。所以今年一方面慢慢學習（爵士）樂理，一方面在鋼琴上練習爵士音階。音樂製作方面，我在看一本關於鼓的書，節奏和韻律在流行樂裡非常重要。年末的時候我又重新訂閱了 Computer Music 和 Future Music 兩本雜誌，不求緊跟潮流，只希望能學到更多音樂編寫和製作上的技巧。&lt;/p&gt;

&lt;h2 id=&quot;2018&quot;&gt;2018&lt;/h2&gt;

&lt;p&gt;我要感謝兩個給我啟發的人，一個是辦辦，一個是 Life 3.0 的作者 Max Tegmark。從 2018 開始，我希望培養兩個習慣：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;記錄未知，並及時調研，花適當時間搞到適當明白的程度&lt;/li&gt;
  &lt;li&gt;在仔細想過我如何做能夠改善狀況前，不再抱怨任何事情&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;辦辦有個習慣，她有個 ToDo List，記錄了各種她想要搞明白的事情。有空時她就會挑一個徹查，直到弄得差不多明白了。當然這個也是按照她自己的興趣愛好來記錄的。這個行為讓我很慚愧，我這才意識到我已經很久沒有這麼好奇心驅動了。這是一個警鐘。我不能再這樣下去了。&lt;/p&gt;

&lt;p&gt;Max Tegmark 在 2014 年有個新年願望：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I was no longer allowed to complain about anything without putting some serious thought into what I could personally do about it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我覺得這是一個非常睿智的願望，是人成熟後才會意識到這價值的願望。而這一點就是我前文提到的“不僅僅侷限於工作”的重要一點。&lt;/p&gt;

&lt;p&gt;另外，我想回一趟家，看望多年沒見的父母和長輩。&lt;/p&gt;</content><author><name>Conan</name></author><summary type="html"></summary></entry><entry><title type="html">Electron + ClojureScript + Reagent  + nREPL</title><link href="https://conanblog.me/blog/2017/06/10/electron-clojurescript-reagent-nrepl/" rel="alternate" type="text/html" title="Electron + ClojureScript + Reagent  + nREPL" /><published>2017-06-10T00:00:00-04:00</published><updated>2017-06-10T00:00:00-04:00</updated><id>https://conanblog.me/blog/2017/06/10/electron-clojurescript-reagent-nrepl</id><content type="html" xml:base="https://conanblog.me/blog/2017/06/10/electron-clojurescript-reagent-nrepl/">&lt;p&gt;正在進行的 Savant 項目就是這個前端技術架構做開發的，配置麻煩了一點，但是一旦配好了你將擁有爽爆了的 Live Coding 的開發體驗。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Electron + ClojureScript + Reagent&lt;/code&gt;部分已經有人做了——&lt;a href=&quot;https://github.com/karad/lein_template_descjop&quot; target=&quot;_blank&quot;&gt;descjop&lt;/a&gt;，直接拿來用就好。想要了解細節的話可以看這個系列文章 &lt;a href=&quot;https://owensd.io/2017/02/06/clojurescript-electron/&quot; target=&quot;_blank&quot;&gt;CLOJURESCRIPT + ELECTRON&lt;/a&gt;，雖然不是出自同一作者，但是思路一致。可是 descjop 只用了 Figwheel 的默認 REPL，所以這只解決了一半的問題，跟目前流行的 IDE／編輯器結合最好的方案還是通過 nREPL，這個我在&lt;a href=&quot;/blog/2016/03/06/reagent-figwheel-repl-with-nrepl/&quot;&gt;之前的文章&lt;/a&gt;提到過。配法類似，需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;project.clj&lt;/code&gt; 裏加兩行。一個是 dependency：&lt;/p&gt;

&lt;div class=&quot;language-clj highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:dependencies&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org.clojure/clojure&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.8.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org.clojure/clojurescript&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.9.473&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:exclusions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org.apache.ant/ant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org.clojure/core.async&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.2.395&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reagent&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.6.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ring/ring-core&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.5.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figwheel&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.5.9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com.cemerick/piggieback&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.2.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;加的是最後一行。還有就是 Figwheel 的配置：&lt;/p&gt;

&lt;div class=&quot;language-clj highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:figwheel&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:http-server-root&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;public&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:ring-handler&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figwheel-middleware/app&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:server-port&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3449&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;:nrepl-port&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也是最後一行。接著按照 descjop 官方文檔說的運行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lein descjop-figwheel
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;之後就跟之我之前的文章一樣了，用 Cursive 或 Emacs 之類的連接&lt;code class=&quot;highlighter-rouge&quot;&gt;7002&lt;/code&gt;端口並運行：&lt;/p&gt;

&lt;div class=&quot;language-clj highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'figwheel-sidecar.repl-api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cljs-repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Happy Live Coding!&lt;/p&gt;</content><author><name>Conan</name></author><summary type="html">正在進行的 Savant 項目就是這個前端技術架構做開發的，配置麻煩了一點，但是一旦配好了你將擁有爽爆了的 Live Coding 的開發體驗。</summary></entry><entry><title type="html">Serverless</title><link href="https://conanblog.me/blog/2017/05/31/serverless/" rel="alternate" type="text/html" title="Serverless" /><published>2017-05-31T00:00:00-04:00</published><updated>2017-05-31T00:00:00-04:00</updated><id>https://conanblog.me/blog/2017/05/31/serverless</id><content type="html" xml:base="https://conanblog.me/blog/2017/05/31/serverless/">&lt;p&gt;長週末的期間，我跟進了一下關於 Serverless 的新動向，動手做了一些小項目來加深對目前工具、方法和社區的了解，當然也順便搞定了 Clojure 在 Serverless 環境下的配置方法。跟一年前相比，目前的工具鏈、服務平台，越發成熟了。年前跟盎可交流的時候說要用 Serverless 做的一個項目，當時看還有很多可行性的顧慮，如今我對它很有信心。&lt;/p&gt;

&lt;h2 id=&quot;起源和發展&quot;&gt;起源和發展&lt;/h2&gt;

&lt;p&gt;Serverless 又是一個類似 NoSQL 一樣誤導人的名字。其實把它叫做 FaaS（Function as a Service）更合適，私以為這是函數式編程對當今計算世界的另一個餽贈（手裡是錘子，看啥都是釘子）。不過言歸正傳，從一定距離看最近這十多年軟件行業，我意識到一個規律：&lt;strong&gt;一切能用軟件完成的事情，人們會不惜一切代價把它變成軟件&lt;/strong&gt;。硬件也逃離不了這個命運，像各種虛擬機，從編程語言運行環境的虛擬化，到 OS 虛擬化，再到通信連路的虛擬化，它們實際上都是在模擬硬件。這種事情初聽起來像是脫褲子放屁，何況這類技術初期都有很多性能問題，可為什麼人們還是孜孜不倦地繼續注入智力呢？多年前淺薄如我，沒有看到短週期快速迭代的魅力，習慣 REPL&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 之後有一天頓悟了，這不就是硬件軟件化所帶來的最大優勢嘛。隨之而來還有非常吸引人的自動化／可編程化。所以當我看到 OpenAI 在遊戲裡練習自動駕駛，我就非常確信這個領域的發展會再加速。當然，可能當時人們並沒有意識到這些利好，當時眼下要做的事情只是多加一個間接層，因為“所有計算機領域的問題都可以通過加間接層來解決”，當初問題可能是跨平台。&lt;/p&gt;

&lt;p&gt;回到 FaaS，我們不得不提比它早出現一些時間的 DevOps 運動和 Microservice。當然這兩件事情都是站在了虛擬化技術這個巨人的肩膀上。前者講求&lt;strong&gt;開發、測試、運維人員身份統一，或至少能界線模糊&lt;/strong&gt;；後者講求&lt;strong&gt;將業務邏輯切分成近乎可丟棄的小型網絡服務&lt;/strong&gt;。雖然 DevOps 運動沒有明確提倡 Microservice，但這幾乎成為標配，原因很簡單，開發人員盤子裡的菜更多了，能吃的量有限，縮小規模有助於有效迭代，又或不迭代、直接重寫。這兩件事隨後產生了一系列有趣的反應。&lt;/p&gt;

&lt;p&gt;首先職責界線模糊會迫使軟件開發者和運維人員更多的溝通協作，這催熟了很多運維工具鏈和服務平台。多年來在很多公司裡，運維人員的工作相對沒那麼多變——一旦初期平台搭建穩定後，便不需要做太多事情，之後的工作僅僅是監測和維護。但是越來越多以科技為主導的公司無法滿足於一塵不變的硬件基礎設施，運維要跟得上開發的日新月異。讓我認識到這個現狀的還是不久前的一段小插曲。我之前所在公司的老上司加入了一家管理著300～400億美元的對衝基金，主管架構／基礎設施。我幫他做過一個數據中心 SDN 項目，當時 SDN 的版圖還不明朗，我們算是第一批吃螃蟹的人，最後項目很成功，合作很愉快，他便邀請我加入他的新冒險。在交流&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;過程中我得知，因為他們的體量大，計算資源一方面短缺，一方面也不夠靈活。常常出現一個小組的資源不夠用，而另一個小組有富餘；又或是一天收到十多個小組的架構變更需求。他們原先的運維團隊還比較傳統，有大量對網絡協議、Linux 內核了解透徹卻缺乏大型軟件開發經驗的人員。但是新的需求已經不僅僅是搭建並維護起基礎設施供各個模型團隊用，更多的是要基礎設施更具彈性和靈活性。要做到這一點，開發者和運維人員就需要有足夠的信息交流，無論是人與人間的還是代碼層面的。因此架構代碼化和可被代碼化（自動化）的架構在這個情境下變得至關重要，代碼是這種信息交流的精確媒介。而這也是為什麼在他們公司傳統運維工程師需要更多軟件技能，而軟件工程師也同樣需要了解必要的架構知識。&lt;/p&gt;

&lt;p&gt;其次是 Microservice，它的進展不只如此，新的 FaaS 外衣讓它脫胎換骨。坦白說，它跟多年前討論的 SOA 沒有什麼本質區別。只是服務更小巧專精，但該有的還是都有——麻雀雖小五臟俱全。不難想像，一個網絡服務開發者不得不開始學習和考慮CAP、負載均衡、SDP（service discovery protocol）等等，當然也或者是運維團隊寫好 boilerplate code 或配置模板。但我們不難發現這底下藏著不少 overhead。且不說重複的架構組件，就光是那些架構代碼就很不 DRY，扔給哪個有理想的軟件工程師會受得了呢。更何況，此前我也跟很多朋友交流過這個問題，我們即便很願意學習架構知識，但是真正做起產品來，我們能外包多少非核心業務就外包多少，這些基礎設施／架構尤其如此。另一方面，Microservice 的推行需要全團隊的支持，尤其在現存代碼很 monolithic 的團隊，但凡有異議，這件事就很難推行，反對者會輕易把經驗積累的試錯過程看成是 Microservice 的弊端。所以我認為從開發者角度看， Microservice 終將是過度性的，它當然不會消失，也許它會成為眾多 Serverless 平台的基石，但對開發者是透明的。Serverless／FaaS 有可能是目前最好的答案。&lt;/p&gt;

&lt;h3 id=&quot;優勢&quot;&gt;優勢&lt;/h3&gt;

&lt;p&gt;做過 Microservice 項目的朋友知道，其實核心代碼只佔非常少的量，外圍有大量的 boilerplate code。架構相關的暫且不提，它還有像處理 API／RPC 之類的代碼。而 FaaS 的亮點之一就在於它將這些 boilerplate code 推到了服務提供商／運維團隊，而開發者可以集中精力寫業務邏輯，寫更接近於計算本質的代碼。然而這並非意味著開發者又回到了之前工作方式，因為 FaaS 會問開發者兩個很重要的問題，最多用多少內存，最長跑多長時間。這是兩個很聰明的問題，開發者即便在開發時就要對運行資源和財務做出決定，並對決定做出相應的優化。這樣一來 DevOps 的代價就很低了。&lt;/p&gt;

&lt;p&gt;FaaS 的另一個優勢就是真正意義上的按使用收費，Function 不跑就不用給錢。當年 Cloud Computing 剛成為 buzz word 的時候，我看到有種解釋是“像自來水一樣使用計算資源”，不過事實上，雖然相比較傳統的服務器購買和租用，它確實降低了運維成本，但事實上我們還是需要，比方說，預付資源以降低單位成本。而且所謂彈性架構其實也是有一定的顆粒度的。FaaS 更接近這種自來水的解釋。而企業也真正有望將運維開銷從 CAPEX&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;（資本支出）轉化為 OPEX&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;（運營支出）。&lt;/p&gt;

&lt;h3 id=&quot;潛在問題&quot;&gt;潛在問題&lt;/h3&gt;

&lt;p&gt;那 FaaS 的缺點是啥呢？我現在能預見的有這麼幾點。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;很難在本地測試，單元測試不難，但集成測試幾乎不可能。最終我們也許不得不在雲裡配置四個環境，dev、testing、staging 和 prod。技術上來說完全沒問題，問題在於開發成本，如果平台能減免部分費用，相信也算是個解決方案，不過我覺得這個不太可能發生…&lt;/li&gt;
  &lt;li&gt;有時無法確定那兩個問題的答案，這意味著開發者有可能只能靠猜測。畢竟測試數據和真實數據可能有區別。但這不是 FaaS 獨有的問題，這個依賴於經驗積累。&lt;/li&gt;
  &lt;li&gt;錯綜複雜的服務依賴。類似軟件包依賴的問題也很有可能出現在 FaaS 裏，但可能沒那麼嚴重，畢竟規模比包管理器處理的要小很多。雖然目前 provisioning 工具已經具備資源依賴處理的功能，但是面對 FaaS，這些是否足夠還要繼續觀察。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;FaaS 會有坑，但我對它的走向很樂觀。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;Read–eval–print loop&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;因為老上司邀請太多次，還特別安排我跟他們 CTO 吃飯見面，我不得不答應去公司聊聊項目，但其實就是連蒙帶騙走了一遍面試流程，見了來自多個部門十多個人。加此標注特別說明對目前雇主表忠心，並非我想跳槽。雖然他們要解決的問題很誘人，可因為跟我的職業計劃和理想不相符，所以我還是婉拒了他們。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Capital_expenditure&quot;&gt;Capital expenditure&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Operating_expense&quot;&gt;Operating expense&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Conan</name></author><summary type="html">長週末的期間，我跟進了一下關於 Serverless 的新動向，動手做了一些小項目來加深對目前工具、方法和社區的了解，當然也順便搞定了 Clojure 在 Serverless 環境下的配置方法。跟一年前相比，目前的工具鏈、服務平台，越發成熟了。年前跟盎可交流的時候說要用 Serverless 做的一個項目，當時看還有很多可行性的顧慮，如今我對它很有信心。</summary></entry><entry><title type="html">最近在學 Swift</title><link href="https://conanblog.me/blog/2017/02/06/learning_swift/" rel="alternate" type="text/html" title="最近在學 Swift" /><published>2017-02-06T00:26:00-05:00</published><updated>2017-02-06T00:26:00-05:00</updated><id>https://conanblog.me/blog/2017/02/06/learning_swift</id><content type="html" xml:base="https://conanblog.me/blog/2017/02/06/learning_swift/">&lt;p&gt;最近在學習 Swift，一開始我以為它像目前的一些支持 &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented%5C_programming&quot;&gt;OOP&lt;/a&gt; 和 &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional%5C_programming&quot;&gt;FP&lt;/a&gt; 的多範式語言一樣，可猝不及防它居然引入了一種新的範式，這種範式基於 Java 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt;，但加了更多靈活的創新。我覺得學習語言不搞明白它的範式等於是沒學。畢竟語法是形，範式才是神。這才有了這篇文章。&lt;/p&gt;

&lt;p&gt;給沒有耐心讀完的同學一句話概括一下，Swift 的設計基本就鼓勵更多地使用值類型，為了使值類型的應用更具可行性，它引入了比 Java &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; 更加靈活的 &lt;code class=&quot;highlighter-rouge&quot;&gt;protocol&lt;/code&gt; 機制。&lt;/p&gt;

&lt;h2 id=&quot;swift-的時代背景&quot;&gt;Swift 的時代背景&lt;/h2&gt;

&lt;p&gt;Swift 可以說是 &lt;a href=&quot;https://en.wikipedia.org/wiki/Chris_Lattner&quot;&gt;Chris Lattner&lt;/a&gt; 或 Apple 給現代操作系統和編程範式的一個答案。從它的歷史來說，根據最近 ATP 對 Chris 做的一個訪談&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，Apple 內部做了很多努力讓 Objective-C 更好，包括引進 &lt;a href=&quot;https://en.wikipedia.org/wiki/Automatic%5C_Reference%5C_Counting&quot;&gt;ARC&lt;/a&gt; 增強內存管理。強推一個新語言肯定是萬不得已的選擇。Objective-C 有個問題沒法根除，就是它並不是一個足夠安全的語言，它構建與 C 語言，C 用指針、可定義未初始化的變量、以及數組溢出的問題等等。而從 Objective-C 中剝離 C 又不太現實，最後這才有了 Swift。&lt;/p&gt;

&lt;p&gt;Swift 跟其他現代編程語言一樣，有著很多吸引人的語法糖，其精髓也藏在這一大堆語法糖裏。2015 和 2016 年的 WWDC 有三個 Keynotes 對其做了揭示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/408/&quot;&gt;Protocol-Oriented Programming in Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/414/&quot;&gt;Building Better Apps with Value Types in Swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/419/&quot;&gt;Protocol and Value Oriented Programming in UIKit Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不難看出，它的核心就是 Value 和 Protocol。當然從語法的角度來說，另一個我很讚賞的特徵就是它是一個非常顯式的（explicit）語言。但我不打算在這篇文章裏聊這個，我們還是先來看看 Value 和 Protocol，在聊這倆話題之前，我們先看看我們現在所處的編程語言／範式在歷史裏的位置。&lt;/p&gt;

&lt;h3 id=&quot;fauxo&quot;&gt;FauxO&lt;/h3&gt;

&lt;p&gt;OOP 是很優秀的一種編程範式，它很大程度的幫助我們復用代碼，而 OO 的模型也很好地減小了我們大腦對複雜世界構建時的負擔。不過 OOP 並非完美，隨著我們對世界建模的深入，複雜性也隨之增加。其實 Gary Bernhardt 曾在演講 &lt;a href=&quot;https://www.destroyallsoftware.com/talks/boundaries&quot;&gt;Boundaries&lt;/a&gt; 裏就總結過我們如何從 PP 到 OOP，再從 OOP 到 FP 的趨勢。這張表格我記憶深刻：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Mutation&lt;/th&gt;
      &lt;th&gt;Data &amp;amp; Code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Procedural&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Separated&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OO&lt;/td&gt;
      &lt;td&gt;Yes&lt;/td&gt;
      &lt;td&gt;Combined&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Functional&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Separated&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;從 PP 到 OOP，我們隱藏了一些不必要的內部結構，但作為補償，我們不得不把數據和代碼（業務邏輯）合併在一起；而數據本身在 PP 和 OOP 裏，是可變的（mutable），即變量的傳遞是以引用（reference）。這就意味著數據是非顯式分享（implicit sharing），當我們構建的系統越來越複雜時可變性數據會讓我們更難去推理（reasoning）系統的狀態，而數據代碼的不分離又使得我們沒法更好得分離核心業務代碼和外圍代碼，依賴會越來越多，從而使單元測試更困難。這也是為什麼現在越來越多的語言和框架社區開始思考 FP 的原因之一。不過就像 Gary 說的一樣，FP 往往在建模方面沒有 OOP 來得更接近人們的思維方式，尤其是在用一個並非為 FP 所設計的編程語言的時候。而另一個考慮 FP 的原因是因為數據的可變性使得多線程程序很難保證沒有 bug。這個理由是人們經常提到的，但是我不認為它是真正的痛點。一些好的併發模型其實也是可以減少併發所致的潛在 bug 的。&lt;/p&gt;

&lt;p&gt;如果你看了 Gary 的演講（非常推薦），他其實也提到了經典範式之外的第四種，即沒有 Mutation 但同時邏輯和相關數據是在一起的。他稱它為 FauxO。而恰好，今天我們要聊的範式就跟這 FauxO 相似，至少一部分相似。&lt;/p&gt;

&lt;h3 id=&quot;oo-的難點&quot;&gt;OO 的難點&lt;/h3&gt;

&lt;p&gt;多態和繼承是支持 OOP 語言必有的語言特性。就像《&lt;em&gt;松本行弘的程序世界&lt;/em&gt;》裏總結的那樣，目前編程語言有多種繼承方式，優劣可以簡單概括為下表：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;種類&lt;/th&gt;
      &lt;th&gt;優&lt;/th&gt;
      &lt;th&gt;劣&lt;/th&gt;
      &lt;th&gt;代表語言&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;单一继承&lt;/td&gt;
      &lt;td&gt;继承关系為簡單树结构&lt;/td&gt;
      &lt;td&gt;無法通過繼承來共享實現（implementation）&lt;/td&gt;
      &lt;td&gt;Smalltalk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;多重继承&lt;/td&gt;
      &lt;td&gt;可用繼承分享實現&lt;/td&gt;
      &lt;td&gt;類關係複雜，繼承的優先順序和功能可能存在衝突&lt;/td&gt;
      &lt;td&gt;C++, Python&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;單繼承 + 接口（Interface）&lt;/td&gt;
      &lt;td&gt;類規範定義了方法聲明，從而使類接口相關的編程跟多重繼承一樣&lt;/td&gt;
      &lt;td&gt;無法共享實現&lt;/td&gt;
      &lt;td&gt;Java&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其實我還想補充一下 Ruby 裏作為一個賣點的 Mix-in，坦率地說它只是一個較特殊的多重繼承，很大程度地減小了多重繼承的複雜類關係，但是依然存在繼承優先和衝突問題，而一旦衝突發生，它會以非顯式的方式發生。&lt;/p&gt;

&lt;p&gt;我們是否能做得跟好呢？我覺得 Chris 的答案很棒。&lt;/p&gt;

&lt;h2 id=&quot;value-和-protocol&quot;&gt;Value 和 Protocol&lt;/h2&gt;

&lt;h3 id=&quot;value&quot;&gt;Value&lt;/h3&gt;

&lt;p&gt;Swift 裏有除了所有原始類型（primitive type），&lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 也都是值類型。所謂值類型，就是這些數據類型不可變（immutable），傳遞進函數或方法的時候，是直接傳入值，即拷貝。跟其相對的是引用類型（reference type），其特徵是可變（mutable），引用式傳遞。前面提過引用類型的問題，那我們似乎就只能更多地使用值類型來規避引用類型的風險了。所以 Swift 將 &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 升級為一等公民，這意味著你也可以對它們進行函數定義，對 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 你還可以定義其內部變量和常量。所以這樣一來，我們幾乎完全可以用它們來代替 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;。不過看得出來，蘋果官方文檔對於何時使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 而非 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; 的問題還是很克制的，而事實上 Swift 的很多原始類型都是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 寫的。我們在寫 Java 代碼時不是經常手動寫不可變類嗎？其實 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 是這種類的語法糖。當然因為它們是 Swift 的設計基礎，所以它不僅僅是語法糖，一般情況下性能方面比我們自己手寫不可變類要好。有了它們，我們這不是離 FauxO 更近了？&lt;/p&gt;

&lt;h3 id=&quot;protocol&quot;&gt;Protocol&lt;/h3&gt;

&lt;p&gt;Swift 依然是一個面向對象編程語言，不過這幾年的 WWDC 都強調它的 &lt;code class=&quot;highlighter-rouge&quot;&gt;protocol&lt;/code&gt;。其实 &lt;code class=&quot;highlighter-rouge&quot;&gt;protocol&lt;/code&gt; 跟 Java 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; 很像，主要區別在於:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可定義字段／屬性，即 &lt;em&gt;field&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;可用 &lt;code class=&quot;highlighter-rouge&quot;&gt;mutating&lt;/code&gt; 定義方法是否會修改實現主&lt;/li&gt;
  &lt;li&gt;可被多元組合（&lt;em&gt; protocol composition&lt;/em&gt;）&lt;/li&gt;
  &lt;li&gt;可定義可選方法&lt;/li&gt;
  &lt;li&gt;可被擴展（&lt;em&gt; protocol extensions&lt;/em&gt;），從而&lt;strong&gt;共享實現&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;當然不一樣的地方很多，我這裡列舉的只是我覺得會導致整個語言地貌不一樣的點。而其中我覺得最重要的就是最後一點。因為它解決了上一章節留下的一個問題，即如何愉快地使用類多重繼承，但同時又可以最大程度上減小多重繼承帶來的問題。Java 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; 開了個好頭，在此基礎上只要加上實現共享即可。雖然最新的 Java 可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;interface&lt;/code&gt; 裏加默認實現，但是它並不像 Swift &lt;code class=&quot;highlighter-rouge&quot;&gt;protocol&lt;/code&gt; 那樣支持追加式建模（retroactive modeling）。可以說 &lt;code class=&quot;highlighter-rouge&quot;&gt;protocol&lt;/code&gt; 在加以限制的基礎上最大限度地開放了自由度。默認實現方面可能唯一需要注意的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;protocal&lt;/code&gt; 裏定義的方法並不具有 &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; 的多態性。畢竟它可能會被 &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; 使用。&lt;/p&gt;

&lt;p&gt;那我來再加一行：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;種類&lt;/th&gt;
      &lt;th&gt;優&lt;/th&gt;
      &lt;th&gt;劣&lt;/th&gt;
      &lt;th&gt;代表語言&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;单一继承&lt;/td&gt;
      &lt;td&gt;继承关系為簡單树结构&lt;/td&gt;
      &lt;td&gt;無法通過繼承來共享實現（implementation）&lt;/td&gt;
      &lt;td&gt;Smalltalk&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;多重继承&lt;/td&gt;
      &lt;td&gt;可用繼承分享實現&lt;/td&gt;
      &lt;td&gt;類關係複雜，繼承的優先順序和功能可能存在衝突&lt;/td&gt;
      &lt;td&gt;C++, Python&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;單繼承 + 接口（Interface）&lt;/td&gt;
      &lt;td&gt;定義了方法簽名，從而使類接口相關的編程跟多重繼承一樣&lt;/td&gt;
      &lt;td&gt;無法共享實現&lt;/td&gt;
      &lt;td&gt;Java&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;單繼承 + 協議（Protocol）&lt;/td&gt;
      &lt;td&gt;定義了方法簽名或聲明，從而使類接口相關的編程跟多重繼承一樣&lt;/td&gt;
      &lt;td&gt;暫時未發現，請發現的朋友賜教&lt;/td&gt;
      &lt;td&gt;Swift&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;

&lt;p&gt;我本想自己寫一些例子，不過我覺得&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/408/&quot;&gt;Protocol-Oriented Programming in Swift&lt;/a&gt;的例子其實很到位，尤其是他提供的 Playground 文件裏，有詳細的解說。所以這讓我原先寫個案例分析的安排顯得多餘，或許在之後我的項目裏有些心得我會專門寫一寫吧。不過原版的是 Swift 2 的，新版 Swift 不兼容，改一下並不困難，但網上也可以找到有別人改好的版本。&lt;/p&gt;

&lt;p&gt;下面貼一下我改過的例子，你可以直接用 Playground 跑這些代碼。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CoreGraphics&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PlaygroundSupport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;twoPi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;M_PI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//: 先創建一個 protocol 類型來定義一些基本圖形命令&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 移動畫筆位置，但並不會在畫布上添加任何像素&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 從當前點畫一條直線到參數點，並把畫筆位置更像至參數點位置&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 畫圓弧&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addArc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//: 測試用 `Renderer`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//: 它並不會真的 render 圖像，而是在命令行裏輸出作圖過程。這在開發時很管用，&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//: 而且很多時候光從圖像上是看不出是否有問題的，比如下面嵌套圖形的例子。&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TestRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moveTo(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lineTo(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addArc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;arcAt(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, radius: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot; startAngle: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, endAngle: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//: 下面我們來構建圖形&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Drawable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 將 `self` 傳給 `renderer` 使其顯示&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//: 定義多邊形和圓形&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Polygon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Drawable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corners&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;corners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Drawable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addArc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twoPi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//: 定義 `Diagram`，其本質是一對 `Drawable`s&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Diagram&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Drawable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Drawable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Drawable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//: ## 追加式建模（Retroactive Modeling）&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//: 這裏我們對 `CGContext` 進行擴展使其成為 `Renderer`。&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//: 如果我們一開始沒有用 `protocol` 而是 `class` 的話，這裏是沒法擴展的&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addArc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGMutablePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addArc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;clockwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;addPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;187.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;333.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;93.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;triangle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Polygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;corners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;187.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;427.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;268.69&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;286.625&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;106.31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;286.625&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;diagram&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Diagram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//: ## 嵌套圖形&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//: 如果 `Diagram` 是引用式傳遞的話，嵌套會導致無限遞歸。而值傳入就沒問題。&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//: 這裏為了能夠在圖形界面看出兩次作圖，我們將嵌入的圖縮小顯示。&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ScaledRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addArc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scaledCenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addArc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaledCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 定義一個可以縮放 `Base` 實例的 `Drawable`，而 `Base` 也是一個 Drawable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Scaled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Drawable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Drawable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Base&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ScaledRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// 定義畫布&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;drawingArea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;375.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;667.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// `CoreGraphicsDiagramView` 是 `UIView`。&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 它會調用用戶定義的方法來在 `CGContext` 上生成淺藍色筆觸圖形。&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CoreGraphicsDiagramView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;saveGState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lightBlue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.617&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.976&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cgColor&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setStrokeColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setLineWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strokePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;restoreGState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 在 playgroud 裏添加 `CoreGraphicsDiagramView`&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showCoreGraphicsDiagram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;nv&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CGContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;diagramView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CoreGraphicsDiagramView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawingArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;diagramView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;diagramView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setNeedsDisplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;PlaygroundPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liveView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diagramView&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;// 現在我們把 `diagram` 自己添加進自己&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;diagram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Scaled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diagram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 按 shift-cmd-Y 看命令行輸出&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;diagram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TestRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 按 opt-cmd-Return 看圖形輸出&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;showCoreGraphicsDiagram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Diagram&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diagram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;原先的 playground 裏，作者其實把跟定義畫布相關的那部分代碼藏在了一個單獨的文件裏。我在上面的例子裏把它搬了出來，這樣一方面讀者可以直接複製粘貼這段代碼就可以把玩，另一方面它也很好地展示了在一個並非純淨的 POP 世界裏，POP 如何跟 OOP 交互。&lt;/p&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;

&lt;p&gt;Swift 是一門設計精良的語言，它的設計初衷就是引導程序員寫出更好的代碼，使代碼更加顯式，更少模稜兩可。Andy Matuschak 在他的演講&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;裏也提到了，我們寫 Swift 代碼就是一個遊戲，每個程序都有 Object 層和 Value 層，我們能放越多東西進 Value 層越好。Value 和 Protocol，這就是 Swift 給我們的最具價值的東西。&lt;/p&gt;

&lt;p&gt;另外，文中提到的各種演講視頻都非常有價值，比看我這篇文章值 100 倍。&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://atp.fm/episodes/205&quot;&gt;205: PEOPLE DON’T USE THE WEIRD PARTS&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://realm.io/news/andy-matuschak-controlling-complexity/&quot;&gt;Controlling Complexity in Swift — or — Making Friends with Value Types&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Conan</name></author><summary type="html">最近在學習 Swift，一開始我以為它像目前的一些支持 OOP 和 FP 的多範式語言一樣，可猝不及防它居然引入了一種新的範式，這種範式基於 Java 的 interface，但加了更多靈活的創新。我覺得學習語言不搞明白它的範式等於是沒學。畢竟語法是形，範式才是神。這才有了這篇文章。</summary></entry><entry><title type="html">2016 -&amp;gt; 2017</title><link href="https://conanblog.me/blog/2016/12/31/2016-2017/" rel="alternate" type="text/html" title="2016 -&gt; 2017" /><published>2016-12-31T21:50:38-05:00</published><updated>2016-12-31T21:50:38-05:00</updated><id>https://conanblog.me/blog/2016/12/31/2016-2017</id><content type="html" xml:base="https://conanblog.me/blog/2016/12/31/2016-2017/">&lt;p&gt;&lt;img src=&quot;/images/20151231/hpny.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;又到了一年總結經驗教訓和展望未來的時候。簡單總結就是有進步，但有很大的進步空間。2016年的目標尚未完成的當然有，不過就像我一貫說的那樣，目標定得越遠大，即使達不到，但到達的地方也會越高遠。這個開頭簡直廢話……&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;工作&quot;&gt;工作&lt;/h2&gt;

&lt;p&gt;說說工作先。加入新的公司有一年多幾個月。開始的一些事情其實有些動搖我的念頭，甚至有些後悔自己當初過來的決定。這也是為什麼我在去年的年終總結的時候說需要贏得團隊的信任需要一個過程的言外之意。而確實，磨合、溝通和信任不是一紙協議就能搞定的。經過一年的努力，這個在去年定下的大目標相信是完成得不錯的。&lt;/p&gt;

&lt;p&gt;工作細節方面，今年實踐了 Docker 以及一些 Docker 相關的技術，而我對它的態度也是從好奇轉向不推薦，而後又漸漸中立。好奇那會兒多半是因為各種軟硬文，在家裡的小環境裡面嘗試過之後確實發現了它的優勢確實誘人。環境獨立這樣的特性自然不用說，我更加喜歡它對軟件架構的影響，這種模塊化服務／微服務驅動的架構在運維方面有著非常大的優勢。但這個優勢的獲取並非易事，容器開關與組合、彈性規模在Docker技術框架下都很簡單，可容器內軟件必須要能做到足夠的擼棒性才能利用起 Docker 的技術框架。這在一開始並沒有朝這麼走的創業公司中是有實踐難度的。想想也是，本來一個“很簡單”的東西，直接那現有框架做做也就幾天功夫，去他媽的可擴展性，未來的事情等有未來再說。所以我的思路也調整了一下，現在可以欠技術債，但要一直紀錄需要改變的地方或更好實踐的方式。並經常審視，並摸清實施計畫和細節。這樣等到時機成熟，說下手就可以下手。另外，在軟件開發過程中，code review 要為之前說的這個實施計畫做鋪墊。這個方式在 2016 中的工作是奏效的，當然還有上升空間，那就是怎樣在團隊內部做佈道，思路上來說首先還要從團隊內部的分享文化開始著手吧。&lt;/p&gt;

&lt;p&gt;與 Docker 相關的，我們在一個核心子項目中採用了 LXC，總的來說我對 LXC／LXD 項目更加鍾意。它們比較平易近人，不強迫你的軟件架構做太多調整。我們事實上成功將 VM 替換下來了。與 Docker 相比，它更 hackable，更 Linux。&lt;/p&gt;

&lt;p&gt;另外今年也實踐了 &lt;em&gt;ChatOps&lt;/em&gt;，我為公司做了一個運維機器人並繼承到了我們的 Slack、Github 和 AWS 等第三方服務上。首先這個解了我對新技術動向和趨勢的饞（最早的時候本來想給自己的小社團 &lt;em&gt;1682&lt;/em&gt; 做機器人來著），另一方面它也確實為我們的工作帶來了不少便利。你可以想像它是把命令行帶進了工作聊天群組，但是不一樣的就是，它是另一層抽象。這就大大加速和便利了團隊內部的 Ops 相關任務，不了解命令行的設計師想要測試個前端方案也不用再麻煩團隊裡的其他成員來做測試部署了。&lt;/p&gt;

&lt;p&gt;工作方面的收獲當然不僅如此，大概就先放這些吧。&lt;/p&gt;

&lt;h2 id=&quot;生活和學習&quot;&gt;生活和學習&lt;/h2&gt;

&lt;p&gt;其實我想過把生活和學習分開說，可是發現其實生活中有一大塊是圍繞著學習的，所以還是合併一下吧。&lt;/p&gt;

&lt;p&gt;今年一件大事是我們終於把房買了，我們都很滿意的一套。因為我當時工作比較忙，辦辦花了很多心思操持買房的事情，要給她一朵大大的紅花！當然也要感謝爸爸媽媽們的支持。&lt;/p&gt;

&lt;p&gt;我跟辦辦已經結婚一週年了，不過今年我們卻有長達5個月不在一起，她因為簽證問題不得不回國一段時間，所以講真的這一長段時間基本沒有什麼生活，因為一個人也不太願意出去玩，這段時間花了大半的時候學習有關音樂的東西，曾經只做做 loop，為表演修修曲子，今年終於做了自己的曲子，而且這次挑戰了更難的旋律性曲子，非舞曲。這應該算是今年學習的最大成就。從無到有做一首曲子學了很多東西。新的一年打算花一些時間學習更多 synth，如果有時間想要做一些完成度比較高的舞曲。&lt;/p&gt;

&lt;p&gt;SoundCloud:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/278237122&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;網易雲音樂：&lt;/p&gt;

&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;amp;id=430787469&amp;amp;auto=0&amp;amp;height=66&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;說到一週年，我們一週年的那天風雨大作，在去訂好的飯店的路上還下起了冰雹，想來也是個值得記錄的軼事。&lt;/p&gt;

&lt;p&gt;今年另一個比較大的成就是堅持去健身房，從辦辦回國之後，我就誇下海口說要去健身房，要練出辣身材。好事是前半句話我做到了，當中要謝謝跟我一起健身的 gym buddy 永強；後半句話是練了一陣子才意識到以我們的體質其實這個不是一兩年就能做到的事情。不管怎樣，我從一個俯臥撐只能做三五個的弱雞，到20個一組做4組的稍強的弱雞，已經是很值得沾沾自喜一下的了。不過革命尚未成功，明年要繼續。另外，今年夏天開始，跟我的好朋友 Roman 一起攀岩，雖然當中有過斷斷續續，但我們一直堅持到冬天閉館為止。我們到年末的時候也已經明顯地意識到自己的狀態很好。現在我們已經可以挑戰一些技術性的線路了。十個等級我們現在應該差不多是在五六級的樣子。攀岩是一項對技術、思維、體能都有要求的運動，每次 session 下來你的左右腦思維模式都會得到鍛鍊。我相信這項運動我還會繼續，它首先很有趣，另一方面它也是對我去健身房的一種督促，畢竟身體機能跟不上，很多技巧性動作也做不了。&lt;/p&gt;

&lt;p&gt;還有一件比較有成就感的事情就是今年電焊了好些個東西，當中包括跟辦辦一起做的多功能電子鬧鈴，當然也有後來的 ErgoDox 鍵盤。趁此機會也學習了一些電子硬件相關的知識，為我的 IoT 項目打打基礎。說到這一趴，我還挺為自己找了這樣的老婆自豪的。用朋友的話說，她跟外面那些妖豔貨色不一樣。是真的，你見過多少女神還跟你一起玩電焊打電動還學習天文望遠鏡的？記得肖侃兄弟說，那是雅趣，我覺得挺好。喔對了，她回國那幾個月也沒閒著，周遊列國，還學習了不少歐洲文化、藝術和歷史。最討厭跟這種好學生交朋友了，壓力太大了真是……&lt;/p&gt;

&lt;p&gt;關於天文望遠鏡，這裏要鳴謝木星的耐心指導，他在百忙之餘給我寫了三封長文，非常細緻而全面地介紹了天文觀測入門者應該懂得的關於天文望遠鏡的知識，且淺顯易懂。搬了新家後，我們應該會有更好的場地去觀星了 ：）&lt;/p&gt;

&lt;h2 id=&quot;2017&quot;&gt;2017&lt;/h2&gt;

&lt;p&gt;2016年年初，我在GoodRead上定下今年12本書的目標，年中達成了，於是就把難度加大，把目標定到了20本，最後果然沒有達成。所以2017繼續努力看書吧，依然定20本。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/480759/21580056/24d89b74-cfa4-11e6-9b18-16952ad166d0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2016年底，我就已經開始策劃做一個手機 App，其實心裡也有個小的目標，就是希望能做那個領域裡數一數二的App，最好再拿個什麼獎。跟書有關的一款 App，現在先賣個關子。&lt;/p&gt;

&lt;p&gt;有時我會情緒不穩定，這樣不好。來年我要努力做好情緒的調節和控制。我覺得我可以首先從打遊戲開始，畢竟有些遊戲真的是難到很想摔手柄……&lt;/p&gt;

&lt;p&gt;最後希望我們儘快把新家弄好吧，然後野獸和公主幸福地生活。鬼扯……好就先這樣。&lt;/p&gt;</content><author><name>Conan</name></author><summary type="html"></summary></entry><entry><title type="html">音樂筆記 070116</title><link href="https://conanblog.me/blog/2016/07/08/music-notes-070116/" rel="alternate" type="text/html" title="音樂筆記 070116" /><published>2016-07-08T22:17:34-04:00</published><updated>2016-07-08T22:17:34-04:00</updated><id>https://conanblog.me/blog/2016/07/08/music-notes-070116</id><content type="html" xml:base="https://conanblog.me/blog/2016/07/08/music-notes-070116/">&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/480759/16710021/56c13cfc-45ef-11e6-96e7-f886154a8b8f.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有一個事實，分析過去五年裏的上千首電子舞曲後可以發現，絕大多數曲子是A小調、D小調或E小調的（分別占42%，21%，16%）。&lt;/p&gt;

&lt;p&gt;有幾個原因可能共同促使這樣的不平均分布：&lt;/p&gt;

&lt;!--more--&gt;
&lt;ul&gt;
  &lt;li&gt;首先A小調的平行大調是C大調，這一對平行大小調是沒有升降符的，換句話說就是純白鍵—簡單。&lt;/li&gt;
  &lt;li&gt;而最近幾年裏越來越多的 club DJ 同時也是音樂制作人，所以他們將一些音樂理論帶進現場的表演中，開始流行的一個技巧是 harmonic mix，就是要匹配曲子的調性。而為了讓自己的作品有更大可能性被大多數 DJ 播放，很多音樂制作人選擇用可以和主流電子舞曲容易匹配的調子，所以就有更多人用A小調。&lt;/li&gt;
  &lt;li&gt;而E小調和D小調，一方面能給我們更多創新空間，又跟主流A小調有所區別，同時和聲又較其它調子更接近A小調，所以也有不少人用這倆。你可以看到篇首的 Camelot Easymix Wheel 中，D Minor 和 E Minor 就在 A Minor 的兩邊。這個輪盤是提煉過的結果，其實放到鋼琴鍵盤上看就更明白了。如下圖：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/480759/16710068/9e98bf68-45f0-11e6-93af-a0f1fb1e7486.png&quot; alt=&quot;A Minor Scale&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/480759/16710086/11084d7a-45f1-11e6-80c9-36602bf0f391.png&quot; alt=&quot;D Minor Scale&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/480759/16710087/165f4b5c-45f1-11e6-9b88-635b6ab051db.png&quot; alt=&quot;E Minor Scale&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可見 D Minor 和 E Minor 分別與 A Minor 只有一個黑鍵的區別。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最後一點也是音樂創作中最容易忽視又最重要的一點（領悟到這一點全是因為 David Byrne 寫的那本 How music works）—音樂的創作跟演奏環境分不開。很多古典樂節慢、音也長，和弦較爵士和諧也更簡單，因為演奏環境大多在類似大教堂的地方，回響會更久，所以簡化和弦，拉長音節可以讓演奏和回聲更和諧。而電子舞曲演奏地點通常空間小、嘈雜，幾乎沒有回聲。而作為舞曲音樂必須有更具穿透力的鼓點（強有力的低頻）。目前 club 音響系統中重低音工作區間是50到65赫茲，而A小調根音的A1音正好在55赫茲。（在這個頻率區間的還有降A1、升A1和B1）當然空間小了節奏也可以更快，不必擔心跟回聲和聲的事兒。當然沒了回聲這種藝術表現手法也不行，於是 club DJ 和制作人多出了一堆音頻效果器，比如reverb、echo、pingpong delay等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;綜上所述，就是為什麽這麽多電子舞曲用A小調、D小調和E小調。&lt;/p&gt;

&lt;p&gt;至於為什麽是小調而不是大調？我也不知道…不過這幾乎是個常識，絕大多數電子舞曲都是小調的，旋律部分可能會用平行大調。&lt;/p&gt;

&lt;p&gt;人們對小調的認識通常有誤區，一般教材會說大調是開心的感覺，小調是悲傷的感覺。但是！這個定義是狹隘的，相較大調，小調應該是給人更嚴肅或更專註的感覺。而事實上有很多小調曲子依然給人陽光、上揚的情緒帶動。隨手舉幾個栗子（順便安利一下本 Up 主的視頻，逃……）：&lt;/p&gt;

&lt;p&gt;降B小調：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bilibili.com/video/av5232799&quot;&gt;The Him - Feels Like Home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;F小調：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bilibili.com/video/av5205694&quot;&gt;Heren - Here &amp;amp; Now&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C小調：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bilibili.com/video/av5220294&quot;&gt;Tilka - Love&lt;/a&gt;&lt;/p&gt;</content><author><name>Conan</name></author><summary type="html"></summary></entry><entry><title type="html">當音樂遇上開源</title><link href="https://conanblog.me/blog/2016/04/03/music-meets-open-source/" rel="alternate" type="text/html" title="當音樂遇上開源" /><published>2016-04-03T00:03:27-04:00</published><updated>2016-04-03T00:03:27-04:00</updated><id>https://conanblog.me/blog/2016/04/03/music-meets-open-source</id><content type="html" xml:base="https://conanblog.me/blog/2016/04/03/music-meets-open-source/">&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/480759/14236501/0051f722-f9e5-11e5-8dd8-6ec43da87e4c.jpg&quot; alt=&quot;Moog Modular Synth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;頁首的這幅圖片是那台非常經典的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Moog_modular_synthesizer&quot;&gt;Moog Modular Synthesizer&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Giorgio_Moroder&quot;&gt;Giovanni Giorgio&lt;/a&gt; 用它把『未來的聲音』 帶進人們的音樂、人們的生活，從而有了 synth disco。那時候他並不知道自己做了一件多麼開創先河的事情。下面放一首跟我的這段話相關的曲子，有興趣的同學也可以去看看 &lt;a href=&quot;http://www.randomaccessmemories.com&quot;&gt;The Collabrators Series&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=eYDvxo-M0OQ&quot;&gt;Giorgio 的訪問&lt;/a&gt;。&lt;/p&gt;

&lt;!--more--&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;166&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/130363831&amp;amp;color=ff5500&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;而接下來我要說的，我覺得，並不亞於 Giorgio 的創舉：讓音樂創作和開源相遇。&lt;/p&gt;

&lt;p&gt;玩電子音樂的朋友可能已經知道我要說的東西了，就是像 &lt;a href=&quot;https://splice.com&quot;&gt;Splice&lt;/a&gt; 和 &lt;a href=&quot;https://blend.io/feed&quot;&gt;Blend&lt;/a&gt; 之類的平台，類似給音樂制作人/DJ/愛好者們用的 &lt;a href=&quot;https://en.wikipedia.org/wiki/GitHub&quot;&gt;GitHub&lt;/a&gt;。有了它們，你不光可以和世界各地的音樂制作人合作項目，工程文件就像源代碼一樣可以被 fork。這將會是繼 Jazz 之後又一個最美好的時代。或許這樣的平臺是受啓發於 GitHub 或 Daft Punk 的新專輯，但我想說這是一種必然趨勢。&lt;/p&gt;

&lt;p&gt;人，說到底還是社會動物，喜歡合作。在寫代碼上如此，在音樂上的合作也已是數不甚數。合作不僅僅能夠帶來技術的交流和傳承，還能激發靈感進而帶來創新和快樂。近代有個爵士樂裡起源的詞用來描述這種音樂合作——&lt;a href=&quot;https://en.wikipedia.org/wiki/Jam_session&quot;&gt;Jam&lt;/a&gt;。這些平台正是順應了人類這一本能。&lt;/p&gt;

&lt;p&gt;然而，人總愛給自己找麻煩，就像在很多年有些人對開源持懷疑態度類似，對於音樂，版權問題仿佛一直是個很頭疼的問題。在 &lt;a href=&quot;https://en.wikipedia.org/wiki/Sean_Parker#Napster&quot;&gt;Sean Parker&lt;/a&gt; 和 &lt;a href=&quot;https://en.wikipedia.org/wiki/Steve_Jobs&quot;&gt;Steve Jobs&lt;/a&gt; 的幫助之下，雖然我們從無到有地實現了消費數字音樂版權，可是卻有一個更深層次的問題被積壓和惡化，就是版權化之後死無生氣的音樂創作領域。一旦再創作被限制，創新也會擱淺。&lt;/p&gt;

&lt;p&gt;而在幕後悄悄解決這個問題的正是 DJ 們，或者更准確地說，早期的電台 DJ 們和之後的 Club DJ 以及地下音樂制作人們&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。唱片公司最開始可是沒給這些 DJ 好日子過，直到後來他們發現凡是被 DJ 放過、改過的曲子都能大賣。從此放松態度，這一路發展到現在，我們經常會發現，原來一些 &lt;a href=&quot;https://en.wikipedia.org/wiki/Remix&quot;&gt;Remix&lt;/a&gt; 反而能給唱片公司帶來更多利益。其實在這一點上音樂行業和電子游戲行業非常像。Chris Dixon
的文章 &lt;a href=&quot;https://medium.com/software-is-eating-the-world/lessons-from-the-pc-video-game-industry-3350bb7713de#.omszygo22&quot;&gt;Lessons from the PC video game industry&lt;/a&gt; 就很好地揭示了遊戲產業的發展模式，同樣也適用於音樂產業。&lt;/p&gt;

&lt;p&gt;在這樣的一個大背景下，這樣的開放式合作平台應運而生。對於普通消費者來說這或許沒什麼直接影響(或許我們應該感恩更好的音樂)，不過對於音樂人來說，應該慶幸自己生在這麼美好的時代。開放給我們帶來過文藝復興和 Linux，有什麼理由讓我不相信開放能給我們更好的音樂呢？&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://amzn.to/1RyUlN8&quot;&gt;Last Night a DJ Saved My Life: The History of the Disc Jockey&lt;/a&gt; by Bill Brewster &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Conan</name></author><summary type="html"></summary></entry><entry><title type="html">Reagent 的 Figwheel REPL 方案</title><link href="https://conanblog.me/blog/2016/03/06/reagent-figwheel-repl-with-nrepl/" rel="alternate" type="text/html" title="Reagent 的 Figwheel REPL 方案" /><published>2016-03-06T11:42:03-05:00</published><updated>2016-03-06T11:42:03-05:00</updated><id>https://conanblog.me/blog/2016/03/06/reagent-figwheel-repl-with-nrepl</id><content type="html" xml:base="https://conanblog.me/blog/2016/03/06/reagent-figwheel-repl-with-nrepl/">&lt;p&gt;剛剛開始了壹個新 side project，這次打算用
&lt;a href=&quot;https://github.com/reagent-project/reagent&quot;&gt;reagent&lt;/a&gt;
做這個項目。我是直接用了 reagent 的默認模板：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lein new reagent myproject
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;開發的時候用 &lt;code class=&quot;highlighter-rouge&quot;&gt;lein figwheel&lt;/code&gt; 運行，當瀏覽器指向默認的開發地址 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3449&lt;/code&gt;
時，Figwheel 的
&lt;a href=&quot;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;/a&gt;
就會出現，然後調試起來簡直不能更爽。不過這個 Figwheel REPL 有個問題，就是不支持歷史回溯，
不像 &lt;a href=&quot;https://github.com/clojure/tools.nrepl&quot;&gt;nREPL&lt;/a&gt;，你不能上下鍵調歷史，更不能 &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;r&lt;/kbd&gt; 搜索歷史。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;這個肯定不能忍啊，經過壹番搗鼓，算摸出個方案。記錄下來以免之後忘了……
其實方案很直白，就是在 nREPL 裏用 Figwheel REPL。
如果是直接用 Figwheel Leiningen 模板的，可以按照
&lt;a href=&quot;https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-within-NRepl&quot;&gt;這份 wiki&lt;/a&gt;
配置壹下。如果是用 reagent 的默認模板，其實這些配置是已經配置好了的。
我也是看了 &lt;code class=&quot;highlighter-rouge&quot;&gt;project.clj&lt;/code&gt; 的配置才意識到的，壹開始還改了半天配置，走了些彎路，直到看到這壹段：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:figwheel {:http-server-root &quot;public&quot;
           :server-port 3449
           :nrepl-port 7002
           :nrepl-middleware [&quot;cemerick.piggieback/wrap-cljs-repl&quot;
                              ]
           :css-dirs [&quot;resources/public/css&quot;]
           :ring-handler khm-clj.handler/app}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有 nREPL 相關的配置，看來是 reagent 已經配置了 nREPL，其實啟動後仔細看 STDOUT 也能看到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Figwheel: Starting nREPL server on port: 7002
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接下來只需要連上 nREPL 就好了。&lt;a href=&quot;https://cursive-ide.com&quot;&gt;Cursive&lt;/a&gt; 的話可以參考
&lt;a href=&quot;https://cursive-ide.com/userguide/repl.html&quot;&gt;這份文檔&lt;/a&gt; 配置遠程 nREPL，
我在文末的動圖裏也會演示。而純命令行的就更簡單了，直接&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lein repl :connect 7002
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;連接成功就已經成功壹半了，最後還剩兩條命令，壹是加載 &lt;code class=&quot;highlighter-rouge&quot;&gt;figwheel-sidecar.repl-api&lt;/code&gt;，
壹是調用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cljs-repl&lt;/code&gt;，調用之後 &lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt; 會被自動從 &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; 換到 &lt;code class=&quot;highlighter-rouge&quot;&gt;cljs.user&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conan@crmbp ~/workspace/khm-clj $ lein repl :connect 7002
Connecting to nREPL at 127.0.0.1:7002
REPL-y 0.3.7, nREPL 0.2.12
Clojure 1.8.0
Java HotSpot(TM) 64-Bit Server VM 1.8.0_65-b17
    Docs: (doc function-name-here)
          (find-doc &quot;part-of-name-here&quot;)
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=&amp;gt; (use 'figwheel-sidecar.repl-api)
nil
user=&amp;gt; (cljs-repl)
Launching ClojureScript REPL for build: app
Figwheel Controls:
          (stop-autobuild)                ;; stops Figwheel autobuilder
          (start-autobuild [id ...])      ;; starts autobuilder focused on optional ids
          (switch-to-build id ...)        ;; switches autobuilder to different build
          (reset-autobuild)               ;; stops, cleans, and starts autobuilder
          (reload-config)                 ;; reloads build config and resets autobuild
          (build-once [id ...])           ;; builds source one time
          (clean-builds [id ..])          ;; deletes compiled cljs target files
          (print-config [id ...])         ;; prints out build configurations
          (fig-status)                    ;; displays current state of system
  Switch REPL build focus:
          :cljs/quit                      ;; allows you to switch REPL to another build
    Docs: (doc function-name-here)
    Exit: Control+C or :cljs/quit
 Results: Stored in vars *1, *2, *3, *e holds last exception object
Prompt will show when Figwheel connects to your application
To quit, type: :cljs/quit
nil
cljs.user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最後我們來測試壹下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/480759/13558112/f083e61a-e3c9-11e5-9556-80eaab79b6a2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天手賤，又忘了保存帖子，於是只能又重寫了壹遍……&lt;/p&gt;</content><author><name>Conan</name></author><summary type="html">剛剛開始了壹個新 side project，這次打算用
reagent
做這個項目。我是直接用了 reagent 的默認模板：</summary></entry></feed>

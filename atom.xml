<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[conan @ notes:~/]]></title>
  <link href="https://conanblog.me/atom.xml" rel="self"/>
  <link href="https://conanblog.me/"/>
  <updated>2016-02-20T16:42:38-05:00</updated>
  <id>https://conanblog.me/</id>
  <author>
    <name><![CDATA[Conan]]></name>
    <email><![CDATA[conanchou1412@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[談民科]]></title>
    <link href="https://conanblog.me/blog/thought/2016/02/20/crank-and-autodidacticism/"/>
    <updated>2016-02-20T11:54:51-05:00</updated>
    <id>https://conanblog.me/blog/thought/2016/02/20/crank-and-autodidacticism</id>
    <content type="html"><![CDATA[<p>近幾年「民科」這個詞的曝光度越來越大，有關的言論也是越來越多。兩件事情讓我最近一段時間一直思考關於「民科」的事兒。一是王垠寫了篇幫 Java 洗白的博客，雖然很多觀點我是讚同的，但依然不敢同意他的種種論調，尤其是他文章中出現了三次民科，而且對其嗤之以鼻。於是我就想起了第二件事，我也曾被一個 PhD 在讀生室友扣過民科的帽子，因為我曾經天真地認為某兩種植物屬於同一科。而今天就在寫這篇文章之前，正巧有個群也聊了相關的話題。所以打算寫下我的一些想法。</p>

<!--more-->

<p>首先要解決我腦子里一直存在的一個困惑：怎麼定義民科？</p>

<p>綜合<a href="https://zh.wikipedia.org/wiki/民间科学家">維基百科</a>和跟朋友們的討論，我覺得民科大致需要符合以下幾個特征：</p>

<ol>
  <li>极少接受过（甚至拒绝）正规科技学习及训练</li>
  <li>理论知识及学术素养匮乏</li>
  <li>热衷于相关领域研究</li>
  <li>製造已經解決某些重大問題的因特網言論，炒作多過學術</li>
</ol>

<p>然而令我困惑的是，我之前提到的王垠和那位 PhD 在讀生也常把民科掛嘴邊，可似乎他們說的民科跟這個定義似乎有些不一樣。似乎他們指的更多的是「那些非科班出身的人，且正好有錯誤或不被他們認同的觀點」。所以這範圍一下就被擴大了，而事實上很多網民也確實在用這種擴大化的定義 。</p>

<p>我的那個例子連我自己都不會用「科學」來形容，純屬猜測，也不怪被人恥笑。而王垠說的這些人牽強地說還是有些符合上面歸納的四點的，我一開始這麼想。可後來覺得這經不起推敲，畢竟計算機科學跟其他自然科學還是有區別，我在舊博客里也寫到過，我稱之為人造科學。所以第一個特征並不符合。而第四點其實也是很主觀的。</p>

<p>今天受到前輩點撥，或許這一群很容易被歸類為「民科」的人應該被歸類到<a href="https://zh.wikipedia.org/wiki/自主學習">「自主學習主義」</a>。這樣的一個群體其實是非常尷尬的群體，因為自己研究研究也就算了，可有了新發現還不能說，說了就會被貼標籤扣帽子。而且這帽子扣得還是因人而異，有些人因為其名望高，所以世人就跪舔，而有些人出生草根就被恥笑。想想 <a href="https://en.wikipedia.org/wiki/Srinivasa_Ramanujan">Srinivasa Ramanujan</a>，我們應當反省自己的言行。你可能會說這也只是特例而已，這種人滿民科界（實指自主學習者）又能找到幾個，那我來說兩個小故事。</p>

<p>第一個是關於海森堡的<a href="https://zh.wikipedia.org/wiki/不确定性原理">不確定原理</a>，有人質疑它的正確性。於是就做了個假想實驗，說假設有這麼個盒子，盒子上有個帶快門的小孔，箱子里有若干光子。再假設這個快門足夠快可以一次只放跑一個光子，$\Delta {t}$ 足夠小，而少了一個光子也可以用理想的秤稱量 $\Delta {m}$，這麼一來那個光子的質量也就是 $m$，再根據質能方程 $E=mc^2$，可以輕鬆得到 $\Delta {E}$。這麼一來海森堡的不確定原理公式 $\Delta {E} \times \Delta {t} &gt; h/2\pi$ 就不成立了。</p>

<p>第二個證明是關於超光速的。還是一個假想實驗，如果假設能製造一根長達一光年的棍子，A和B站在棍子兩端，A用棍子戳B一下，動能的傳遞能在瞬間完成，這就自然實現了超光速。</p>

<p>這倆都有問題你們看出來了嗎？</p>

<p>第一個的話，如何稱量 $\Delta {m}$呢，拿個彈簧秤好了，設置一個零點，然後看箱子位移多少。那假設位移是 $\Delta {q}$，這樣箱子就在引力場里移動了 $\Delta {q}$。但根據廣義相對論的紅移效應，時間的快慢也會相應改變 $\Delta {T}$。再根據公式最後還是能推導出 $\Delta {T} \Delta {E} &gt; h$。這反而再次證明了理論的正確性。</p>

<p>而第二個這個實驗的假設也得重新思考。理想的剛體並不存在，棍子會縣收縮再伸展，動能在棍子內部只能以機械波的速度傳遞，從而低於光速。</p>

<p>這兩個雖然第二個看起來更小兒科一點，但其實其錯誤是很相似的。在今天，可能很多人都會把他們叫做民科。只是剛剛說的第一個故事是發生在1930年第六屆索爾維會議，而這個假想實驗正是著名的<a href="https://en.wikipedia.org/wiki/Bohr–Einstein_debates">愛因斯坦光盒實驗</a>。</p>

<p>忽然我就想起了 Paul Graham 的那篇<a href="http://www.douban.com/note/344097029/">《不能說的話》</a> (<em><a href="http://www.paulgraham.com/say.html">What you can’t say</a></em>)，雖然歷史在一遍遍重演，這幾乎是一種自然規律，但我還是不禁感歎，這樣的現象是多麼可悲的事情。我認為對待言論要動腦思考敞開胸懷，不要傲慢不要偏見，即便是小眾論調也要公平對待，更加不要因為別人的出生或經歷而妄下斷言。對於異議不要動輒就是貼標籤，相反你應該嘗試駁倒對方，更不要因為自己的傲慢與偏見來給別人貼標籤。時不時地逆潮流思考也是有好處的，內省的思辨往往能讓我們保持清醒。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些關於假新聞和標題黨的想法]]></title>
    <link href="https://conanblog.me/blog/china/internet/thought/2016/01/03/we-media-fake-news/"/>
    <updated>2016-01-03T11:03:16-05:00</updated>
    <id>https://conanblog.me/blog/china/internet/thought/2016/01/03/we-media-fake-news</id>
    <content type="html"><![CDATA[<p>最近又有一些自媒體的假新聞被忽然炒熱，比如最近一篇說蘋果收購特斯拉的。不管是愚人節假新聞被挖墳，
還是挖墳、傳播者無腦。假新聞、標題黨這兩年已經泛濫，自媒體更是搞臭了自己的名聲。
表面看，這事兒一半關於內容制造者的人品，另一半關於讀者和傳播者素質，我相信 Fenng 的<a href="http://mp.weixin.qq.com/s?__biz=MjM5ODIyMTE0MA==&amp;mid=401811966&amp;idx=1&amp;sn=76a53dbe421dcba15e923ce79d832eb0&amp;scene=5&amp;srcid=01032MbUPhPM67o8GPanOOSd#rd">這篇文章</a>已經做了很“給力”的討論。</p>

<p>前不久我也在 Twitter 上跟幾個推友討論了相關話題。</p>

<p><img src="https://conanblog.me/images/20160103/twitter.png" alt="為保護推友隱私，已經把推號和頭像遮掉" /></p>

<!--more-->

<p>我這篇推文雖然得到了很多人的贊同，然而我覺得這並不是問題的全貌和根本。那根本是什麼？我覺得是誠信缺失。
你可能覺得這豈不是廢話，可是我想說的不僅僅是造假自媒體和惡意傳播者的誠信缺失，更是社會誠信缺失的問題。</p>

<p>在進入到分析之前我想先分享一下誠信較高的社會裡自媒體是如何生存的。拿 Medium 來說吧，
它是目前運營得最成功的博客平台之一。他們公司也很早就開始想如何犒勞寫手/作家。
按照點擊量付正相關的酬勞似乎合情合理，畢竟他們是互聯網公司，流量和用戶數就能直接和間接
給他們帶來經濟利益。
不過他們第一個槍斃了這個想法，因為這種模式極有可能讓人們忽視真正高質量的文章。
所以是毋庸置疑的情懷牌，當然不光文章質量有情懷，整個網站的 UI/UX 也是處處體現情懷。
這裡就不多說了，感興趣的同學可以自己去仔細體驗。</p>

<p>而發文的那些專業與非專業的作者們對 Medium 的態度呢？大多數人覺得 Medium 是一個提高知名度的平台，
他們用它來 <strong>建立</strong> 自己的公眾形像和聲譽，最終從這些知名度和公眾形像中，他們能獲得一定的經濟利益。
當然 Medium 也會給一些明星作家一定的報酬，而我覺得這也是建立在之前這些明星作家們的 <strong>積累</strong> 之上。
而其它類似的自媒體平台也是大同小異。</p>

<p><span class="pullquote-left" data-pullquote="在誠信較好社會，人們更加講求運營，一種積累的過程。行為和經濟利益之間往往不是直接的關系。">
所以你看，在誠信較好社會，人們更加講求運營，一種積累的過程。行為和經濟利益之間往往不是直接的關系。
注意！（請用老羅的方式念）這一點很重要，因為在誠信較缺失的社會體系裡，
行為和經濟利益之間的關系往往是更直接的。
</span></p>

<p>那再來看看在華人社會比較流行的這些自媒體平台。朋友圈、微博、以及類似 Medium 的平台簡書。
他們有一個共同點。這也多虧了老羅的發布會我才意識到。就是“打賞”這個功能。我並不是不喜歡這個功能，
事實上我自己也做過產品，換我我也會加同樣的功能。
之所以加這個功能，說明產品經理們已經意識到了某種更深層的脈動。順便插一句，
在寫這篇文章做調查時我也發現了一些美國的創業公司試圖給 Medium 添加類似“打賞”的功能，可是最終都
因響應不強烈，不了了之了。</p>

<p>接著說回這個打賞的事兒。華人相對來說不喜歡分享，“自掃門前雪”、“肥水不流外人田”、
“多一事不如少一事”、“槍打出頭鳥”等思想已經深深影響著我們的行為。
而對於大多數中國網民來說，生活雖不到艱難的地步，但也沒有閑到天天有時間寫文章。
尤其是一些中產，有思想有知識，但是沒時間做沒有報酬的“閑事”。
所以產品經理們為了換得更多的質量相對高的內容（從而得到更多用戶和流量），
他們要把“閑事”變成“稍正的事”。</p>

<p>情懷牌在這個時候就不管用了，表面上，作家/寫手要養家糊口、或賺點外快。
實際上，想想之前我說的行為和經濟利益的關系，
在誠信相對缺失的社會，寫作這種行為和經濟利益如果還是間接關系，還有多少人買賬？
必須要直接，而且要赤裸裸地直接，要有視覺和數字的直觀衝擊。</p>

<p>那誠信在這兒起什麼作用？誠信是現金的緩衝帶，越沒有信任就越是要“一手交錢一手交貨”，
越有信任就越可以“賒賬”。可誠信這東西怎麼來呢？靠 <strong>積累</strong>。
人都是社會動物，不可避免地會相互模仿，
當“積累”這種“吃力不討好”的方式在一個社會裡被一些不誠信的“抄近路”的方式打敗時，
人們自然會學習“抄近路”，直到人們發現“抄近路”的弊端大於利益時才會罷休。這不可避免，即便是現在已經
很誠信的社會在早期也面臨過這樣的歷史進程。</p>

<p><span class="pullquote-left" data-pullquote="當在一個社會裡，人與機構要為自己以往的言行負責任時， 人們才會意識到“積累”的重要性，從而才有真正的“運營”。">
要改變這一現狀並非易事，在經濟條件好，更富足的社會，這會簡單一些，畢竟更多人追求情懷。
說這個並沒有什麼意義，因為強國幾乎是共識。而我想說的是用經濟體系引導社會意識。
我覺得馬雲想要建立支付信用體系就是一個很好的開端。其實美國社會很大程度地建立在信用體系之上，
它影響著美國人的行為模式。當在一個社會裡，人與機構要為自己以往的言行負責任時，
人們才會意識到“積累”的重要性，從而才有真正的“運營”。
</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015->2016]]></title>
    <link href="https://conanblog.me/blog/life/thought/2015/12/31/2015-2016/"/>
    <updated>2015-12-31T13:53:55-05:00</updated>
    <id>https://conanblog.me/blog/life/thought/2015/12/31/2015-2016</id>
    <content type="html"><![CDATA[<p><img src="https://conanblog.me/images/20151231/hpny.jpg" alt="" /></p>

<p>又是一年忙忙碌碌，可能光從這兩年的博客發表數量就可以看出來。今年跨年，是該稍微寫一點東西了，
免得以後忘記這兩年都幹了些啥。</p>

<!--more-->

<h2 id="section">工作</h2>

<p>2013 年中，我加入了一家為金融公司做私有雲的創業公司。開始的一年多做得非常開心。
因為做的東西很有挑戰，我到現在還記得加入的第二天就接到了一個獨立任務──寫一個 in-memory
graph database，而且不能太臃腫，因為要放進 OpenVSwitch 交換機里跑。之後幹了半個禮拜，
在我離開這家公司時，這個項目依然還在我們數據中心的每一台交換機里運行著。當然其實後來整個
OpenVSwitch 的軟件框架基本都是我寫的。
這也是那一年半里我每天工作的重心。在這個過程中，我的搭檔──一名網絡工程專家，
以及我的上司──一名總是比我多想一步的實時高頻系統專家，都給予了很多的鼓勵和幫助，
不論是硬技術方面的還是軟技術方面的。之後，有了一些人事方面的變動，我老闆跳槽了，
於是我便慢慢變成了個自由人，我也越來越多地涉及到公司產品的其它部份，
尤其是數據庫和數據中心方面的項目。好的不好的事、物都經歷過，這些都是寶貴的經驗。
在我離開的時候，公司好幾個組的夥伴都來跟我說願做我的推薦人，這就讓我很感動。
這種肯定是為我踐行的最好的禮物。</p>

<p>2015 年中，我決定跳槽了。過去的兩年，我成長了，公司也成長了，它再也不是一家創業公司；然而我還是
喜歡創業公司。一次機緣巧合的機會，我去哥大參加一個清華北美地區校友會組織的座談會（應該是我人生
中最接近清華的一次吧，哈哈），結識了一位同是嘉賓的哥大教授。那會兒他剛剛和他的一個博士學生建立了一
個有學術背景的創業公司。當中略過幾次吃飯聊天，大半年之後我便加入了他的公司。現在我剛剛加入這家
公司一個多月吧，它還跟小嬰兒似的，還有很多待做的事情，從架構到功能，從 UI/UX 到代碼。
當然這一切都得建立在團隊對我的信任上。我相信這只是個時間問題。希望 2016 年我能幫助它成長得更好。</p>

<h2 id="section-1">生活</h2>

<p>2014 年初的時候，我邂逅了她，我現在的妻子。她很美，也比我聰明。在我眼裡她無限接近于完美。
我經常偷樂，沒想到我這德行還能追到這麼好的姑娘。在她的細心照料下，我的生活有了質的飛越，
身上的毛病也少了。我很感謝她，在迷茫的時候她幫我解惑，她的支持給我繼續執行的勇氣，
另外她還容忍我玩電子音樂、夢話說程序語言設計，還耐心聽我嘮叨那些偏門冷知識。
來年我依然會努力照顧好她，不給她惹麻煩 ;)</p>

<p>去年回了一次國，時間上也是匆匆忙忙，并沒有來得及見朋友。父母和祖輩都去看望過。都還好，
只是許久不見，他們都老了。我爸雖然還壯實，但是跟我記憶里的樣子已經不一樣了。
忍不住就想起朱自清的《背影》。想到就心疼和無奈。剛認識我老婆那會兒，她問我可有我爸媽的照片，
我那時才意識到我沒有我爸的照片，這麼多年我腦子里還是那個開車送我上學時的他。我爸還不會視頻聊天，
所以這些年一直都是我打網絡電話給他，可是每次都是匆匆幾句話。近幾年，歲月改變了他，想來開始
掛念孩子家人了，才多了幾通十幾分鐘的電話。最近我媽那邊傳來消息，說是外公快不行了，六七年了，
她一個人照料得了癌症的外公。也是非常不容易。想想要不是你們的辛苦，我哪裡有這般無憂的生活？
希望未來我能常回家看看吧。</p>

<p>對了，我要減肥了，BMI逼近正常和肥胖的那條交界線了。</p>

<h2 id="section-2">學習</h2>

<p><img class="left" src="https://conanblog.me/images/20151231/2016resolution.png" width="200" height="265" title="2016 Resolution" /></p>

<p>這幾年學習倒是沒斷過，工作必須要學的和自己感興趣的。這一點還算欣慰。2015 年初我在 GoodReads
上定下一年 30 本書的挑戰，年末看看自己才差不多完成了一半。不過沒完成挑戰倒沒什麼要緊的，
想想我讀的書畢竟不是暢銷小說，知識密度大多了。
其實左邊這幅圖片的背景就是我今年翻閱過的書籍的一部份。</p>

<p>今年還在 coursera 上上了一些伯克利音樂學院的課，深受啟發。我又看到來年有一些新課，找個時間還是
會再去上一上。</p>

<p>學習方面繼續保持吧。現在唯一覺得時間不太夠用，之後等生活進一步穩定下來應該會有更多時間吧。</p>

<h2 id="section-3">創業</h2>

<p>創業的夢一直在做，想法也一直有，也經常和朋友們分享。再積累幾年，我會再回來的。
今年國內的資本市場也是動盪的一年。一旦錯過一個好窗口，就有可能錯過整片江山。
我曾投資的一家公司就遇到了不小的麻煩。不管怎樣，兄弟繼續加油！</p>

<h2 id="section-4">2015-&gt;2016</h2>

<p>就這樣吧，一篇沒什麼營養的總結，寫在 2015 的最後一天。對來年我也沒什麼高大上的願景，
踏踏實實做好眼前事兒吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ableton Live 9 Automation How-To]]></title>
    <link href="https://conanblog.me/blog/music/mooc/2015/08/30/ableton-live-9-automation-how-to/"/>
    <updated>2015-08-30T15:53:32-04:00</updated>
    <id>https://conanblog.me/blog/music/mooc/2015/08/30/ableton-live-9-automation-how-to</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Hi, I am Conan, a programmer in New York. I taught myself DJing. After awhile I started to look into music theories and DAW (Ableton Live 9 in my case), I wish I can play my own works in parties one day. I think the course <a href="https://www.coursera.org/learn/music-production/home/welcome">Introduction to Music Production</a> is a perfect starting point for music production. I am looking forward to learning from Loudon and you guys and gals. English is not my mother tongue, please bear with me..</p>
</blockquote>

<p>This is the 3rd week assignment. In this one, I am going to demonstrate the automation in Ableton Live 9. Similar to previous tutorial, I will also divide this topic into several sub-topics. The audio track used in the examples is Lion original mix by Dannic. I will only play the first few bars.</p>

<!--more-->

<h2 id="automation-recording">Automation Recording</h2>

<p>Animation recording in Ableton Live is very easy. You just need to remember to enable the <em>Automation Arm</em> button before hit the record button. The following short video shows how to do so.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/K4yK6W0vdOk" frameborder="0" allowfullscreen=""></iframe>

<h2 id="automation-editing">Automation Editing</h2>

<p>In this section I am going to show you how to:
- Basic editing
- use the <em>Draw Mode Switch</em> (aka pencil tool)</p>

<h3 id="general-editing">General Editing</h3>

<ul>
  <li>Create: click the place you want to add a point on the automation line</li>
  <li>Move: drag the point you want move, release at the place you want</li>
  <li>Delete: just click on the point you don’t want</li>
  <li>Curve Automation Line: When mouse close (not over yet) to the automation line, the line will turn to blue color. Hold Option/Alt key and click drag up and down</li>
</ul>

<iframe width="560" height="315" src="https://www.youtube.com/embed/JMPnozZmyxI" frameborder="0" allowfullscreen=""></iframe>

<p>Tip: hold command key and click drag can be helpful if you want to precisely adjust the value of the point. So when doing so, you can only move the point up and down, and the value changing sensitivity will be lower.</p>

<h3 id="pencil-tool">Pencil Tool</h3>

<p>In <em>Clip View</em> pencil tool can be used to draw MIDI and envelopes; in <em>Arrangement View</em> we can use it for automation line editing. By default, the drawing will be very rigid. The edit size depends on the grid size. However if you want to draw freely, you can hold the Option/Alt key and draw. The command key tip also works with pencil tool.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/_2s91azSfXQ" frameborder="0" allowfullscreen=""></iframe>

<h2 id="reflection">Reflection</h2>

<p>After this assignment, I have better understanding of automation, and also have a solid knowledge how should I utilizing Ableton Live automation functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recording MIDI]]></title>
    <link href="https://conanblog.me/blog/music/mooc/2015/08/22/recording-midi/"/>
    <updated>2015-08-22T14:06:50-04:00</updated>
    <id>https://conanblog.me/blog/music/mooc/2015/08/22/recording-midi</id>
    <content type="html"><![CDATA[<p>This post is the week 2 assignment for the course <a href="https://www.coursera.org/learn/music-production/home/welcome">Introduction to Music Production</a>. You can find my introduction and assignment 1 in here: <a href="https://conanblog.me/blog/music/mooc/2015/08/15/visualizing-sound/">Visualizing Sound</a>.</p>

<p>Quote my self introduction:</p>

<blockquote>
  <p>Hi, I am Conan, a programmer in New York. I taught myself DJing. After awhile I started to look into music theories and DAW (Ableton Live 9 in my case), I wish I can play my own works in parties one day. I think the course <a href="https://www.coursera.org/learn/music-production/home/welcome">Introduction to Music Production</a> is a perfect starting point for music production. I am looking forward to learning from Loudon and you guys and gals. English is not my mother tongue, please bear with me..</p>
</blockquote>

<p>This time my topic will be focused on <em>MIDI recording</em>. I would like to use divide and conquer strategy to explain this topic. The following sub-topics will be covered in this tutorial:</p>

<ul>
  <li>Pre-recording preparation:</li>
  <li>Recording</li>
  <li>Basic editing</li>
</ul>

<!--more-->

<h2 id="pre-recording-preparation">Pre-recording preparation</h2>

<h3 id="checklist">Checklist</h3>
<p>First, let’s make sure the project is setup properly. Here is a checklist:</p>

<ul>
  <li>Proper project name and location</li>
  <li>Digital audio preferences</li>
  <li>Recording file type</li>
  <li>Hardware settings</li>
  <li>Buffer size</li>
</ul>

<p>The following video showed how I did the checks.</p>

<iframe width="720" height="450" src="https://www.youtube.com/embed/5CB7wxnI-mc" frameborder="0" allowfullscreen=""></iframe>

<h3 id="prepare-recording">Prepare recording</h3>

<p>As you may noticed, the default template of Ableton Live came with the 2 MIDI tracks and 2 audio tracks created. For demo purpose, I will delete all the MIDI tracks, so we can preparing the track.</p>

<p>In the following video I will show you how to:</p>

<ul>
  <li>preparing the track</li>
  <li>adding the instrument</li>
  <li>config the click and countoff</li>
</ul>

<iframe width="720" height="450" src="https://www.youtube.com/embed/TXAVZSsZ8f0" frameborder="0" allowfullscreen=""></iframe>

<h2 id="recording">Recording</h2>

<p>Now we are ready to record some notes. Since I am bad at playing any instrument, let me also enable <em>metronome</em> to help me in beat:</p>

<iframe width="720" height="450" src="https://www.youtube.com/embed/qN-s08UWcCE" frameborder="0" allowfullscreen=""></iframe>

<h2 id="basic-editing">Basic editing</h2>

<p>In the final part, I will demonstrate how to:</p>

<ul>
  <li>modify notes length</li>
  <li>change grid setting</li>
  <li>quantize</li>
  <li>modify velocity</li>
</ul>

<iframe width="720" height="450" src="https://www.youtube.com/embed/QtosZgB72Y4" frameborder="0" allowfullscreen=""></iframe>

<h2 id="reflection">Reflection</h2>

<p>In the progress, I figured out how to config my MIDI device and DAW. And this time, I finally correctly using quantization. The process also helped me to know better the editing tool in the DAW.</p>

<p>Thank you for your time and feedback :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualizing Sound]]></title>
    <link href="https://conanblog.me/blog/music/mooc/2015/08/15/visualizing-sound/"/>
    <updated>2015-08-15T23:18:33-04:00</updated>
    <id>https://conanblog.me/blog/music/mooc/2015/08/15/visualizing-sound</id>
    <content type="html"><![CDATA[<p><img src="https://conanblog.me/images/20150815/wave-cover.jpg" alt="" /></p>

<p>Hi, I am Conan, a programmer in New York. I taught myself DJing. After awhile I started to look into music theories and DAW (Ableton Live 9 in my case), I wish I can play my own works in parties one day. I think the course <a href="https://www.coursera.org/learn/music-production/home/welcome">Introduction to Music Production</a> is a perfect starting point for music production. I am looking forward to learning from Loudon and you guys and gals. English is not my mother tongue, please bear with me..</p>

<p>This blog is for the week 1 lectures assignment. I would not consider this as teaching, this one will be more like a reviewing and reflecting.</p>

<!--more-->

<h2 id="study">Study</h2>

<h3 id="why">Why</h3>

<p>Let us start with why. Why do we need sound visualization? I think the point of sound visualization is to make vague problem clear. Sound has many aspects, in the first few lectures, we have learnt three essentials of them: <em>propagation</em>, <em>amplitude</em>, and <em>frequancy</em>. I didn’t include <em>timbre</em> here is because that timbre is a combination of different frequencies, it doesn’t sound like a essential to me. Another implicit essential about sound is time, I have to mention it because it will be one axis in some of our diagrams. When we are looking at a problem, we want to <strong>easily grasp the global overview, and at the meanwhile maintain the precision</strong>. Luckily that mathematician and physicist has already built some handy tools (in here I considered a data representation methodology as a tool, but not a specific software).</p>

<p>A good case study would be DJing. When you are performing, we want to get the overview of the track, <strong>quickly</strong>. You can of course hearing/scanning the next track with your headphone, but it is just not good enough and quick enough. I personally rely on the waveform display a lot. The following screenshot is from Serato DJ’s waveform section.</p>

<p><img src="https://conanblog.me/images/20150815/waveform.png" alt="Serato DJ Waveform" /></p>

<p>From the waveforms’ shape, I can tell:</p>

<ul>
  <li>where are the kicks, hi-hats, and vocals</li>
  <li>section of the track</li>
</ul>

<p>From the color of the waveforms, I can tell how the EQ changes cross the track. Quote from the Serato site:</p>

<blockquote>
  <p>The EQ Colored waveform option changes the waveform colors in Serato DJ to reflect your EQ changes. For example, taking out the bass will remove all the red from the waveform, taking out the high end will remove all the blue and taking the midrange out will remove all the green.</p>
</blockquote>

<h3 id="what">What</h3>

<p>What are these tools as in diagrams? The first is <em>Oscilloscope</em>. It is only showing two aspects of sound: amplitude (Y axis) and time (X axis). The larger the range of Y axis, the higher the amplitude. For the time axis, the time window usually will be few millisecond in our case.</p>

<p>Frequency is also in the diagram, it is just implicit. The following animation is from <a href="https://en.wikipedia.org/wiki/Oscilloscope">Oscilloscope wikipedia page</a>. You can see that within the same period of time, the more dense the waveform, the frequency is higher.</p>

<p><img src="https://conanblog.me/images/20150815/CROtperdivisionincrease.gif" alt="" /></p>

<hr />

<p>The next is <em>spectrum</em> analyzer. In the oscilloscope diagram, we can only observe relative frequency change, it cannot describe the frequency aspect accurately. We use spectrum analyzer for this. This time, the X axis is frequency and the Y axis is the amplitude. Remember Loudon mentioned that when people talking about 1K, 2K, 5K, we should have some idea on mapping these numbers to our hearing? I actually did try to feel the numbers. What I did is playing note using a Sin synth, which is also hooked to a spectrum analyzer. Here is what I found:</p>

<p><img src="https://conanblog.me/images/20150815/1k.png" alt="1K" /></p>

<p><img src="https://conanblog.me/images/20150815/2k.png" alt="2K" /></p>

<p><img src="https://conanblog.me/images/20150815/5k.png" alt="5K" /></p>

<p>So what is middle c (C4) frequency?</p>

<p><img src="https://conanblog.me/images/20150815/midc.png" alt="Middle C" /></p>

<hr />

<p>The last one is <em>Sonogram</em>. The <em>spectrum</em> diagram is like a snapshot of the sound in that moment. We could not tell the changes over time. We use sonogram to see these dynamics. In sonogram, the X axis is the time, and the Y axis is the frequency. The third dimension is amplitude, which is represented by color.</p>

<hr />

<h2 id="reflection">Reflection</h2>

<p>Before the course, I never actually pay much attention on the waveforms. until after then, I realized I actually rely on waveforms or sound visualization a lot. In the post, I not only reviewed the things we have learnt, but also spent some time to explain my use case as a case study. To do that, I actually need to dig into the Serato DJ software manual. Just want to make sure the information I have provided is accurate. I have also tested the spectrum in my DAW. A lot of things are just making more sense now.</p>

<p>That is about it. <strong>Thank you for your reading, and you are welcome to leave feedback and criticize</strong>.</p>

<h2 id="extra">Extra</h2>

<p>While I am searching around about sound visualization, I found an amazing video clip:</p>

<iframe src="https://player.vimeo.com/video/111593305" width="720" height="307" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="https://vimeo.com/111593305">CYMATICS: Science Vs. Music - Nigel Stanford</a> from <a href="https://vimeo.com/user1852409">Nigel Stanford</a> on <a href="https://vimeo.com">Vimeo</a>.</p>

<p>With the knowledge of the first 4 lectures and basic physics, we should be able to reveal the secrets in this video.</p>

<p>Here are the hints: vibration, longitudinal wave, camera ;)</p>

<p><small>Cover image copyright by Daniel Palacios</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不是格子人生]]></title>
    <link href="https://conanblog.me/blog/life/thought/2015/07/20/to-do-or-not-to-do/"/>
    <updated>2015-07-20T12:08:48-04:00</updated>
    <id>https://conanblog.me/blog/life/thought/2015/07/20/to-do-or-not-to-do</id>
    <content type="html"><![CDATA[<p><img src="https://conanblog.me/images/20150720/zen.jpeg" alt="" /></p>

<p>距離上次的更新又是很久了。這個一年多來換了三處地方住，各種各樣的事情接踵而至，工作也從一個項目
變成了四個項目。說真的一直扛著重壓走了很久。不過好就好在，我遇到了我的女朋友。事情沒有太糟糕。</p>

<p><a href="https://conanblog.me/blog/life/hack/productivity/2014/09/01/900-months/">之前的一次更新</a>
我寫了一些關於 GTD 的想法，以及一個私人的項目。隨著時間的推移，我是一直在努力讓自己跟上時間的步伐，
然而事情並沒有非常順利。經過很長時間的努力但如果還是不見成效的話，往往說明了也許我們看/解決問題的
方法有問題。於是就有了這篇隨想/分享。</p>

<!--more-->

<p>讓我決定寫下我的想法的其實是 Jeff Atwood 的 <a href="http://blog.codinghorror.com/todont/"><em>Todon’t</em></a>，
我在讀他的博客文集
<a href="http://www.amazon.com/How-Stop-Sucking-Awesome-Instead-ebook/dp/B00BU3KPQU"><em>How to Stop Sucking and Be Awesome Instead</em></a>
的時候遇到了這篇文章。（題外話，這本書並沒有書名顯得那麽沒營養，其實是很有料的一本書。）</p>

<p>請允許我引用文中的一句話，因為它同樣也是我心中的聲音：</p>

<blockquote>
  <p>If you can’t wake up every day and, using your 100% original equipment God-given organic brain, come up with the three most important things you need to do that day – then you should seriously work on fixing that.</p>
</blockquote>

<p>可能跟大多數使用 GTD 工具的人一樣，我有一個鼠標滾輪滾好多下都不見底的 TODO list。它讓罪惡感在我心裏
慢慢堆積，進而升級變成了壓力。當然這只是加之我身的一部份壓力的具象化。在我之後要提到的一本書里就提到，
我們的壓力來自多方面，比較常見的有：</p>

<ul>
  <li>Traffic stress</li>
  <li>Getting angry</li>
  <li>Interpersonal conflicts</li>
  <li>Frustration over failed weight loss efforts</li>
  <li>Financial stress</li>
  <li>Being overwhelmed with too much to do</li>
  <li>Having regrets</li>
  <li>Discrimination</li>
</ul>

<p>我比對了一下，只能默默在每一項前面打勾……
我一開始覺得可能用一個 TODO list 來記錄並優先排序，然後按照自己的時間
安排來處理這些事務是可以解決這些事情的。可事實告訴我：然並卵。這個“系統”看似完美，可是就跟安全界的
一句名言說得一樣：</p>

<blockquote>
  <p>任何系統里，人總是軟肋</p>
</blockquote>

<p>在這種 TODO 系統裏也是一樣。我成了系統的瓶頸。我有自動腳本幫我篩選新聞、
放進我的 Pocket 服務、並在 TODO 裏創建新項目；我也用 IFTTT 將很多東西自動化。
可是這些最終只是將我的 TODO list 加長。而我只能慢慢地一個一個完成。</p>

<p>在重壓下，我得尋找出路，於是找到了這本書 <a href="http://www.amazon.com/The-Myth-Stress-Happier-Healthier/dp/1439159459"><em>The Myth of Stress</em></a>。
或許在讀書之前我就這麽想，但是似乎在讀完之後我更加篤定：</p>

<blockquote>
  <p>我們承受如此大的壓力，根源並不是這個世界變得糟糕了，真正需要改變的是我們自己</p>
</blockquote>

<p>其實就跟我在大學期間對待考試一樣的態度——平常心。只是進入工作，面對異鄉人的特殊身份、財政、感情、
工作、創業、學習、雜務，我漸漸忘記當年的口頭禪“平常心”。之前我也曾讀到一篇很有意思的文章，表面看起來是說
如何準備自殺，其實是勸好好面對人生的。當中作者就指出一個很關鍵的點：人在面臨大災難的時候往往非常
堅強，反倒是那些瑣事會讓人萌生自殺的念頭。</p>

<p>這才回到了我開頭所引用的觀點，平常心對待日常事務，不要再給自己什麽 TODO List 了。錯過一個事務
也不會怎樣，真正關鍵的、非做不可的事情肯定不會錯過。不管是以哪種方式“不錯過”，要麽是重要到你忘不了
的事情，要麽是有第二次、第三次機會的事。</p>

<p>其實在 <em>The Myth of Stress</em> 和另一本有關壓力的書 <a href="http://www.amazon.com/The-Upside-Stress-Why-Good/dp/1583335617"><em>The Upside of Stress</em></a> 里，
都提到了一個不容忽視的一點：壓力不可避免，適當的壓力能讓你做得更好。</p>

<p>所以經過一段時間的思考和沉澱，我廢除了 GTD 以及相關的 GTD 項目，只用大腦記錄要務。因為工作後雜務太多，
學習變成了一件困難的事情，所以仍然需要對學習給予一定的壓力，比如我給自己設定一個今年閱讀 30 本書的目標。</p>

<p>900 個月的人生，轉瞬即逝，我們為何要選擇不愉快的方式去度過呢？別給自己畫上格子，這不是格子人生。</p>

<p><small>說明：封面圖片我也不知道版權屬誰，是從這裡拿到的：<a href="https://theabysmal.wordpress.com/tag/zen-mind-beginners-mind/">the Abysmal Centre</a>。
暫時先用了，如有問題請聯繫我，我會徹下。</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[格子人生]]></title>
    <link href="https://conanblog.me/blog/life/hack/productivity/2014/09/01/900-months/"/>
    <updated>2014-09-01T00:18:33-04:00</updated>
    <id>https://conanblog.me/blog/life/hack/productivity/2014/09/01/900-months</id>
    <content type="html"><![CDATA[<p>很久未更新日誌了，真是忙碌的一年。具體的更新就不寫在這一篇里了，長話短說是：我很好。</p>

<p>長久以來，我就有病，很多病，強迫症是之一，尤其對於時間管理。在聽說「人生只有900個月，一張A4紙就能打印出來」之後，病得更重了。所以我一直尋求一些方法去靈活地、有效地規劃（Hack）自己的人生，讓更多有意思的事情發生在這30＊30的表格里。<!--more-->曾經做了一個僅供自己使用的時間跟蹤系統來分析自己的時間都花到哪裡了，由於代碼寫得很hacky，使用也太geeky（其實我就是懶得寫文檔），就沒有開源。如果有興趣的朋友可以去試試<a href="https://www.rescuetime.com/">「RescueTime」</a>，我是受到它的啟發做的，當然我做的就比較粗陋，功能性上比它多了一個強制加鎖，即，在一段時限內不能訪問黑名單內的網站。這是幾年前的故事。</p>

<p>之後的幾年，我接觸到了一些提高效率的「方法論」，當中包括 David Allen 的
<a href="http://en.wikipedia.org/wiki/Getting_Things_Done">「GTD」</a>，以及Francesco Cirillo
的<a href="http://en.wikipedia.org/wiki/Pomodoro_Technique">「番茄時間法」</a>，當然還有一些未成大氣候的方法論，比如<a href="http://en.wikipedia.org/wiki/Gamification">「Gamification」</a>。也對他們進行了嘗試和研究。可是我並不是很喜歡當中的任何一個。</p>

<p>於是，我終於啟動了一個想了很久卻沒動作的項目，暫時定名為「OrgLife」，這個項目并不簡單，因為不僅僅是寫寫程序而已，我想要研究出一個對我來說切實可行的方法。而且即便是寫寫程序而已，我還要學好多東西才能做個稍微像樣點、不擋道的工具，我可不想再做個很buggy的工具湊合用，畢竟在用工具提高效率的時候，如果工具不好使降低了效率會讓人很沮喪。在這裡，我特指要學前端開發。雖然大學時代創業時包攬過從前端到後端的活兒，但前端是個非常活躍、日新月異的技術集，三四年沒碰的話就已經是老化的知識了……</p>

<p>剛剛我強調了我要找個對我管用的辦法，因為我不知道這個方法是否普世，但是有我這個時間管理強迫症的人還挺多的，昨天在看 Hacker News
的時候看到一個要做<a href="https://www.kickstarter.com/projects/1751759988/sicp-distilled">「SICP Distilled」</a>的小夥子，也是個 LISP
Hacker，去他博客一逛，發現他也跟我一樣，試圖在做一些 life hacking
projects。所以或許，這個所謂的工具也好，方法也好，能夠讓一部份人先「富起來」：）</p>

<p>我預感這個項目會是一個戰線比較長的戰鬥，所以在完成 OrgLife
的第一稿之前我得有一些替代品來做輔助。於是這才是今天這一篇帖子的主題：一個暫時的關於時間管理的解決方案，或許適用于大部份病得還沒那麼重的「病友」。</p>

<h2 id="section">缺失的一環</h2>

<p>GTD 是目前時間管理最成體系的一個，建議對它不了解的病友先去做一些了解。它很靠譜，，，直到最後的執行這一環。老牌黑客 Kevin Mitnic
曾經說過，人是一個系統里最薄弱的構件。這話一點不錯，人是複雜的、不可預測的、存在很多弱點的。放在現在的語境里，我們就算完全按照 GTD
的理論走，最後不執行，還是白搭。這就是我說的「缺失的一環」，也就是一個能提高人的執行力的一種輔助。</p>

<p>很巧的是番茄時間法能比較好地促進人們執行，因為人們在掐表的情況下更傾向於全神貫注、在假想的deadline前把事情做好。這其實是個很簡單有效的hack，對我還蠻有效。於是我現在的工作流程是把這兩種方法有機結合了，即，在
GTD 最後加上番茄時間；或者也可以說把番茄時間法的 TODO 管理換成了
GTD。這樣一來，我就有了一個「管用」的體系。但是這還不夠好，先賣個關子，這裡就不分析了。</p>

<h2 id="section-1">增強靈活性</h2>

<p>「Context」，或者說環境，是 GTD
里一個重要的概念，它主要是幫助你在不一樣的環境下快速找到你要做的事情。這個所謂的環境實在是一個不太好掌控的東西，因為它的定義範疇太廣了。我的建議是不要太具體，但也不要太抽象。這兩個極端會發生同樣的事情，就是你最終放棄使用
GTD。如果太具體，管理成本就會變高，你的 GTD
會變得越來越難管理，最終只能放棄；如果太抽象，這個功能等於沒有用到，因為使用成本變高。所以怎麼才算適中？這個真的因人而異。我覺得事務比較少的人相比事務多的人來說，可以稍微抽象一些。這兩個極端都是有很明顯的特徵的，如果太抽象，那你的事務列表就會很長；如果太具體，那你的很多環境分類很少被用到。用面向對象的語言寫程序的同學，這是不是很似曾相識啊？</p>

<p>下面我用我自己目前的配置舉個例子：</p>

<p><img src="https://9qbqfg.dm2303.livefilestore.com/y2p_JUt7QwduLf34NdX7GOgEmHKdRafbVYPzVBWrUsJ46nTLaNgpz9url_QM48-R8RJGxp2f4nexqW6VLzHyfkP_wVORNMyE4g1suETTYQFU4Q/Screen%20Shot%202014-08-30%20at%2010.04.28%20PM.png?psid=1" alt="" /></p>

<p>這個界面是一款完全照搬 GTD 流程的軟件，叫OmniFocus
2。它並不是唯一的選擇，只是碰巧在我寫這篇博客的時候我正在調研這款軟件。你們也看到了，它的試用期快結束了，結束了之後，我還會繼續調研
<a href="http://orgmode.org/">org-mode</a>，以及類似 <a href="https://trello.com/">Trello</a> 的其他可選方案。</p>

<p>對這些 Contexts 做一些解釋：</p>

<ul>
  <li>Errands：一些生活不得不做的瑣事，比如買菜、倒垃圾、整理房間之類的</li>
  <li>Working：工作相關
    <ul>
      <li>Office：在辦公室要做的事情</li>
      <li>Low Energy：不太想幹事的時候可以做做的事情，一般是不太費腦的無聊的活兒</li>
      <li>Waiting：在 OmniFocus 里，Context 可以設置為 Waiting 狀態，可是這個狀態下的 context
  用戶就看不到了，意思就是「這事兒不關我，等著吧」我不喜歡這個狀態，太被動了，所以我單獨另闢了一個 Waiting，卻使用跟其它 context
  一樣的狀態。這樣我就能看到正在等的工作條目，並且可以在實時的時候催一催進度。</li>
      <li>Off Duty：離開辦公室時或回家路上要做的事情</li>
    </ul>
  </li>
  <li>Learning：學習相關
    <ul>
      <li>Reading：閱讀已成為我的習慣，但是有時我缺乏專注力，經常是一本書還沒讀完就開動了第二本第三本第四本，兩個禮拜之後又拿起了第一本接著看，這樣做其實倒也沒太多弊端，就是如果忘記前文還得翻到前面複習
  目前為止我還不知道這是好是壞，因為複習可以加深記憶和理解，算是因機制而引起的反芻，是個副產品。所以這個 context
  里我主要是放兩類事務：
        <ul>
          <li>書籍閱讀進度跟蹤，這些一般都是自動循環的，比如每週前幾天是看第一本，后幾天是看另一本。這麼做同時也可以讓自己有個節制，不要太貪心，一下子開太多本……</li>
          <li>每週積累下來的時事閱讀，一般這一類都是這一週內從各個渠道搜刮到的值得閱讀的文章。用 <a href="https://ifttt.com">IFTTT</a> 和
  <a href="http://getpocket.com">Pocket</a> 自動化這個收集環節。</li>
        </ul>
      </li>
      <li>Hands Dirty：不動手肯定學不好東西，所有需要動手動腦的學習任務在這裡</li>
    </ul>
  </li>
  <li>Family：家庭相關，有跟多是跟上面的雷同的，我就不再贅述了，說說不一樣的
    <ul>
      <li>Reviewing
  Finances：我會邀請我的女朋友或家人也來參加，一般是一月一次，裡面是記錄了一些需要在檢查財政時要做的事情。</li>
      <li>Rushing Out：跟上面的「Off Duty」很像，只不過是說要出門前或出門之後在路上要做的事情</li>
    </ul>
  </li>
  <li>Anytime：不受限制，任何時間都可以做的事情</li>
</ul>

<p>適當地抽象化環境分類，可以一定程度上增強 GTD
的靈活性；交叉分類和多分類是我要說的「更進一步」，可惜目前我在調研的這個工具不支持一個事務多個分類（或者是 tag
系統）。而幾年前我摸過 org-mode，它支持 tag 系統，加上最近在寫 Clojure 和 CloJureScript，正好趁此機會撿起 Emacs 吧，Vim
我已經用了足夠久了，以至於現在沒她不行。而<a href="https://github.com/ConanChou/ConanVimrc">她的配置</a>也是我目前為止維護得最久的一個開源項目（用
Eric Steven Raymond 「大教堂和市集」里提到的理論能很好地解釋為嘛我還在一直維護，因為維護者就是使用者）。雖然我也知道有 org-mode 的
Vim 移植，但是開放的心態總沒有錯 ；）</p>

<h2 id="section-2">主次要分明</h2>

<p>我要說的概念是「優先級」，這個概念在 GTD
以及相關輔助工具里是垂直的。在單獨的項目里有優先級，但是并沒有一個橫向的優先級概念，即，項目和項目之間是平等的關係。然而這顯然是不合常理的。所以我提出的另一個修正就是項目優先級。看圖：</p>

<p><img src="https://9qbqfg.dm2303.livefilestore.com/y2pgI7vWgC8V3yoRPlMarjLCmn4lu8i_jnUZbbOm0tIFqXW7yBXeoMnAbImPigzPl8ZpDVuk88VbzO7BGWfmyDWFWgw2pZJ0OGrt3NI0jmNwc8/Screen%20Shot%202014-08-30%20at%2010.03.46%20PM.png?psid=1" alt="" /></p>

<p>上圖看上去沒什麼特別的，但是它們其實是按優先級從高到低排列的（請忽視第一個 Clojure，它本應該在 Learn and Share
里躺著的，但是截屏的時候沒注意到）。每個人的優先級可能都不太一樣，但是目前來說，我的是這樣。其中可能比較有爭議的是「Help
Others」，居然倒數第二？是的，因為我覺得幫助別人的前提條件是顧好自己，就好像在飛機上氧氣罩落下時，你應該先戴好自己的面罩再幫助你身邊的小朋友。為什麼？因為我很難想像我自己的生活工作學習在一團糟的情況下還能好好幫助別人。小時候有很多歌頌黨員幹部的影視作品，他們很多人最終是身體垮了。在我看來一方面他們的精神可貴（宣（xǐ）傳（nǎo）部的工作很到位），另一方面他們因為自己在優先級上的不理智而縮短了「為人民服務」的時間，進而減少了好官在中國黨員中的比例。這是個悲傷的故事。</p>

<h2 id="section-3">一些小竅門</h2>

<h3 id="review">不小視 Review</h3>

<p>Review 這個環節是 GTD
里很重要但是又常常被人忽視的。因為人們覺得事情做好了就結束了，我一開始也這麼覺得。後來在軟件提醒之下做了一次
review，才發現一堆漏網之魚，一些沒有加截止日期和 context 的事務。Review 其實跟處理 inbox 是一個工作模式，只是一個在 Done
之前，一個在 Done 之後。謝耳朵說自己從來不忘記東西，我們也可以，只要你 review。</p>

<h3 id="section-4">儘量自動化</h3>

<p>使用這些工具也好，方法也好，都是有額外時間和處理開銷的。（誒！學計算機科學的病友，這個是不是又似曾相識？）我稱之為管理成本，為了儘量減小管理成本，我們應該更多地使用自動化工具，比如此前提到過的
IFTTT，還有就是各種腳本。在使用 OmniFocus 階段，我嘗試寫了幾個 AppleScript 自動腳本，感受是真tm糟糕。這也是我看向 Emacs org-mode
的另一個原因。</p>

<h3 id="section-5">遞歸式批處理複雜事務</h3>

<p>GTD
的一個「遊戲規則」是必須把事務拆分成可執行的小事務，這麼做很有道理，比方說如果有一個事務叫做「寫一個操作系統」，估計很少人在900個月的時間里能夠完成這個任務；但是如果你把它拆分成細小的組成部份，比方說「寫一個引導程序」，這就可執行得多。但是拆分並不總是那麼簡單。我的方法是遞歸式＋批處理。在番茄時間里遇到複雜的事務時就把它分成較細的事務，并扔進
inbox，然後繼續其它的事務。在下一個循環時，在處理較細的事務，以此類推直到把任務做完。這麼做其實是有一定的原因的。因為其實人跟單核計算機差不多，頻繁切換工作內容會降低效率，那些自稱能高效multitask的基本都扯淡＋裝逼。所以我就把處理大數據的軟件架構設計搬了進來，即
map+reduce。這裡就點到為止吧……</p>

<h2 id="section-6">結語</h2>

<p>就先分享到這兒，感覺是還有些東西忘了提，之前本想做個腦圖的，懶了。以後想到了再補充吧，洗洗睡了。希望對病友們有幫助。</p>

<p>另外，如果有病友對 OrgLife 感興趣，請跟我聯繫 ；）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蟒之惰性]]></title>
    <link href="https://conanblog.me/blog/python/2013/06/10/laziness-in-python/"/>
    <updated>2013-06-10T18:06:00-04:00</updated>
    <id>https://conanblog.me/blog/python/2013/06/10/laziness-in-python</id>
    <content type="html"><![CDATA[<p><a href="https://conanblog.me/blog/thought/2013/06/09/just-in-case-vs-just-in-time/">上一篇日誌</a>其實是發生在我研究了一些 lazy evaluation 之後，有感而發；最初我本來只是想寫現在的這篇博客的，聊一聊 Python 的惰性。如果對編程語言以及編程思想的惰性的定義還不明的話，可以參看我的上篇日誌以及 Wikipedia。</p>

<p>Python本身是具有惰性的，我在<a href="https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips/">《Python 調優筆記 · 經驗主義調優》</a>的「懶惰&gt;勤勞」小節就已經說了一些。我們接下來要看看Python中更高級一點的惰性用法。<!--more--></p>

<h1 id="generator">Generator</h1>

<p>我不知道是不是應該給這個專有名詞硬塞上一個中文翻譯，但如果需要的話，我覺得叫生產器吧。它就像是個手動絞肉機，需要肉末的時候就搖一下，不需要了也就停在剛剛的狀態。假設我們現在有個 function，它的作用是輸出0到9999之間的數被幾個不明操作之後的數的列表。那我們有可能這樣寫：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">range10000</span><span class="p">():</span>
</span><span class="line">    <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
</span><span class="line">        <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">i</span><span class="p">)))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">l</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>邏輯上來說這個程序沒什麼問題，但是不是可以做得更好呢？可以用 lambda 和 list comprehension 來一行代碼解決，這麼做好在哪裏呢？技術上來說 list comprehension 的效率比顯式循環體高，從逼格角度說更接近函數式編程。那能不能做得更好一些呢？假設之後的代碼中只需要<code>range10000()</code>生產出的list的前十個。也就是說後面的9980個運算是浪費資源的。即便<code>f1()</code>和<code>f2()</code>的複雜度都是O(1)，這也是莫大的浪費。要是能夠推遲<code>range10000()</code>的運算就好了。所以這裏我們就可以使用惰性求值的小技巧，具體來說，我們將用到關鍵詞<code>yield</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">lazy_range10000</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">):</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>之後的調用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">lazy_range10000</span><span class="p">()</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">lazy_gen</span> <span class="n">at</span> <span class="mh">0x7f2e47ba43c0</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>從這個簡單的例子我們可以看出<code>yield</code>在此起到的作用是返回一個 Generator 對象，而這個對象會記住自己的狀態，在這個例子裏就是循環體循環的次數。每次調用<code>next()</code>時，才會做真正的計算。換句話說，這個技巧是推遲了計算的執行，即惰性求值。這麼一來，不但不會浪費CPU計算資源，也不會因爲要存儲額外數據而造成的內存空間的浪費。第一個例子主要還是體現了在CPU資源上的節約，下面我們再舉一個更加極端的例子來感受一下，生成無限多的連續數：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">infinitely_inc</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="n">n</span> <span class="o">=</span> <span class="n">start</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>對 Python 內建函數比較瞭解的同學應該是注意到了 Generator 對象的 <code>next()</code>，它跟 iterator 類型是一樣的，遵從 <em>Iterator protocol</em>，即有<code>next()</code>和<code>__iter__()</code>函數，會拋<code>StopIteration</code>異常。而且，跟list一樣，它也有類似list comprehension 的寫法，區別僅在於把list comprehension 的<code>[]</code>換成<code>()</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span> <span class="c"># list</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;list&#39;</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">gen_squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c"># Generator 對象</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">gen_squares</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;generator&#39;</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="nb">iter</span><span class="p">(</span><span class="n">gen_squares</span><span class="p">)</span> <span class="ow">is</span> <span class="n">gen_squares</span>
</span><span class="line"><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Generator 看起來是個好物，但是它也有自己的使用注意事項，這裏我主要說一說除了惰性求值共性問題（見<a href="https://conanblog.me/blog/thought/2013/06/09/just-in-case-vs-just-in-time/">上一篇日誌</a>）之外的注意事項。</p>

<p>第一點非常淺顯易懂，Generator 產生的序列只能使用一次，也就是說，如果生成的序列需要多次使用的話，還是選擇<code>list</code>。不要硬用 Generator，強扭的瓜不甜，你懂的。</p>

<p>第二點比較 tricky。就是要注意變量的作用域。下面我直接上一段代碼，想一下輸出結果是什麼：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="n">x</span>
</span><span class="line"><span class="k">def</span> <span class="nf">gen</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">i</span>
</span><span class="line"><span class="n">base</span> <span class="o">=</span> <span class="n">gen</span><span class="p">()</span>
</span><span class="line"><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class="line"><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class="line">    <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">base</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>猜<code>[11, 12, 13, 14]</code>的同學，恭喜你們成功跳進了陷阱。上面代碼的運行結果是<code>[20, 21, 22,
23]</code>。不信貼到自己的環境裏跑跑看。爲什麼呢？<code>numbers</code>裏的<code>1</code>壓根不見了？其實是因爲直到最後一句<code>list(base)</code>的時候運算才被出發，而此時本地變量<code>n</code>已經循環到了最後一個，即<code>10</code>。又因爲有兩個數字要加，就變成了把10加了兩遍。理解這個過程的難點在於，要時刻提醒自己惰性求值發生的時間點在哪裏，以及它所記住的狀態（或變量）都包含哪些。下面爲了方便理解，我貼一個本程序跑的時候在內存裏的慢動作，還沒弄明白的同學可以一步一步看：</p>

<iframe width="960" height="600" frameborder="0" src="http://pythontutor.com/iframe-embed.html#code=def+add(s,+x)%3A%0A++++return+s+%2B+x%0A%0Adef+gen()%3A%0A++++for+i+in+range(4)%3A%0A++++++++yield+i%0A++++++++%0Abase+%3D+gen()%0Anumbers+%3D+%5B1,+10%5D%0Afor+n+in+numbers%3A%0A++++base+%3D+(add(i,+n)+for+i+in+base)%0Aprint+list(base)&amp;cumulative=false&amp;heapPrimitives=false&amp;drawParentPointers=false&amp;textReferences=false&amp;showOnlyOutputs=false&amp;py=2&amp;curInstr=0"> </iframe>

<p>Generator 惰性求值玩脫了怎麼破？其實原理上來說很簡單，上面的問題就是因爲我們希望 Generator 記住的東西沒記住，那我們只要讓它記住不就完了？所以我們可以給<code>add()</code>寫個 wrapper，把要傳進去的<code>x</code>的狀態記住：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="n">x</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">gen</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">i</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">add_wrapper</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">base</span><span class="p">:</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">i</span> <span class="o">+</span> <span class="n">num</span>
</span><span class="line">
</span><span class="line"><span class="n">base</span> <span class="o">=</span> <span class="n">gen</span><span class="p">()</span>
</span><span class="line"><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class="line"><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class="line">    <span class="n">base</span> <span class="o">=</span> <span class="n">add_wrapper</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="nb">list</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上便是如何用 Generator 來寫內存高效的代碼的簡介。僅僅是一窺，有興趣的同學可以去多搜一搜相關詞條以及翻閱《Core Python Programming》的相關章節。帶着對惰性求值的初步瞭解，我們接着將看一看 Python 給我們準備了什麼樣的語法糖做禮物。</p>

<h1 id="itertools"><code>itertools</code></h1>

<p>這是一個<a href="http://docs.python.org/2/library/itertools.html">Python 模塊</a>，它的出現是受啓發於 APL，Haskell 和 SML 這些在函數式編程世界中有深遠意義的語言。Laziness 自然也被傳承下來。我們不妨先通過一些簡單的例子來對比一下普通和惰性兩種方法，以及<code>itertools</code>的用法。更多更詳細的資料還請看官方文檔。</p>

<p>假設我們現在要找到100以內前10個可以被3整除或可以被7整除的數。普通版我們可能會這麼做：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">my_filter</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">print</span> <span class="s">&#39;Checking </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">x</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">7</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="nb">filter</span><span class="p">(</span><span class="n">my_filter</span><span class="p">,</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="p">))[:</span><span class="mi">10</span><span class="p">]</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">0</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">1</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">2</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">3</span>
</span><span class="line"><span class="c"># ...</span>
</span><span class="line"><span class="c"># 因篇幅較長已被省略</span>
</span><span class="line"><span class="c"># ...</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">98</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">99</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">21</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>惰性版：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span><span class="p">,</span> <span class="n">ifilter</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">first_ten</span> <span class="o">=</span> <span class="n">islice</span><span class="p">(</span><span class="n">ifilter</span><span class="p">(</span><span class="n">my_filter</span><span class="p">,</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="p">)),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="nb">type</span><span class="p">(</span><span class="n">first_ten</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">itertools</span><span class="o">.</span><span class="n">islice</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">first_ten</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">print</span> <span class="n">i</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">0</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">1</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">2</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">3</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">4</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">5</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">6</span>
</span><span class="line"><span class="mi">6</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">7</span>
</span><span class="line"><span class="mi">7</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">9</span>
</span><span class="line"><span class="mi">9</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">10</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">11</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">12</span>
</span><span class="line"><span class="mi">12</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">13</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">14</span>
</span><span class="line"><span class="mi">14</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">15</span>
</span><span class="line"><span class="mi">15</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">16</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">17</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">18</span>
</span><span class="line"><span class="mi">18</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">19</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">20</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">21</span>
</span><span class="line"><span class="mi">21</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>代碼上來說主要是<code>In [2]</code>和<code>In [4]</code>的區別，即<code>filter()</code>換成了<code>ifilter()</code>，<code>[:10]</code> slicing 的方法換成了函數<code>islice()</code>的方法。那最終效果上來說呢，結果都是預計的結果，但是前者測試了很多多餘的數字。</p>

<p>這篇日誌剛開始的時候我們自己寫過一個無限自增生成器。那其實<code>itertools</code>裏有個<code>count()</code>就是幹的這事兒。所以我們接着上面的例子，求8964之後的10個能被3整除或能被7整除的數：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">count</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">first_ten</span> <span class="o">=</span> <span class="n">islice</span><span class="p">(</span><span class="n">ifilter</span><span class="p">(</span><span class="n">my_filter</span><span class="p">,</span> <span class="n">count</span><span class="p">(</span><span class="mi">8964</span><span class="p">)),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="nb">list</span><span class="p">(</span><span class="n">first_ten</span><span class="p">)</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8964</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8965</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8966</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8967</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8968</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8969</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8970</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8971</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8972</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8973</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8974</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8975</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8976</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8977</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8978</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8979</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8980</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8981</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8982</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8983</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8984</span>
</span><span class="line"><span class="n">Checking</span> <span class="mi">8985</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="p">[</span><span class="mi">8964</span><span class="p">,</span> <span class="mi">8967</span><span class="p">,</span> <span class="mi">8970</span><span class="p">,</span> <span class="mi">8973</span><span class="p">,</span> <span class="mi">8974</span><span class="p">,</span> <span class="mi">8976</span><span class="p">,</span> <span class="mi">8979</span><span class="p">,</span> <span class="mi">8981</span><span class="p">,</span> <span class="mi">8982</span><span class="p">,</span> <span class="mi">8985</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>分組處理的操作我們平時也經常做，<code>itertools</code>裏就有個很好的函數叫<code>groupby()</code>，不過它的使用還有個注意事項。比如我們現在要將一堆數字分到奇偶兩個組裏。感覺這樣做應該沒問題：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">groupby</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">groupby_odd_even</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">odd_even_filter</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s">&#39;even&#39;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="s">&#39;odd&#39;</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">num_groups</span> <span class="o">=</span> <span class="n">groupby</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">odd_even_filter</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">num_groups</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="s">&#39;,&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">v</span><span class="p">)))</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">groupby_odd_even</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
</span><span class="line"><span class="n">odd</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span>
</span><span class="line"><span class="n">even</span><span class="p">:</span> <span class="mi">2</span>
</span><span class="line"><span class="n">odd</span><span class="p">:</span> <span class="mi">7</span>
</span><span class="line"><span class="n">even</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span><span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>從結果看，這個<code>groupby()</code>看起來不太對，怎麼出現了多組奇偶數呢？原因是因爲<code>groupby()</code>只組合 list 裏相鄰近的個體。所以如果要把組合併到一起，可以先把每個元素按組標排序，然後再分組：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">groupby_odd_even</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">odd_even_filter</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s">&#39;even&#39;</span> <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="s">&#39;odd&#39;</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">num_groups</span> <span class="o">=</span> <span class="n">groupby</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">odd_even_filter</span><span class="p">),</span> <span class="n">odd_even_filter</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">num_groups</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="s">&#39;,&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">v</span><span class="p">)))</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="n">groupby_odd_even</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
</span><span class="line"><span class="n">even</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span>
</span><span class="line"><span class="n">odd</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>寫到這兒也差不多了，這篇日誌的主要目的也就是想說 Python 的惰性、原理以及惰性相關的語言特性。這方面的知識和信息還有很多，有興趣的同學可以把這篇日誌當起點繼續研究，這只是拋磚引玉。舉最後一個不加解說的例子，展示一下其它一些我沒介紹過的函數作爲結尾：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">ifilter</span><span class="p">,</span> <span class="n">takewhile</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">imap</span><span class="p">,</span> <span class="n">chain</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">factors</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">return</span> <span class="n">ifilter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">n</span> <span class="o">%</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">y</span><span class="p">:</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">,</span> <span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="nb">map</span><span class="p">(</span><span class="nb">set</span><span class="p">,</span> <span class="n">imap</span><span class="p">(</span><span class="n">factors</span><span class="p">,</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">81</span><span class="p">,</span><span class="mi">60</span><span class="p">])))</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="nb">set</span><span class="p">(</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">imap</span><span class="p">(</span><span class="n">factors</span><span class="p">,</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">81</span><span class="p">,</span><span class="mi">60</span><span class="p">])))</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">30</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[勤與懶]]></title>
    <link href="https://conanblog.me/blog/thought/2013/06/09/just-in-case-vs-just-in-time/"/>
    <updated>2013-06-09T22:02:00-04:00</updated>
    <id>https://conanblog.me/blog/thought/2013/06/09/just-in-case-vs-just-in-time</id>
    <content type="html"><![CDATA[<p>「Just In Case」和「Just In Time」，前者是「以防萬一」，而後者是「正好及時」。寫這篇日誌不是爲了給大家解釋這兩個詞組的字面意思，我更想談一談它們字面意思以下的含義，以及它們在程序設計中的意義。</p>

<p>初看之下，這兩個詞組只是長得很像，似乎並沒有什麼聯繫。而事實上我覺得它們間是一種反義的聯繫。「Just In Case」的做法是在處理問題時把所有可預料的情況處理放在前面處理；「Just In Time」則相對應，總是只處理當前需要處理的問題，處理是放在當下的。所以打個形象的比喻就是前者是勤勤懇懇的人，而後者是懶惰精明的人。<!--more--></p>

<p>看到這裏，或許你會認爲前者是好的，後者是壞的。但是這也正是我想澄清的，它們並沒有好壞之分，應該說它們各有各的優勢也各有各的劣勢。此話怎講？我們來用我們學過的知識來打個比方好了。曾经我和很多人一样都有一种困惑，或者说失落感，因为大学本科课程太浅，觉得学得泛而浅；而真正开始工作了又要开始学各种更加深入而专项的知识。为什么不在本科就学呢？其实这样的教育体系是有它存在的意义的。泛而浅的知识是必要的，因为如果你从未开始探索某一领域的知识的话，在将来如果要用到的时候就很难往这一领域的知识想。比如《数学之美》的作者吴军博士就曾经是学信号处理的，而这些知识恰好在他后来的信息和语音处理领域可以得到应用。如果他之前学的，比方说，会计學，他或许最终会用一样的知识体系去解决问题，但很显然，他很有可能得走更多的弯路。所以这些在本科学到的泛而浅的知识其实就是「Just
In Case」的知识。相對應的，那些到了工作中学到的专项深入的知识大多是「Just In Time」的知识。这两种不同类型的知识我們都需要，自然可以看出 JIC 和 JIT 是各有千秋的了。</p>

<p>現在我們再把這兩個概念放到編程語言和程序設計這裏領域來說說吧。可能對編譯有所瞭解的同學會一眼認出JIT，那是一種編譯方式沒錯，不過我想說的是一個更廣一點的概念，就是「lazy」。lazy 是計算機科學裏一個處理問題的策略，說白了就是讓程序避免執行不必要的指令，從而達到提升效能的目的。lazy 這個詞跟我們平時生活中用來形容人的用法其實是一樣的，只是這裏我們似乎因爲它帶來了額外的利益，反而對 lazy
跪舔了。（再次表現出了人類的醜陋本性，嫉妒別人能夠省事，同時又無節操地喜歡對自己有利的東西。）那在程序世界裏跟 JIT 相對的概念跑哪兒去了？其實我們平時正常的、無 laziness 的編程方式就是跟 JIT 相對的編程方式了。</p>

<p>這時候可能有人會覺得，既然 lazy 式的編程方式可以幫我們節省資源，我們爲什麼不全都用這種方式？這就引出了我想說的，不同應用場景這兩種編程風格的利弊了。lazy 也不是徹底的好東西。我們拿分佈式計算裏的一個案例來舉例，Hadoop（MapReduce），如果全都採用 lazy 式的設計方案，那很有可能有些數據就總不會被算，直到被需要的那一刻，這帶來的後果就是本來能夠並行分佈式運算的，但卻因爲
lazy 變成了低效的半並行半流水線的分佈式運算。</p>

<p>聊完了編程，我們來聊聊人生好了。其實「勤奮」與「懶惰」，還真的是個哲學問題呢。有人看起來勤奮，但其實他懶惰；有人看起來懶惰，但其實他勤奮。第一類人，我們通常會用「庸庸碌碌」來形容他，而第二類人更像是「精明能幹」的。第一類人不想走出自己的 confident
zone，所以即便知道自己在做的是重複勞動，他也會「勤勤懇懇」地做下去，「懶」到不願去想有沒有更好的辦法。第二類人合理地避開不需要處理的事物，創造性地產生出可以取代現有方案的新方案，他們可能看起來做的事情並不多，但其實「勤」于思考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[也談編程工具]]></title>
    <link href="https://conanblog.me/blog/thought/tool/2013/04/21/programming-tools/"/>
    <updated>2013-04-21T18:09:00-04:00</updated>
    <id>https://conanblog.me/blog/thought/tool/2013/04/21/programming-tools</id>
    <content type="html"><![CDATA[<p>我總是避免在博客裏談工具，因爲怕被扣上「工具黨」的帽子。今天看到<a href="http://www.yinwang.org/blog-cn/2013/04/20/editor-ide">王垠聊到編輯器與IDE</a>，才想起來我似乎沒有在博客中寫過相關的話題。接觸代碼世界也已經十餘年了，這一拍腦袋，覺得好多話想說。</p>

<p>首先表個態，爭論工具孰好孰壞意義不大，就跟編程語言的爭論一樣無意義，因爲這些東西都不存在絕對的「好壞」，而只存在「適合不適合」，脫離前提的討論是空泛而不切實際的。既然這樣還寫這篇博客幹嘛？只是隨想，算是滿足一下我的傾訴慾望。<!--more--></p>

<h1 id="ide">IDE</h1>

<p>IDE是個很贊的「再發明」，之所以說它是「再發明」因爲我認爲它已經被發明過，只是當時人們沒有認出它。這個我會在下一節聊。喜歡IDE的理由很簡單，因爲它特別省事，尤其是在應付編程語言的知識集遠遠大於人腦對相關知識的記憶集的時候。Java就是個再好不過的例子，它的知識集不僅龐大，而且還時常令人困惑。就其龐大而言，看看它的文檔和相關的書籍就知道，其厚度是可以考慮作爲防身道具的。而對於「令人困惑」我得稍微解釋一下。困惑來自語言中一些對類似概念的
inconsistency。比如 Java 中的 Array、ArrayList、String，我們時常要獲得它們的長度。對於Array，我們得用<code>array.length</code>，是Array的一個屬性；對於ArrayList，我們得用<code>arrayList.size()</code>，是ArrayList的一個方法；對於String，我們得用<code>string.length()</code>，是String的一個方法。</p>

<p>如果沒有IDE，那解決以上的兩大問題就必須藉助於查詢文檔，這樣一來，效率就下降了。有人說可以熟能生巧，那也只是熟手被迫擴大了自己的記憶集而已。這時候IDE的好處就顯現出來了，自動補完和語法提示拯救了大多數 Java 程序員。而且IDE與身居來就「傻瓜模式」，通常從安裝到使用都不會超過30分鐘。</p>

<p>另一個優點是伴隨它的自動化來的，我們知道IDE裏都有很多工程模板和代碼自動化工具。這些東西對於剛入門的程序員特別有用，那些文件結構和代碼結構就是一種行業標準，學習這些標準有助於使自己的成長。</p>

<p>而其缺點也是從「傻瓜模式」引入的。我有多次爲了配置IDE環境而浪費了四五個小時的經歷。簡單的加一些包、修改編譯器版本什麼的倒是容易。但是如果項目比較複雜，牽連到一些其它技術和語言，那可能會要費點心。如果你所使用的技術的社區步伐比較快，那恐怕IDE還不是很支持，或者只支持較舊版本。沒錯，IDE是爲「大多數情況」設計的，你很難保證自己正在開發的項目是不是「大多數情況」。</p>

<p>另外，IDE對用戶而言，是個黑箱，其內部運行機制我們只能靠想當然或查文檔。這也給定製化IDE造成了一定的難度。不知你有沒有遇到過，反正我是遇到過一些小問題怎麼調都有問題，之後重啓IDE或重裝才好。不管問題到後來有沒有解決，都讓你感到莫名其妙。所以現在市場上比較好用的IDE都是非常有針對性的，很少能做到一個IDE就滿足大部分開發需求的，即使有，其體驗也令人着急。</p>

<p>最後是有關權限的問題。用 Windows 的用戶可能不太會遇到我所描述的情況，但是相信用 Linux/Unix 的朋友應該是遇到過類似的。就是項目放在一個不屬於用戶權限的目錄下，要編輯的時候就必須給IDE super user的權限，而IDE的行爲很多時候都是黑箱，且可能涉及到除要修改的文件以外的其它項目文件，我要非常小心地操作，因爲「權利越大，責任越大」。</p>

<h1 id="section">編輯器</h1>

<p>在這個討論中，與IDE相對的就是文本編輯器了。文本編輯器的種類可就多了，有經典的 Vi 和 Emacs，還有較爲現代的TextMate, Sublime。這個小節裏我將特指文本編輯器爲那些有較好CLI支持的編輯器。爲什麼？你應該還記得我在前一節說到IDE是被重新發明的吧，其實我想說，IDE初見端倪還是在Unix環境下。我並不是第一個這麼說的人，如果你看過我們翻譯的<a href="https://conanblog.me/Unix-as-IDE--Chinese-/">「Unix as
IDE」</a>，你就應該明白爲什麼我這麼說了。這裏我簡單闡述下：首先是Unix/Linux
shell下能實現幾乎所有現代IDE的功能，它甚至能更好地實現。而shell下的可編程性又使得個性化配置變得簡單可控。所以上面提到的IDE的缺點被全部修正。當然隨之而來的是易用性問題。如果僅僅是用好shell下的編輯器，其學習曲線倒也還可以接受；但是要把Unix/Linux當作IDE一樣用好，可能不花上個一兩年是不行的。不過這中時間投資是值得的。</p>

<p>這種靈活性和可編程性很大程序上得益於之前被王垠噴的Unix/Linux的以字符爲通信媒介的設計思路。Unix/Linux的設計中，有很多「只做一件事並把事情做到最好」的小程序，這些小程序接受字符串命令並執行。這樣一來，它們即可以單獨運行，也可以作爲一個更大作業的一部分來運行。正是因爲字符串式的控制方式，我們才能如此靈巧地使用這些小程序。想想看，如果這些小程序都是通過對用戶不友好的API來呼叫，系統會怎麼樣？變快了，可是丟失了一些靈活性。這種靈活性，我常常用一個比方來說明它，試想待解決的各種問題就像用石塊鋪的地面，要想弄平整這塊地面，就必須拿那些顆粒更小的黃沙來填充溝壑。而Unix/Linux的這種設計思路正是這種黃沙，這才使得Unix/Linux可以勝任幾乎任何工作。</p>

<p>上面扯的這些可能在沒有相關經驗的人看來有點空，下面我們來點接地氣的，說說我是怎麼用 Vim 以及相關集成環境的吧。由於工作需要，我得寫
Python、Ruby、PHP、Java、Go、JS等相關的程序（其實還包括我現在寫博客的markdown在內的很多文件支持，這裏就不一一列舉了），項目中出現多語言的情況也很多。爲了適應這種詭異的需求，我寫了一套<a href="https://github.com/ConanChou/ConanVimrc">自己的Vim配置</a>。不同編程語言的支持，對我來說只要有語法高亮和正確的縮進以及不用太智能的自動補全就差不多了。除此之外，剛剛我說了很多它的靈活性，例子之一就是我在做RoR開發的時候，TDD就是用 <a href="http://joshuadavey.com/2012/01/10/faster-tdd-feedback-with-tmux-tslime-vim-and-turbux/">Vim + tmux
的快速反饋</a>的方式來做的。那這麼做到底有多爽呢？感覺很像是Emacs下用<a href="http://common-lisp.net/project/slime/">slime</a>做clisp的開發，隨寫隨eval。這些功能性都是較現代IDE有過之而無不及的。</p>

<p>說完功能性，我還覺得使用文本編輯器寫程序能使你更快地變成更好的程序員，至少對我來說是這樣。爲什麼這麼說，首先是「去自動化」，這些經典文本編輯器都是有非常完備的自動化功能的，但是並不會像現代IDE那麼簡單獲得。於是在順利使用各種自動化提高效率之前，你可能得手動做好多從零開始的事情。在此過程中你可以學習到很多技術細節。比如說用某某框架，一些現代IDE可以自動生成好多東西，包括一些配置文件也都是點點按鈕。其實這些技術細節都在那一堆項目文件裏，如果能經自己手，並在特殊情況下按照自己的需要修改這些文件的話，你學到的要比用IDE生成來的多而且快。有些東西，是欲速則不達的。</p>

<p>再來便是思維訓練。記得剛剛學習變成那會兒還只是簡單的藍色窗口下的BASIC，出了問題了只能靠<code>print</code>和想，沒有先進的debugger。後來用上了IDE之後一度迷戀上使用圖形界面debugger這種便利的工具。後來發現，其實往往通過推理的方式來debug更加有效，甚至能預見到還未出現的bug。文本編輯器裏沒有什麼便利的debugger，要用也只能用命令行下的debug工具。這時候你只要還有點惰性，就不太希望輕易使用debug工具。這種思維訓練提供了我全局思考和程序化思維的能力，變成一個活解釋器也不是壞事不是嗎？</p>

<h1 id="section-1">根源？</h1>

<p>我曾看到<a href="http://developers.slashdot.org/story/12/10/30/065244/the-ide-as-a-bad-programming-language-enabler">這樣一種說法</a>，說如果一門語言設計得足夠好的話，IDE是一種多餘的存在。因爲IDE本身就是爲了很大程度上彌補語言設計的不足。聽起來有點偏激？我暫不置評吧，畢竟這篇日誌是談工具，而語言，作爲生產材料，或許可以作爲以後某篇日誌的主題。引入這個評論，其實我是想說分析生產工具無法徹底將其與生產材料分開討論。而確實，不同的編程語言其需要的自動化類型也是不同的。對於設計較差的編程語言，自動化可能更多的是在生成代碼上。而對設計較好的編程語言，自動化可能更多的是放在生產環節上，比如自動測試、編譯、部署等。生產環節的自動化往往是需要很強靈活性的，而前面我也已經說了，這種靈活性恐怕是大多數IDE不具備的，除非有像google內部專門的team做相關的IDE定製化開發的支持。</p>

<p>先拋開語言的優劣，我覺得目前我看到的最想用的IDE就是<a href="http://www.lighttable.com/">LightTable</a>。當然，如果它能兼備靈活性，我會果斷拋棄現在我在使用的開發環境方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[道不明，術不精]]></title>
    <link href="https://conanblog.me/blog/thought/2013/04/20/dao-bu-ming-shu-bu-jing/"/>
    <updated>2013-04-20T01:20:00-04:00</updated>
    <id>https://conanblog.me/blog/thought/2013/04/20/dao-bu-ming-shu-bu-jing</id>
    <content type="html"><![CDATA[<p>「道不明，術不精」是現在最適合形容我狀態的語句。說真的，我對自己有些失望。從兩千年初開始接觸計算機和因特網，到現在幾乎沒有什麼大的成就。對照 Coding Horror 裏的<a href="http://www.codinghorror.com/blog/2009/04/the-eight-levels-of-programmers.html">《程序員的八個等級》</a>，我大概在4～5吧。而很顯然這不應該是一個有志者所止步的位置。我最接近「Famous」的恐怕也只有幾年前趕鴨子上架般的在亞太開源軟件峯會上給的關於 CakePHP 和 Symfony
的講座吧。我一直在學習，可長進不足。到底是哪裏做得不對？<!--more--></p>

<p>上上週考算法，這週又有電話面試，所以最近一個月把<a href="http://www.amazon.com/Introduction-Algorithms-Thomas-H-Cormen/dp/0262033844/ref=sr_1_2?ie=UTF8&amp;qid=1366437541&amp;sr=8-2&amp;keywords=intro+to+algo">《Introduction to Algorithms》</a>和<a href="http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1366437600&amp;sr=1-1&amp;keywords=cracking+the+coding+interview">《Cracking the Coding Interview》</a>過了一遍。同時看了一小半<a href="http://www.amazon.com/What-Technology-Wants-Kevin-Kelly/dp/0143120174/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1366437694&amp;sr=1-1&amp;keywords=what+technology+wants">《What Technology
Wants》</a>和<a href="http://book.douban.com/subject/2567698/">《三體》</a>前兩部。感覺明白了一些東西，可是又不明確到足以用語言表達的程度。所以我將僅陳述一些事實和我零碎的想法。我相信人類的大腦在接收了這些信息後可以感悟出相近的思想。</p>

<h1 id="section">學習的困難</h1>

<p>語言的形成給知識的記錄和傳播提供了必要的基礎。而語言其本身，是人類思想的一種編碼方式。一般情況下，所謂的「讀懂」只是解碼成功的代名詞。因爲人類智商大致一樣，所以大多數書本的知識並不會困難到無法理解，真正使你無法理解的原因是缺失解碼需要的額外知識。而那些額外知識可能在其他書本裏。</p>

<p>從地球上出現私有制開始，人類就已經將「自私」深深埋入自己的基因。真理往往簡單到讓你感到不真實。可得到真理的部分人並不希望別人輕鬆地獲得真理，別人也必須要花不少於自己所花的時間才公平。於是他們喜歡在「編碼」的時候故弄玄虛。當然，也有可能是出於多得到些稿費的原因。於是怪圈就形成了。但一旦你能識破怪圈，怪圈也會隨之消失。所要做的只是耐心。</p>

<h1 id="section-1">人與科技</h1>

<p>人類的科技放在宇宙尺度來看確實是爆炸式的，就像生物的出現、人類的演化也幾乎都是爆炸式的一樣。爲什麼是這樣，直到凱文凱利點破了科技是更高級的生命時我才恍然大悟。科技並不只是人類缺失能力的補足，而是像物種間的相互利用一樣，人離不開科技，科技離不開人。於是，適用於其他生物的公理也適用於科技。於是科技和生物一樣，有生存、繁衍和進化的需要。說到進化就不得不談DNA。人類的異性交配而交換DNA的方式大大提高多樣性，也進而增大了進化的可能性。而對於科技而言，它們的DNA是什麼呢？是「道」和「術」。</p>

<p>科技和科學到底是個什麼樣的關係？科技是「道」和「術」的集合，她既是指導思想，也是技巧方法。而科學就僅僅是研究其「道」，是學問。「道」像海上的明燈，指明方向；而「術」像划船的方法，用於前行。二者缺一不可。</p>

<h1 id="section-2">我的問題</h1>

<p>科技孕育於人類，這就迴歸到我了。「道不明」會導致沒有爆發力，就會像輪胎陷在泥潭裏一樣使不上力；久而久之必然「術不精」，在泥潭裏的各種掙扎，用盡了辦法（術），到頭來也不知道什麼術可行、也不知自己會什麼術。也就是說，要想孕育出更好的科技，就必須道術兼備，且要像DNA交換那麼富於變化。除此之外，就是不停地嘗試，畢竟富於變化的DNA並沒有任何質量上的保障。</p>

<p>一年前我還把計算機科學叫做「人造科學」，因爲覺得有別與自然科學，她似乎是人「生造」出來的。可是我現在又覺得這樣說不確切了。我們都知道計算機科學跟數學的淵源，可以說計算機科學完全構建於數學之上，當然這裏的數學包括邏輯學。如果僅僅從這裏看，說她人造科學也合情合理。可是我目光短淺了。數學又來自哪裏？數學是一切的抽象，當然也包括自然科學。（有興趣的話可以看一下BBC的The History of
Mathematics）如果從這個意義上來說計算機科學是一切科學的虛擬化。所以我一度覺得計算機科學的核心是術多於道的想法是大錯特錯的，其道很深，還來自除了大家已經爛熟於心的計算存儲原理和圖靈機以外的方方面面。這顯然是我一輩子都沒法學得完的。</p>

<p>當想明白了這些，再回頭看看程序員的八個等級，排在前列的都是偉大的「父親」或「母親」。他們孕育了更加優質的科技。現在我要做的已然很清晰。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 下載盒]]></title>
    <link href="https://conanblog.me/blog/raspberry-pi/bittorrent/arch/linux/2013/02/20/raspberry-pi-as-a-bittorrent-box/"/>
    <updated>2013-02-20T17:03:00-05:00</updated>
    <id>https://conanblog.me/blog/raspberry-pi/bittorrent/arch/linux/2013/02/20/raspberry-pi-as-a-bittorrent-box</id>
    <content type="html"><![CDATA[<p><a href="https://conanblog.me/blog/raspberry-pi/hack/arch/linux/go/2013/02/17/play-with-raspberry-pi/">上一篇日誌</a>我在篇尾大致說了一下我用 Raspberry Pi 做 Bit Torrent（BT）下載盒。這次不是蛋疼，而確實是爲了節省地球資源。簡單做個記錄，另外我也想說說我發現的問題和困惑。<!--more--></p>

<h2 id="section">環境搭建</h2>

<p>OS 環境就跟上一篇日誌說的一樣，應用程序我隨便挑了個 Transmission。它有 daemon 模式跑，有簡單好用的 Web UI，最主要的是它也支持 Private Tracker（在國外下載東西還是這種類型的比較安全）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo su
</span><span class="line"><span class="nv">$ </span>pacman -S transmission-cli
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>daemon 模式執行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>cp /usr/lib/systemd/system/transmission.service /etc/systemd/system/
</span><span class="line"><span class="nv">$ </span>cp /usr/lib/tmpfiles.d/transmission.conf /etc/tmpfiles.d/
</span><span class="line"><span class="nv">$ </span>groupadd transmission
</span><span class="line"><span class="nv">$ </span>gpasswd -a conan transmission
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改<code>/etc/tmpfiles.d/transmission.conf</code>，將<code>user</code>和<code>group</code>替換成我們剛剛設置的‘conan’和‘transmission’。接着啓用剛剛的配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>systemd-tmpfiles --create transmission.conf
</span><span class="line"><span class="nv">$ </span>systemctl daemon-reload
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>別忘了把<code>/run/transmission</code>的權限設置成<code>777</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>chmod <span class="m">777</span> /run/transmission
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>硬件方面，我不可能往我4GB的小SD卡裏面存儲，所以我用了一塊自供電的外接硬盤。將它<code>mount</code>起來，其方法很多，可以手動mount也可以修改<code>/etc/fstab</code>自動化mount。這個示例裏我就從簡，手動添加了（因爲這塊硬盤是NTFS的，之後我需要格式化一下，所以只是暫時使用）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>mkdir /mnt/disk500
</span><span class="line"><span class="nv">$ </span>mount /dev/sda1 /mnt/disk500
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>將<code>disk500</code>裏的「Downloads」軟連接到<code>~/Downloads</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ln -s /mnt/disk500/Downloads/ ~/Downloads
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">使用情況</h2>

<p>這樣就可以通過<a href="http://127.0.0.1:9091">http://127.0.0.1:9091</a>來管理下載了。下面是效果圖。</p>

<p><img src="https://conanblog.me/images/20130220/WebUI.png" alt="Web UI" title="Web UI" /></p>

<p><img src="https://conanblog.me/images/20130220/peers.png" alt="Peers" title="Peers" /></p>

<p>速度還不錯吧，再來看一下內存和CPU使用情況：</p>

<p><img src="https://conanblog.me/images/20130220/top.png" alt="top" title="top" /></p>

<p>可以發現，其實 Transmission 內存使用並沒有很嚇人，反而是 NTFS 用掉了很多CPU資源，這也是爲什麼我上面說到要格式化這塊硬盤的原因。</p>

<p>最後我持續關注了下載速度，遇到了我之前也遇到過的一個問題，就是速度時上時下的，波動特別大。我之前用 Transmission 就會這樣，還時不時斷網，後來換了別的 BT 客戶端就沒這樣過，所以我想這應該是 Transmission 某些設置的問題。我也嘗試去找一些解決方案，可是基本都不是很有效。求高人答疑解惑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi + Arch + WiFi + Sound + Go 簡記]]></title>
    <link href="https://conanblog.me/blog/raspberry-pi/hack/arch/linux/go/2013/02/17/play-with-raspberry-pi/"/>
    <updated>2013-02-17T17:11:00-05:00</updated>
    <id>https://conanblog.me/blog/raspberry-pi/hack/arch/linux/go/2013/02/17/play-with-raspberry-pi</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://goo.gl/RSj7A">http://goo.gl/RSj7A</a></p>

<p>Tl;dr. <a href="http://www.raspberrypi.org/">Raspberry Pi</a> 剛剛在 HN 上紅起來的時候，我就果斷通過 ebay 從英國買了一隻。那是上學期的事情了，由於<a href="http://www.conanblog.me/life/where-are-we/">種種原因</a>，我直到最近才真正玩起來。寫這篇簡記有兩個目的，一爲了以後自己查閱配置方法方便，二爲了給明睿交差（太無聊可以直接看最後一節……）。<!--more--></p>

<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">硬件</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">軟件</a>    <ul>
      <li><a href="#section-2" id="markdown-toc-section-2">操作系统</a></li>
      <li><a href="#section-3" id="markdown-toc-section-3">分區擴容</a></li>
      <li><a href="#section-4" id="markdown-toc-section-4">系統常規設置</a></li>
      <li><a href="#section-5" id="markdown-toc-section-5">聲音</a>        <ul>
          <li><a href="#vlc" id="markdown-toc-vlc">VLC</a></li>
        </ul>
      </li>
      <li><a href="#wifi" id="markdown-toc-wifi">WiFi</a></li>
      <li><a href="#go" id="markdown-toc-go">Go</a></li>
    </ul>
  </li>
  <li><a href="#section-6" id="markdown-toc-section-6">後記</a></li>
</ul>

<h2 id="section">硬件</h2>

<p>Pi 本身我是買了 Model B，它跟 A 的區別只是 B 有倆 USB 口和 512MB 內存，而 A 只有一個 USB 口和 256MB 内存。東西運到的時候除了機子本身什麼都沒有，所以其他東西你得自己配。</p>

<p>最基本的是電源，理論上說，電腦 USB 口直接供电就应该可以驱动 Pi 了，可是網上有些黑客表示有起不動的現象，用測電壓的儀器測了板子，當插上一些設備後，不達5伏。所以我建議在選擇電源時可以挑高一點電壓的，比如<a href="http://www.amazon.com/gp/product/B004EYSKM8/ref=oh_details_o05_s00_i00?ie=UTF8&amp;psc=1">摩托羅拉的SPN5504型充電器</a>，它的輸出規格是5.1V，850mA。補充一句，這塊板子的最高設計電壓是5.25V。我用的這個充電器的電流還是比較小，經測試，跑不動無電源供給的外接硬盤。</p>

<p>除此之外，我還買了一個迷你 WiFi 網卡，<a href="http://www.amazon.com/gp/product/B005CLMJLU/ref=oh_details_o06_s00_i00?ie=UTF8&amp;psc=1">Edimax EW-7811Un</a>。有了 WiFi，我就可以不用非得拿一根網線接着用了，比較方便。</p>

<p>其它硬件我就不一一說了，不太算是必須品，大致是殼子、各種線（我現在只用ssh鏈接）和麪包板以及各種小電子元件（這些是用來做別的擴展的）。</p>

<h2 id="section-1">軟件</h2>

<p>由於硬件的計算能力非常有限，我選擇了 Arch Linux 作爲操作系統。非常輕量級，而且給你更多的支配權。</p>

<h3 id="section-2">操作系统</h3>

<p>Arm 版的可以在 Pi 的<a href="http://www.raspberrypi.org/downloads">官網下載</a>。這個系統裏也沒有GUI，正和我意。值得強調的是這個鏡像是hard-float ABI的，啓動非常快。</p>

<p>下載好鏡像後先檢查下 checksum：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sha1sum ~/Downloads/archlinux-hf-2013-02-11.zip
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解壓：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>unzip ~/Downloads/archlinux-hf-2013-02-11.zip
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在插入SD卡之前，用 <code lang="bash">df -h</code> 查看當前掛載的磁盤，再插入SD卡再查看。找出你的SD卡名字，就是像 <code>/dev/mmcblk0p1</code> 或 <code>/dev/sdd1</code> 這樣的盤符。記住名字並卸載該盤符（如果這個SD卡裏有多個分區，保證卸載該SD卡下的所有盤符）,這裏我們假設是<code>mmcblk0p1</code>这个盘：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>unmount /dev/mmcblk0p1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>卸载后就可以将镜像拷贝到刚刚的SD卡裏了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo dd <span class="nv">bs</span><span class="o">=</span>4M <span class="k">if</span><span class="o">=</span>/path/to/your/image/arch-linux.img <span class="nv">of</span><span class="o">=</span>/dev/mmcblk0p1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">分區擴容</h3>

<p>OS 的安裝其實到這裏就算結束了，但是因爲原鏡像是2GB的，如果你的SD卡大於2GB，其他的空間就用不到了，要用就得對SD卡上的分區擴容。擴容的工具很多，有命令行的也有圖形界面的。GParted 就挺好用的，如果對命令行工具不太熟悉，它是個很好的選擇。不過在這篇簡記裏我要裝個逼：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo fdisk -uc /dev/mmcblk0
</span><span class="line">
</span><span class="line"><span class="c"># 打印分區表</span>
</span><span class="line">Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: p
</span><span class="line">
</span><span class="line">Disk /dev/mmcblk0: <span class="m">3904</span> MB, <span class="m">3904897024</span> bytes
</span><span class="line"><span class="m">64</span> heads, <span class="m">32</span> sectors/track, <span class="m">3724</span> cylinders, total <span class="m">7626752</span> sectors
</span><span class="line"><span class="nv">Units</span> <span class="o">=</span> sectors of <span class="m">1</span> * <span class="nv">512</span> <span class="o">=</span> <span class="m">512</span> bytes
</span><span class="line">Sector size <span class="o">(</span>logical/physical<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes
</span><span class="line">I/O size <span class="o">(</span>minimum/optimal<span class="o">)</span>: <span class="m">512</span> bytes / <span class="m">512</span> bytes
</span><span class="line">Disk identifier: 0x0004f23a
</span><span class="line">
</span><span class="line">        Device Boot      Start         End      Blocks   Id  System
</span><span class="line">/dev/mmcblk0p1   *        <span class="m">2048</span>      <span class="m">186367</span>       <span class="m">92160</span>    c  W95 FAT32 <span class="o">(</span>LBA<span class="o">)</span>
</span><span class="line">/dev/mmcblk0p2          <span class="m">186368</span>     <span class="m">3667967</span>     <span class="m">1740800</span>   <span class="m">83</span>  Linux
</span><span class="line">
</span><span class="line"><span class="c"># 刪除第二個分區</span>
</span><span class="line">Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: d
</span><span class="line">Partition number <span class="o">(</span>1-4<span class="o">)</span>: 2
</span><span class="line">
</span><span class="line"><span class="c"># 新建一個分區</span>
</span><span class="line">Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: n
</span><span class="line">Command action
</span><span class="line">   e   extended
</span><span class="line">   p   primary partition <span class="o">(</span>1-4<span class="o">)</span>
</span><span class="line">p
</span><span class="line">Partition number <span class="o">(</span>1-4<span class="o">)</span>: 2
</span><span class="line">
</span><span class="line"><span class="c"># !!! 第一個扇區號必須和上面刪除的分區的起始扇區號一樣，這裏的話是186368 !!!</span>
</span><span class="line">First sector <span class="o">(</span>186368-7626751, default 186368<span class="o">)</span>: 186368
</span><span class="line">Last sector, +sectors or +size<span class="o">{</span>K,M,G<span class="o">}</span> <span class="o">(</span>186368-7626751, default 7626751<span class="o">)</span>:
</span><span class="line">Using default value 7626751
</span><span class="line">
</span><span class="line"><span class="c"># 保存剛剛的操作並退出</span>
</span><span class="line">Command <span class="o">(</span>m <span class="k">for</span> <span class="nb">help</span><span class="o">)</span>: w
</span><span class="line">The partition table has been altered!
</span><span class="line">
</span><span class="line">Calling ioctl<span class="o">()</span> to re-read partition table.
</span><span class="line">Syncing disks.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>檢查下磁盤，然後再擴容：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo e2fsck -f /dev/mmcblk0p2
</span><span class="line"><span class="nv">$ </span>sudo resize2fs -p /dev/mmcblk0p2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">系統常規設置</h3>

<p>Arch 起來之後裏面基本上啥都沒有，所以得根據自己的喜好調教一下。本着極簡主義的原則，我做了如下調整。先以 root 身份登錄。</p>

<p>Pi 用 SD 卡做主盤，其實就相當與 SSD 了，爲了延長 SD 卡的壽命，我把系統的<code>atime</code>記錄取消掉了，只要修改<code>/etc/fstab</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># </span>
</span><span class="line"><span class="c"># /etc/fstab: static file system information</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># &lt;file system&gt;        &lt;dir&gt;         &lt;type&gt;    &lt;options&gt;          &lt;dump&gt; &lt;pass&gt;</span>
</span><span class="line">devpts                 /dev/pts      devpts    defaults            <span class="m">0</span>      0
</span><span class="line">shm                    /dev/shm      tmpfs     nodev,nosuid        <span class="m">0</span>      0
</span><span class="line">/dev/mmcblk0p1  /boot           vfat    defaults        <span class="m">0</span>       0
</span><span class="line">/dev/mmcblk0p2  /               ext4    defaults,noatime        <span class="m">0</span>       0
</span><span class="line">tmpfs           /var/log        tmpfs   defaults,noatime,mode<span class="o">=</span>0755,size<span class="o">=</span>5%      <span class="m">0</span>       0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>升級系統：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pacman -Syu
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果它說要先升級<code>pacman</code>，就讓它升，升完後再來一次，這樣整個系統都更新了。</p>

<p>修改默認 root 的密碼：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>passwd root
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改默認主機名，默認是叫<code>alarmpi</code>，你可以修改<code>/etc/hostname</code>裏的此默認值。</p>

<p>Arch 默認是沒有<code>sudo</code>的，安一個：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pacman -S sudo
</span><span class="line"><span class="nv">$ </span>visudo
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>爲了只讓<code>sudo</code>用戶組的用戶有執行<code>sudo</code>的權限，我們還得修改一下 <code>/etc/sudoers</code>文件，用你最喜歡的文本編輯器打開，並去掉<code>%sudo ALL=(ALL) ALL</code>這一行前面的註釋，保存並關閉。</p>

<p>創建新用戶並設置密碼：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>useradd -m -g users -s /bin/bash conan
</span><span class="line"><span class="nv">$ </span>passwd conan
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将新用户加入到<code>sudo</code>用戶組：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo usermod -aG sudo conan
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>禁止<code>root</code>通過ssh登錄，打開<code>/etc/ssh/sshd_config</code>，找到<code>PermitRootLogin</code>並把它的值改成‘no’。重啓<code>sshd</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>systemctl restart sshd
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改時區設置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>tzselect
</span><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">TZ</span><span class="o">=</span><span class="s1">&#39;America/New_York&#39;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">source</span> /etc/profile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>安裝<code>Vim</code>和<code>python2</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pacman -S vim python2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>常規設置這樣就差不多了，更新並重啓一下系統（再次更新是以防因爲以上變動之後有些包找不到）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pacman -Syu
</span><span class="line"><span class="nv">$ </span>reboot
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">聲音</h3>

<p>安裝<code>alsa</code>相關包：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo su
</span><span class="line"><span class="nv">$ </span>pacman -S alsa-firmware alsa-lib alsa-plugins alsa-utils mpg123
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>掛載聲音模塊：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>modprobe snd_bcm2835
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>將聲音模塊放進內核模塊，這樣它會自啓動：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>vi /etc/modules-load.d/snd_bcm2835.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>文件裏寫：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Put snd_bcm2835.ko in kernel modules</span>
</span><span class="line">snd_bcm2835
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因爲 Pi 的音頻可以從 analog 和 HDMI 兩個通道出來，所以我們可以做個選擇，從<a href="http://www.raspberrypi-spy.co.uk/2012/06/raspberry-pi-speakers-analog-sound-test/">官網的信息</a>看，你可以用 <code>amixer cset numid=3 &lt;n&gt;</code> 這個命令來制定通道，其中<code>&lt;n&gt;</code>可以是 0、1、2，意思是：0=auto, 1=analog, 2=hdmi。</p>

<p>測試一下是否有效：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>speaker-test -c 2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>沒問題的話你應該可以聽到一些噪音。當然你也可以通過官網的方法測試：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>wget http://www.freespecialeffects.co.uk/soundfx/sirens/police_s.wav
</span><span class="line"><span class="nv">$ </span>aplay police_s.wav
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果遇到這樣的報錯：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ALSA lib confmisc.c:768:<span class="o">(</span>parse_card<span class="o">)</span> cannot find card <span class="s1">&#39;0&#39;</span>
</span><span class="line">ALSA lib conf.c:4246:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_card_driver returned error: No such file or directory
</span><span class="line">ALSA lib confmisc.c:392:<span class="o">(</span>snd_func_concat<span class="o">)</span> error evaluating strings
</span><span class="line">ALSA lib conf.c:4246:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_concat returned error: No such file or directory
</span><span class="line">ALSA lib confmisc.c:1251:<span class="o">(</span>snd_func_refer<span class="o">)</span> error evaluating name
</span><span class="line">ALSA lib conf.c:4246:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_refer returned error: No such file or directory
</span><span class="line">ALSA lib conf.c:4725:<span class="o">(</span>snd_config_expand<span class="o">)</span> Evaluate error: No such file or directory
</span><span class="line">ALSA lib pcm.c:2217:<span class="o">(</span>snd_pcm_open_noupdate<span class="o">)</span> Unknown PCM default
</span><span class="line">aplay: main:696: audio open error: No such file or directory
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>你需要把用戶加到<code>audio</code>用戶組裏：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>usermod -G audio -a conan
</span><span class="line"><span class="nv">$ </span>su -l conan
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="vlc">VLC</h4>

<p>安裝 VLC 純粹是因爲我<code>scp</code>了一份「白金迪斯科」到 Pi，發現居然解碼失敗了……以及 VLC 有個網頁端的控制接口，挺方便，可惜就是太 heavy 了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pacman -S vlc pulseaudio pulseaudio-alsa libao
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>安裝完後把<code>/etc/libao.conf</code>裏的<code>alsa</code>換成<code>pulse</code>。之後再跑，你可能會遇到一些錯誤，那是因爲有些包還沒裝，仔細看下錯誤信息再補上就好了。上面的安裝我也不是一次到位的，也是跑跑補補，只是在寫簡記的時候重新 compile 了命令記錄。</p>

<p>爲了使用網頁控制接口，你得在<code>/usr/share/vlc/lua/http/.hosts</code>裏加上可訪問的 IP，在這裏我就開放了本地網絡的訪問權：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># local network</span>
</span><span class="line">192.168.2.0/24
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這樣應該就好了，來聽首歌試試：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>vlc --intf http --http-host 192.168.2.11 --http-port <span class="m">8080</span> /home/conan/hikari-loveletter.mp3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>打開 Web Interface 就只需要：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>vlc --extraintf<span class="o">=</span>http
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="wifi">WiFi</h3>

<p>Edimax EW-7811Un 是基於 Realtek 8192CU 的 WiFi 網卡。這一款在 Raspberry Pi 社区里非常有人气，因为它能被 Pi 的小電力驅動。不過貌似它的驅動程序卻還沒有成爲 alarmpi 的標配，我聽說它的驅動已經成爲 Raspbian 的標配（基於 debian 的 Pi Linux 分支），估計 alarmpi 也快了吧。不過在此之前還是得自己擼。擼之前我建議參考這篇簡記的同學先用<code>lsmod</code>查看一下當前已經掛載的模塊，如果有叫<code>8192cu</code>的，那麼恭喜你，你不用自己擼了，直接跳過本章節吧！</p>

<p>安裝前還是先更新、安裝一些必要的工具：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo su
</span><span class="line"><span class="nv">$ </span>pacman -Syu
</span><span class="line"><span class="nv">$ </span>pacman -S util-linux base-devel unzip
</span><span class="line"><span class="nv">$ </span>reboot
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>util-linux</code>包其實是已經安裝過的了，但是在這裏我們或許得重裝一下，這是爲了避免<code>util-linux</code>的c重啓後不能登錄的小 bug，如果重啓後不能登錄了，就<code>ssh</code>上，再重裝<code>util-linux</code>。</p>

<p>從另一臺機子下載 <a href="http://218.210.127.131/downloads/downloadsView.aspx?Langid=1&amp;PNid=21&amp;PFid=48&amp;Level=5&amp;Conn=4&amp;DownTypeID=3&amp;GetDown=false&amp;Downloads=true#2772">RTL8192CU 驅動源碼</a>(因爲這個極品的網站裏源碼是js搞的，不太容易弄直接下載地址，所以得有個有圖形界面的機子來下)。將下載好的 zip 包上傳到 Pi 裏：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>scp ~/Downloads/RTL8192xC_USB_linux_v3.4.3_4369.20120622.zip conan@192.168.2.11:/home/conan/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面再次回到 Pi 裏，解壓源碼：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo su
</span><span class="line"><span class="nv">$ </span>unzip RTL819xC_USB_linux_v3.4.3_4369.20120622.zip
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>RTL8188C_8192C_USB_linux_v3.4.3_4369.20120622/driver/
</span><span class="line"><span class="nv">$ </span>tar -xvf rtl8188C_8192C_usb_linux_v3.4.3_4369.20120622.tar.gz
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>rtl8188C_8192C_usb_linux_v3.4.3_4369.20120622
</span><span class="line"><span class="nv">$ </span>vim Makefile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這裏我們要修改一下編譯所基於的架構，首先找到<code>CONFIG_PLATFORM_I386_PC = y</code>，將‘y’改成‘n’；加上<code>CONFIG_PLATFORM_ARM_BCM2708 = y</code>，在架構配置區塊下面加上下面的代碼：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ifeq <span class="o">(</span><span class="k">$(</span>CONFIG_PLATFORM_ARM_BCM2708<span class="k">)</span>, y<span class="o">)</span>
</span><span class="line">EXTRA_CFLAGS +<span class="o">=</span> -DCONFIG_LITTLE_ENDIAN
</span><span class="line">ARCH :<span class="o">=</span> arm
</span><span class="line">CROSS_COMPILE :<span class="o">=</span>
</span><span class="line">KVER  :<span class="o">=</span> <span class="k">$(</span>shell uname -r<span class="k">)</span>
</span><span class="line">KSRC :<span class="o">=</span> /lib/modules/<span class="k">$(</span>KVER<span class="k">)</span>/build
</span><span class="line">endif
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>保存後就可以出來編譯了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>make
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不出意外，這裏應該就編譯成功了，我第一次跑的時候失敗了，原因是我下錯了源代碼包……成功後在一坨新生成的文件裏有個叫<code>8192cu.ko</code>的。這就是那個將要被掛載到內核的新模塊。</p>

<p>按理說這裏只要再<code>make install</code>就好了，可是官方的 install 腳本好像有點問題，不過還是有參考意義的，至少它描述了你大概要做哪些事情來安裝新的組件。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>cp 8192cu.ko /lib/modules/<span class="k">$(</span>uname -r<span class="k">)</span>/kernel/net/wireless
</span><span class="line"><span class="nv">$ </span>depmod -a
</span><span class="line"><span class="nv">$ </span>insmod 8192cu.ko
</span><span class="line"><span class="nv">$ </span>install -p -m <span class="m">644</span> ~/RTL8188C_8192C_USB_linux_v3.4.3_4369.20120622/driver/rtl8188C_8192C_usb_linux_v3.4.3_4369.20120622/8192cu.ko /lib/modules/<span class="o">(</span><span class="nv">$uname</span> -r<span class="o">)</span>/kernel/drivers/net/wireless/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>驅動裝完後我們還得看看有沒有衝突的驅動，用<code>mkinitcpio -M</code>查看。如果发现列表里有<code>rtl8192cu</code>，我們得禁用它才能保證新的驅動正常工作：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;blacklist rtl8192cu&quot;</span> &gt; /etc/modprobe.d/blacklist-rtl8192cu.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重啓並登錄後先看看驱动模块能不能用，如果有問題就再回到之前的部分仔細走一遍：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo su
</span><span class="line"><span class="nv">$ </span>rmmod 8192cu
</span><span class="line"><span class="nv">$ </span>modprobe 8192cu
</span><span class="line"><span class="nv">$ </span>ip link <span class="nb">set </span>wlan0 up
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接着就可以裝網絡管理軟件來自動化鏈接 WiFi 了，我用的是<code>netcfg</code>，先安裝必要的工具：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pacman -S wireless_tools netcfg
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>安裝好後有些文件要配置一下，首先是創建 profile 文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>cp /etc/network.d/examples/wireless-wpa /etc/network.d/conan_wireless
</span><span class="line"><span class="nv">$ </span>vim /etc/network.d/conan_wireless
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>更具自己網絡的情況填寫好相應信息，當然這裏我用的是wpa方式連的，其他模式都在<code>examples</code>目錄下，具體信息可以看 <a href="https://wiki.archlinux.org/index.php/Netcfg#Configuration">Arch wiki</a>。</p>

<p><code>/etc/conf.d/netcfg</code>也要做些修改，因爲 WiFi 的 DHCP 可能有些慢，所以最好把等待時間設置長一點，加一句<code>DHCP_TIMEOUT=30</code>；其他的配置可以更具自己的喜好自由調整。</p>

<p>最後終於可以連 WiFi 了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>netcfg /etc/network.d/conan_wireless
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這個過程中可能會看到錯誤，但是之後如果出現了‘Done’，那就應該是連上了，可以<code>ifconfig</code>看一下。</p>

<p>最後我們要把 WiFi 鏈接自動化：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>systemctl <span class="nb">enable </span>net-auto-wireless.service
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="go">Go</h3>

<p>在 arm 上編譯 Go 我純粹是吃飽了撐着，因爲發現在 Pi 上编译还比较 tricky，所以記錄一下。先裝上必要的軟件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pacman -S mercurial gcc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下載源碼：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>hg clone -u release https://code.google.com/p/go /usr/local/go
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>編譯流程跟<a href="http://golang.org/doc/install/source">官網說的</a>差不多，只是在編譯之前要設置一些環境變量：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">GOARCH</span><span class="o">=</span><span class="s2">&quot;arm&quot;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">GOARM</span><span class="o">=</span><span class="s2">&quot;5&quot;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">GOOS</span><span class="o">=</span><span class="s2">&quot;linux&quot;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="s2">&quot;/usr/local/go/bin&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面接着正常編譯流程：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">cd</span> /usr/local/go/src
</span><span class="line"><span class="nv">$ </span>./all.bash
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>跑完后應該會有類似這樣的信息：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ALL TESTS PASSED
</span><span class="line">
</span><span class="line">---
</span><span class="line">Installed Go <span class="k">for</span> linux/amd64 in /home/you/go.
</span><span class="line">Installed commands in /home/you/go/bin.
</span><span class="line">*** You need to add /home/you/go/bin to your <span class="nv">$PATH</span>. ***
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>當然也有可能測試沒有完全通過的，我就遇到過，但是 bin 已經編譯成功了。這時候只需要把環境變量裏的<code>PATH</code>更新一下就可以了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/go/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最後跑個「喂世界」程序測試下。建一個<code>hello.go</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="kn">package</span> <span class="nx">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class="line">
</span><span class="line"><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;hello, world\n&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>走起：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>go run hello.go
</span><span class="line">hello, world
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-6">後記</h2>

<p>這篇簡記基本只是一個關於 Raspberry Pi 的 setup，可能明睿更多的是希望看到各種性能相關的測評。我想性能什麼的是在預料之中的，肯定跟我們的本本沒法比啦，在編譯 Go 的時候連<code>rand</code>的測試都超時了。但是作爲一個玩具，還是挺不錯的。有了它我現在可以更節能了，下載不用整夜開着能跑「暗黑3」和「星際爭霸2」的 Linux 主機了。聽個音樂和有聲讀物也不用特意開電腦，手機還能方便操控。連着硬盤做文件stream或分享也挺方便。其實最好的一點是換SD卡方便。現在一個卡是 Arch，回頭再做張卡弄媒體中心，要用什麼就換什麼。</p>

<p>至於麪包板以及擴展的一些 Hack 我還沒玩得起來，材料還在路上，不過我已經有些想法了。比如做些指示燈和語音輸出，把平時需要關注的信息用這些媒介傳遞給我，簡單說就是把以前的 pull 換成 push。</p>

<p>綜上所述，玩這個肯定是蛋非常疼的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 調優筆記·經驗主義調優]]></title>
    <link href="https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips/"/>
    <updated>2012-08-26T14:56:00-04:00</updated>
    <id>https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips</id>
    <content type="html"><![CDATA[<p><a href="https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/">上一次我們聊了「理性主義」</a>，與其相對的哲學流派就是「經驗主義」了，在 Python 的調優中，我們自然也有從前人流傳下來的小技巧來使代碼的效率更高。在優化工作當中，這兩類方式往往是交替使用的。而且廣義地說，流派不一樣不代表它們對同一件事情的看法就是矛盾的。事實上流派不一樣僅僅是研究方式不一樣，最後結論往往是一致的。本文則將重點放在「經驗主義調優」，收集儘可能多的小技巧。預料中會有補充。<!--more--></p>

<p>在列舉各種「術」之前，先說「道」（術指具體做事的方法，道指做事的原理）。領悟了道之後才能在不同情況下做出正確的選擇。一般而言，調優無非在兩方面做優化：時間複雜度和空間複雜度。有時候時間和空間會互相矛盾，而這個時候就不得不在它們中做取捨。不同的應用取捨的決定因素是不一樣的。不過就目前而言，因爲空間越來越廉價，時間越來越寶貴，大部分時候人們會偏向與用空間換時間。當然也有兩者不矛盾的時候，這個時候肯定是綜合複雜度越小越好。除了空間、時間複雜度的取捨之外，還有一個可讀性的問題，實際上有時候爲了優化代碼，可讀性會下降不少。所以這個也是個要權衡的方面。</p>

<p>從複雜度的角度說，選擇的優先級按下面的排列：</p>

<script type="math/tex; mode=display">O(1)>O(\log n)>O(n\log n)>O(n^2)>O(n^3)>O(n^k)>O(k^n)>O(n!)</script>

<p>在 Python 中，對 <code lang="python">list</code>、<code lang="python">collections.deque</code>、<code lang="python">set</code>、<code lang="python">dict</code> 的各種操作的時間複雜度可以在<a href="http://wiki.python.org/moin/TimeComplexity">這裏找到</a>。</p>

<p>下面我就羅列各種「前人的經驗」。其實記住就可以，不過我還是用簡短的描述大致解釋一下原因,便於更加深刻地理解 Python 內部。有興趣的話其實可以用<a href="https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/">「理性主義」的分析方法</a>來看看下面的這些「經驗」。</p>

<ul>
  <li>
    <h3 id="dictlangpython--listlangpython"><code lang="python">dict</code> &gt; <code lang="python">list</code></h3>
  </li>
</ul>

<p><code lang="python">dict</code> 的數據結構是 Hash Table，查找的時間複雜度 是<script type="math/tex">O(1)</script>；而 <code lang="python">list</code> 的數據結構是 Array，查找的時間複雜度是 <script type="math/tex">O(n)</script>。</p>

<ul>
  <li>
    <h3 id="dictlangpython--dictgetlangpython"><code lang="python">dict[]</code> &gt; <code lang="python">dict.get()</code></h3>
  </li>
</ul>

<p>前者叫「直接獲取」，如果 <code lang="python">key</code> 超出了範圍會報錯；而後者是通過 <code lang="python">dict</code> 的方法調用，如果超出 <code lang="python">key</code> 範圍，它會將默認值賦給剛剛查詢的 <code lang="python">key</code>。顯然 <code lang="python">get()</code> 做了很多事情，慢一些是預料之中的。</p>

<p>這裏插一句題外話。有時候你確實需要類似 <code lang="python">get()</code> 所提供的效果，即這種容錯性，有些程序員傾向於用 <code lang="python">try...except...</code> 和 <code lang="python">dict[]</code> 來實現。在以前，這兩者在運行速度上區別還比較大，新版本的 Python 在這兩種方案下表現得比較一致，只有 10% 的性能差異。所以在這種情況下用 <code lang="python">dict.get()</code> 其實是個不錯的選擇。</p>

<ul>
  <li>
    <h3 id="setlangpython--listlangpython"><code lang="python">set</code> &gt; <code lang="python">list</code></h3>
  </li>
</ul>

<p>前者與生俱來的 <code lang="python">|</code> (union)、<code lang="python">&amp;</code> (intersection) 和 <code lang="python">-</code> (difference) 運算就比 <code lang="python">list</code> 的迭代式效率高。所以涉及到 <code lang="python">list</code> 的這三種運算，最佳方案是轉成 <code lang="python">set</code> 再用相應的 <code lang="python">set</code> 運算符計算，最後再轉到 <code lang="python">list</code>。例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">list_a</span><span class="p">)</span> <span class="o">|</span> <span class="nb">set</span><span class="p">(</span><span class="n">list_b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <h3 id="strjoinlangpython--str--str--strlangpython"><code lang="python">str.join()</code> &gt; <code lang="python">str + str + str</code></h3>
  </li>
</ul>

<p>Python 字符串都是不可變的類型，任何類似改變字符串的操作其實都得拷貝原字符串。後者的連加其實是要做多次字符串相加運算的，而前者只要一次。不過就單次的速度而言，在 2.7 以上版本的 Python 中，兩者的區別已經不是很大。</p>

<ul>
  <li>
    <h3 id="langpython--str--str--strlangpython">字符串格式化 <code lang="python">%</code> &gt; <code lang="python">str + str + str</code></h3>
  </li>
</ul>

<p>寫習慣了 PHP 的話很容易就愛後一種方式，但是跟上面一條說的原因差不多，用格式化 <code lang="python">%</code> 的方式要高效一些。</p>

<ul>
  <li>
    <h3 id="section">自帶函數 &gt; 正則表達式</h3>
  </li>
</ul>

<p>Python 字符串自帶了不少有用的方法可以取代正則表達式。比如那些 <code>is</code> 開頭的方法以及 <code>with</code> 結尾的方法。具體的列表可以查看 pydoc：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pydoc str
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <h3 id="sortlangpython--">自帶 <code lang="python">sort</code> &gt; 自寫排序算法</h3>
  </li>
</ul>

<p>如果你不確定你自己寫的算法真的優於 Python 內置的 <code lang="python">sort</code> 方法，那還是使用內置的。因爲 Python 的 <code lang="python">sort</code> 其實會因爲不同的數據類型、甚至根據數據的長度，選擇最優的排序方式。有興趣的話可以去看一看 CPython 有關 <code lang="python">sort</code> 的源碼。</p>

<p>其實大多數自帶函數的效率都比較高，甚至 <code lang="python">add()</code> 都要比 <code lang="python">+</code> 快。所以儘量使用 Python 自帶的函數。</p>

<ul>
  <li>
    <h3 id="listlangpython-comprehensions--"><code lang="python">list</code> comprehensions &gt; 循環</h3>
  </li>
</ul>

<p><code lang="python">list</code> comprehensions 的運行是 CPython 的底層層面的，而一般的循環是在 VM 裏面跑的。很顯然前者要更優。</p>

<ul>
  <li>
    <h3 id="maplangpython--"><code lang="python">map</code> &gt; 循環</h3>
  </li>
</ul>

<p>跟 <code lang="python">list</code> comprehensions 的情況一樣，運算會被推到 C 層面，比 VM 裏跑的效率高。</p>

<ul>
  <li>
    <h3 id="section-1">局部變量 &gt; 全局變量</h3>
  </li>
</ul>

<p>這個尤其要在循環裏注意，就是<a href="https://conanblog.me/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/">本系列第二篇</a>裏我們找到的問題。Python 對局部變量的訪問效率要比全局變量的訪問效率高。另外，如果是一些帶「點」的方法，最好也放到循環的外面，因爲每次「點」，相應的方法都要再 <code lang="python">eval</code> 一遍。因此應該像下面這樣寫：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
</span><span class="line">    <span class="n">upper</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">upper</span>
</span><span class="line">    <span class="n">newlist</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">append</span> <span class="o">=</span> <span class="n">newlist</span><span class="o">.</span><span class="n">append</span>
</span><span class="line">    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">oldlist</span><span class="p">:</span>
</span><span class="line">        <span class="n">append</span><span class="p">(</span><span class="n">upper</span><span class="p">(</span><span class="n">word</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">newlist</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>當然，在可以用 <code lang="python">list</code> comprehensions 和 <code lang="python">map</code> 的情況下，優先考慮使用這些。</p>

<ul>
  <li>
    <h3 id="section-2">懶惰 &gt; 勤勞</h3>
  </li>
</ul>

<p>這裏的「懶惰」指 Lazy Evaluation，在 Python 中，我目前知道條件判斷和 2.x 中的 <code lang="python">xrange</code> (即 3.x 中的 <code lang="python">range</code>)。</p>

<p>所以在類似 <code lang="python">if a and b</code> 的語句裏，<code>a</code> 會被先判斷，如果是 <code lang="python">False</code>，<code>b</code> 的運算就被直接跳過了。因此在寫程序時應該把運算量大的部分寫在靠後的部分。</p>

<p><code lang="python">xrange()</code> 不會在運行時就在內存中產生一個 <code lang="python">list</code>，而是在用的時候臨時算出來。看下面的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">r</span>
</span><span class="line"><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">xr</span> <span class="o">=</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">xr</span>
</span><span class="line"><span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">xr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">xr</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">xr</span>
</span><span class="line"><span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">iterator</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">rangeiterator</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7fbbed1123f0</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">iterator</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class="line"><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <h3 id="langpython--langpython"><code lang="python">()</code> &gt; <code lang="python">[]</code></h3>
  </li>
</ul>

<p>前者不可變，後者可變，生成的時間前者更短。</p>

<ul>
  <li>
    <h3 id="islangpython--langpython"><code lang="python">is</code> &gt; <code lang="python">==</code></h3>
  </li>
</ul>

<p><code lang="python">is</code> 是比較對象，<code lang="python">==</code> 是比較對象裏的值。很顯然 <code lang="python">==</code> 要做的事情要稍微多一點。所以在能夠用 <code lang="python">is</code> 的時候要用 <code lang="python">is</code></p>

<ul>
  <li>
    <h3 id="truelangpython">1 &gt; <code lang="python">True</code></h3>
  </li>
</ul>

<p>Python 裏的 <code>bool</code> 也是繼承自 <code>int</code>，單純從運行效率來說，用 <code lang="python">int</code> 代替 <code lang="python">bool</code> 更好。可是可讀性會變差。</p>

<ul>
  <li>
    <h3 id="a--b--clangpython--a--b-and-b--clangpython"><code lang="python">a &gt; b &gt; c</code> &gt; <code lang="python">a &gt; b and b &gt; c</code></h3>
  </li>
</ul>

<p>類似 <code lang="python">map</code> 的情況，前者被放到更底層算，而後者還停留在 VM 內，效率自然有所差異。</p>

<ul>
  <li>
    <h3 id="section-3">循環放在方法裏 &gt; 循環裏調方法</h3>
  </li>
</ul>

<p>假設我們現在有個 <code lang="python">list</code> 需要對其內容一一處理，在你面前是兩條路（假設不用 <code lang="python">list</code> comprehensions 之類更好的方式），一條是將 <code lang="python">list</code> 傳進專門處理的方法，然後在方法內循環處理裏面的元素；另一條是遍歷此 <code lang="python">list</code>，然後將單個的元素用一個方法去做處理。這兩者間前者比較好，因爲 Python
的方法調用還是需要較多的開銷的。看例子，首先是循環裏調方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="k">def</span> <span class="nf">doit</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="k">global</span> <span class="n">x</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">i</span>
</span><span class="line">
</span><span class="line"><span class="nb">list</span> <span class="o">=</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
</span><span class="line">    <span class="n">doit</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>改成下面這樣更好</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line"><span class="k">def</span> <span class="nf">doit</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class="line">    <span class="k">global</span> <span class="n">x</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
</span><span class="line">        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">i</span>
</span><span class="line">
</span><span class="line"><span class="nb">list</span> <span class="o">=</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span><span class="line"><span class="n">doit</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <h3 id="importlangpython">減少重複 <code lang="python">import</code></h3>
  </li>
</ul>

<p>有時候我們將 <code lang="python">import</code> 放在一個方法的開頭以此來縮小模塊的可用範圍或加快程序的啓動速度。而 Python 也足夠聰明可以防止多次導入相同的庫。但是 <code lang="python">import</code> 本身還是需要開銷一些時間的，無論是不是重複的。所以如果某個方法會被多次調用，最好將 <code lang="python">import</code> 放到方法外面。</p>

<ul>
  <li>
    <h3 id="iflangpython">方法重定向 &gt; <code lang="python">if</code></h3>
  </li>
</ul>

<p>假設我們有這麼一種情況：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Test</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">str</span> <span class="o">=</span> <span class="n">b</span><span class="o">*</span><span class="mi">100</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">str</span> <span class="o">=</span> <span class="n">c</span><span class="o">*</span><span class="mi">100</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">Test</span><span class="p">()</span>
</span><span class="line"><span class="k">def</span> <span class="nf">example</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100000</span><span class="p">):</span>
</span><span class="line">        <span class="n">a</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="s">&quot;b&quot;</span><span class="p">,</span><span class="s">&quot;c&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>初看這段代碼沒什麼問題，但是如果仔細看，<code lang="python">if</code> 用得很單調。前 50 個也就算了，但是後面的 99950
次 <code lang="python">if</code> 開銷就很大了。如果能省去這些 <code lang="python">if</code> 速度會好很多。這裏其實可以用方法重定向來提高效率：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">Test</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">str</span> <span class="o">=</span> <span class="n">b</span><span class="o">*</span><span class="mi">100</span>
</span><span class="line">        <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">50</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">check</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">check_post</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">check_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">str</span> <span class="o">=</span> <span class="n">c</span><span class="o">*</span><span class="mi">100</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">Test</span><span class="p">()</span>
</span><span class="line"><span class="k">def</span> <span class="nf">example</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100000</span><span class="p">):</span>
</span><span class="line">        <span class="n">a</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="s">&quot;b&quot;</span><span class="p">,</span><span class="s">&quot;c&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p>本文是『Python 調優筆記』系列中的一篇，其它文章還有：</p>

<ul>
  <li><a href="https://conanblog.me/blog/python/optimization/serial/programming/2012/07/23/python-optimization-1/" title="Python 調優筆記·序">序，一切的開始</a></li>
  <li><a href="https://conanblog.me/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/" title=" Python 調優筆記·代碼造影">代碼造影，定位癥結</a></li>
  <li><a href="https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/" title="Python 調優筆記·理性主義調優">理性主義調優，一切從根本出發</a></li>
  <li><a href="https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips/" title="Python 調優筆記·經驗主義調優">經驗主義調優，站在巨人的肩膀上</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 調優筆記·理性主義調優]]></title>
    <link href="https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/"/>
    <updated>2012-08-26T00:10:00-04:00</updated>
    <id>https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling</id>
    <content type="html"><![CDATA[<p><a href="https://conanblog.me/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/">上次</a>我們學會了如何使用造影工具，使用它們的目的自然是設法找到代碼「慢」的理由。不過在上次的博文裏對於那段代碼慢的分析也是建立在我們有一定經驗的基礎上的。那我們總有第一次，如果第一次我們碰到這樣的瓶頸我們是不是就不知道該如何優化了呢？答案顯然是否定的。計算機作爲一門人造科學，可以說是完全在數學和邏輯的基礎上堆砌起來的，是完全可以推導出問題出在哪裏的（題外話，我認爲後者也屬於前者，可是聯合國教科文組織卻把它們分開了）。本篇博文就是要說如何在無經驗狀態下找到癥結。我稱之爲「理性主義調優」，當然這裏只指代碼級別的調優。（理性主義相對於經驗主義，是兩個相對的哲學流派。）<!--more--></p>

<p>我們要做的第一步就是學會使用代碼造影，上次我們討論的幾個工具並不是你每次每個都要使用，但是先做大範圍的模塊造影，再做有針對性的行造影是造影的常規步驟。</p>

<p>經過上面的第一步，我們會得到一組有問題的代碼。能直接解決的可以直接解決，不能直接找到原因的就是下面我重點要講的了。因爲 Python 是相對很高級的語言，很多底層細節會被隱藏掉，這從某種程度上加大了找出癥結的難度。換句話說，只要能夠摸清楚某行有問題的代碼到底怎麼執行的，那基本也就能夠推導出問題所在了。所以「理性主義調優」的問題就被簡化爲「如何弄懂代碼到底幹什麼」的問題。</p>

<p>爲此去讀長篇的文檔當然算是一個辦法，很學院派，但是並不是很高效。另一條路就是「Disassembling」，有 C 背景的同學多半是聽過這個詞的。說白了，就是把程序執行時在內存裏的每一步操作都打印出來，以供分析。（如果對此不瞭解的同學可以到我翻譯的開源文集<a href="http://www.conanblog.me/Unix-as-IDE-CN/html/compiling.html#id3">相關章節</a>學習）其實 Python 也可以 Disassembling，不過這和 C 的有些區別。因爲我們知道 Python 在運行時，其機制和 Java 是類似的，都是從源碼到字節碼，即
bytecode，而非二進制碼（binary code）；然後再把字節碼放在虛擬機裏運行。所以 Python 裏面的 Disassembling 其實是字節碼層面的。下面用到的工具就來自 Python 自帶的 <code lang="python">dis</code>。</p>

<p>我們繼續之前的<a href="https://raw.github.com/ianozsvald/HighPerformancePython_PyCon2012/master/mandelbrot/pure_python/pure_python_slow.py">代碼例子</a>，只是假設我們現在還不知道「慢」的原因。目前的狀況是我們知道了瓶頸在 <code lang="python">calculate_z_serial_purepython()</code> 裏，並且通過行造影，我們知道 <code lang="python">z[i] = z[i]*z[i] +q[i]</code> 花了很多时间。现在我们来 Disassembling：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pure_python_slow</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">pure_python_slow</span><span class="o">.</span><span class="n">calculate_z_serial_purepython</span><span class="p">)</span>
</span><span class="line"><span class="c"># 前略</span>
</span><span class="line">
</span><span class="line"> <span class="mi">32</span>     <span class="o">&gt;&gt;</span>   <span class="mi">90</span> <span class="n">SETUP_LOOP</span>              <span class="mi">86</span> <span class="p">(</span><span class="n">to</span> <span class="mi">179</span><span class="p">)</span>
</span><span class="line">             <span class="mi">93</span> <span class="n">LOAD_GLOBAL</span>              <span class="mi">1</span> <span class="p">(</span><span class="nb">range</span><span class="p">)</span>
</span><span class="line">             <span class="mi">96</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">maxiter</span><span class="p">)</span>
</span><span class="line">             <span class="mi">99</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">1</span>
</span><span class="line">            <span class="mi">102</span> <span class="n">GET_ITER</span>
</span><span class="line">        <span class="o">&gt;&gt;</span>  <span class="mi">103</span> <span class="n">FOR_ITER</span>                <span class="mi">72</span> <span class="p">(</span><span class="n">to</span> <span class="mi">178</span><span class="p">)</span>
</span><span class="line">            <span class="mi">106</span> <span class="n">STORE_FAST</span>               <span class="mi">5</span> <span class="p">(</span><span class="n">iteration</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"> <span class="mi">33</span>         <span class="mi">109</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class="line">            <span class="mi">112</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">115</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 z[i] 的值</span>
</span><span class="line">            <span class="mi">116</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class="line">            <span class="mi">119</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">122</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 z[i] 的值</span>
</span><span class="line">            <span class="mi">123</span> <span class="n">BINARY_MULTIPLY</span>                  <span class="c"># 計算 z[i]*z[i]</span>
</span><span class="line">            <span class="mi">124</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">q</span><span class="p">)</span>   <span class="c"># 載入 q</span>
</span><span class="line">            <span class="mi">127</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">130</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 q[i] 的值</span>
</span><span class="line">            <span class="mi">131</span> <span class="n">BINARY_ADD</span>                       <span class="c"># 計算 z[i]*z[i]+q[i]</span>
</span><span class="line">            <span class="mi">132</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class="line">            <span class="mi">135</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">138</span> <span class="n">STORE_SUBSCR</span>                     <span class="c"># 保存剛剛的計算結果進 z[i]</span>
</span><span class="line">
</span><span class="line"> <span class="mi">34</span>         <span class="mi">139</span> <span class="n">LOAD_GLOBAL</span>              <span class="mi">2</span> <span class="p">(</span><span class="nb">abs</span><span class="p">)</span> <span class="c"># 載入 abs 方法</span>
</span><span class="line">            <span class="mi">142</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class="line">            <span class="mi">145</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">148</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 z[i]</span>
</span><span class="line">            <span class="mi">149</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">1</span>       <span class="c"># 執行 abs 方法</span>
</span><span class="line">            <span class="mi">152</span> <span class="n">LOAD_CONST</span>               <span class="mi">6</span> <span class="p">(</span><span class="mf">2.0</span><span class="p">)</span> <span class="c"># 載入 2.0</span>
</span><span class="line">            <span class="mi">155</span> <span class="n">COMPARE_OP</span>               <span class="mi">4</span> <span class="p">(</span><span class="o">&gt;</span><span class="p">)</span>   <span class="c"># 將 abd 的執行結果和 2.0 比較</span>
</span><span class="line">            <span class="mi">158</span> <span class="n">POP_JUMP_IF_FALSE</span>      <span class="mi">103</span>       <span class="c"># 根據結果跳到 103</span>
</span><span class="line">
</span><span class="line"><span class="c"># 後略</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因爲我們已經將我們的注意力定在了這幾行，所以我略去了前後無關的內容。後面的註釋是我加的，說實話光是註釋就加得累死我了，那問題看來也很顯然了吧。太多重複調用了，非常不科學。</p>

<p>這裏對輸出的每一列的內容做一個介紹，以便理解，從左往右：</p>

<ol>
  <li>對應源碼的行號</li>
  <li>當前指令用 <code>--&gt;</code> 表示，上面的例子中沒有</li>
  <li>有標記的指令用 <code>&gt;&gt;</code> 表示</li>
  <li>指令地址</li>
  <li>指令名</li>
  <li>指令傳入參數</li>
  <li>解析參數後對應原程序裏的變量名、常量、分支目標和比較符號</li>
</ol>

<p>至於指令名的具體含義，請參考<a href="http://docs.python.org/library/dis.html#python-bytecode-instructions">官方文檔</a>。</p>

<p>以上便是「理性主義調優」。我想我必須強調，「過早優化」沒有好處。所以，use it wisely.</p>

<hr />

<p>本文是『Python 調優筆記』系列中的一篇，其它文章還有：</p>

<ul>
  <li><a href="https://conanblog.me/blog/python/optimization/serial/programming/2012/07/23/python-optimization-1/" title="Python 調優筆記·序">序，一切的開始</a></li>
  <li><a href="https://conanblog.me/blog/optimization/programming/python/serial/2012/07/25/python-optimization-2-profiling/" title=" Python 調優筆記·代碼造影">代碼造影，定位癥結</a></li>
  <li><a href="https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-3-disassembling/" title="Python 調優筆記·理性主義調優">理性主義調優，一切從根本出發</a></li>
  <li><a href="https://conanblog.me/blog/python/optimization/serial/programming/2012/08/26/python-optimization-4-high-performance-python-general-coding-tips/" title="Python 調優筆記·經驗主義調優">經驗主義調優，站在巨人的肩膀上</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用另一臺計算機寫 Octopress]]></title>
    <link href="https://conanblog.me/blog/octopress/hack/2012/08/23/write-octopress-in-another-box/"/>
    <updated>2012-08-23T23:26:00-04:00</updated>
    <id>https://conanblog.me/blog/octopress/hack/2012/08/23/write-octopress-in-another-box</id>
    <content type="html"><![CDATA[<p>用 Octopress 寫博客已經有幾天了，一直都在家裏的臺機上寫。今天想在我的小黑上寫點東西的時候我就只是把 Github 上所有的 branch <code>clone</code> 下來，裝了改裝的東西，可是折騰半天不能從小黑上發佈。去 doc 里面看了一下，也没有这方面的记录。於是決定刨根。<!--more--></p>

<p>Octopress 的運行機制很簡單，就是用類似 <code>make</code> 的 <code>rake</code> 將寫好的 <code>markdown</code> 文件轉化成 HTML 文件，皮膚什麼的都也一併生成好，然後再把生成好的一堆靜態文件 <code>push</code> 到 Github 或其他類似的地方。我想不能推送的話應該是可以從 Rakefile 裏找到答案。果不其然：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">mkdir</span> <span class="n">deploy_dir</span>
</span><span class="line"><span class="n">cd</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git init&quot;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;echo &#39;My Octopress Page is coming soon &amp;hellip;&#39; &gt; index.html&quot;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git add .&quot;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git commit -m </span><span class="se">\&quot;</span><span class="s2">Octopress init</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git branch -m gh-pages&quot;</span> <span class="k">unless</span> <span class="n">branch</span> <span class="o">==</span> <span class="s1">&#39;master&#39;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git remote add origin </span><span class="si">#{</span><span class="n">repo_url</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="n">rakefile</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line">  <span class="n">rakefile</span><span class="o">.</span><span class="n">sub!</span><span class="p">(</span><span class="sr">/deploy_branch(\s*)=(\s*)([&quot;&#39;])[\w-]*[&quot;&#39;]/</span><span class="p">,</span> <span class="s2">&quot;deploy_branch</span><span class="se">\\</span><span class="s2">1=</span><span class="se">\\</span><span class="s2">2</span><span class="se">\\</span><span class="s2">3</span><span class="si">#{</span><span class="n">branch</span><span class="si">}</span><span class="se">\\</span><span class="s2">3&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="n">rakefile</span><span class="o">.</span><span class="n">sub!</span><span class="p">(</span><span class="sr">/deploy_default(\s*)=(\s*)([&quot;&#39;])[\w-]*[&quot;&#39;]/</span><span class="p">,</span> <span class="s2">&quot;deploy_default</span><span class="se">\\</span><span class="s2">1=</span><span class="se">\\</span><span class="s2">2</span><span class="se">\\</span><span class="s2">3push</span><span class="se">\\</span><span class="s2">3&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="n">rakefile</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很顯然，這個 <code>deploy_dir</code> 也是一個單獨的 git 目錄。追溯其根源，也就是默認設置，就是 「_deploy」 目錄。而這個目錄是被 「.gitignore」 排除的。這就難怪爲什麼單純的 <code>clone</code> 沒法工作了。于是完整的 <code>clone</code> 过程如下（包含註解）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="p">;</span>: go to the dir you want to put your octopress repo
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ~/Documents
</span><span class="line">
</span><span class="line"><span class="nv">$ </span><span class="p">;</span>: clone repo from your exists octopress repo
</span><span class="line"><span class="nv">$ </span>git clone git@github.com:ConanChou/conanchou.github.com.git octopress
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>octopress
</span><span class="line">
</span><span class="line"><span class="nv">$ </span><span class="p">;</span>: get the <span class="nb">source </span>branch
</span><span class="line"><span class="nv">$ </span>git checkout -b <span class="nb">source </span>origin/source
</span><span class="line">
</span><span class="line"><span class="nv">$ </span><span class="p">;</span>: add original octopress repo to remote <span class="k">for</span> updates
</span><span class="line"><span class="nv">$ </span>git remote add octopress https://github.com/imathis/octopress.git
</span><span class="line">
</span><span class="line"><span class="nv">$ </span><span class="p">;</span>: clone the master branch to _deploy dir
</span><span class="line"><span class="nv">$ </span>git clone git@github.com:ConanChou/conanchou.github.com.git _deploy
</span><span class="line">
</span><span class="line"><span class="nv">$ </span><span class="p">;</span>: install bundles
</span><span class="line"><span class="nv">$ </span>gem install bundler
</span><span class="line"><span class="nv">$ </span>bundle install
</span><span class="line"><span class="nv">$ </span>rake install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Python 的「神奇方法」元編程]]></title>
    <link href="https://conanblog.me/blog/python/programming/2012/08/21/python-metaprogramming-with-magic-methods/"/>
    <updated>2012-08-21T22:41:00-04:00</updated>
    <id>https://conanblog.me/blog/python/programming/2012/08/21/python-metaprogramming-with-magic-methods</id>
    <content type="html"><![CDATA[<p>在開始聊這個話題前，我覺得有必要先簡單說說這兩個概念：「神奇方法」和「元編程」。</p>

<p>什麼是「神奇方法」？其實是我亂翻譯的，英文中大家叫它們「Magic Methods」。我沒有在靜態語言中聽到過這個概念，只在 Python、PHP 這類動態語言中聽到。這是一類比較特殊的方法（Method/Function），是隨語言本身所故有的，在程序中無聲無息地起到作用。它們的命名方式都很特別，比如在 Python 中就是用<code>__</code>開頭用<code>__</code>結尾的方法，而在 PHP
中則是類似地用<code>__</code>開頭的方法。<!--more-->說他們默默無聞一點不假，因爲正常編程的過程中較少的跟它們打交道，就連官方的文檔都只是用只言片語描述了下，以示存在。然而它們非常重要。幸好有一些熱心人做了<a href="http://www.rafekettler.com/magicmethods.html">一份較爲詳細的文檔</a>可作參考。</p>

<p>「元編程」的概念並不新鮮，簡單而廣義地說就是語言本身可以在運行時被修改或可以增量編譯，那麼我們就可以使用該語言進行元編程。而要實現上述功能，語言本身就需要有反射或者泛型編程的語言特性。這術語聽起來很嚇人，但其實說具體如何實踐就不嚇人了。根據維基百科，實現元編程可以有三種方法。一是語言本身暴露一些本身運行時的 API，然後我們可以通過對調教 API
來實現元編程。二是語言本身可以動態地執行一些本身是程序方法的字符串表達式。而第三種可能略有爭議，就是撤徹底底用一種可以形容別的語言的系統來生成目標語言。而元編程的目的嘛，自然是更加簡單優美地解決問題啦。元編程這話題本來就博大精深，我可不敢說我很明白，希望觀者掂量着看這些文字吧。</p>

<p>下面就進入正題。我不會在下文中概括所有有關 Python 的元編程方法，而是通過一個我最近遇到的實例來說明兩件事：元編程跟原子彈都姓 Yuan，它們都很強大；Python 的動態和優美賦予其元編程的能力。</p>

<p>前不久我因工作，需要寫一個腳本來訪問某私有 API，並把內容全部按照 json 結構錄入到數據庫中。接口大致上是這樣的類型：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http://abc.com/jsonrest/api/4.10/search_getRelatedVideos?x=aaa&amp;y=bbb
</span><span class="line">http://abc.com/jsonrest/api/4.10/search_getRelatedArticles?x=aaa&amp;y=bbb
</span><span class="line">http://abc.com/jsonrest/api/4.10/search_getRelatedTopics?x=aaa&amp;y=bbb</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>問題就在於，我要如何做才能簡單而優美地寫一個 API wrapper。這個 wrapper 要可以做到這樣：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">related_articles</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">search_getRelatedArticles</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">aaa</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">bbb</span><span class="p">)</span>
</span><span class="line"><span class="n">related_topics</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">search_getRelatedTopics</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">aaa</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">bbb</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而且最好我都不需要一個一個地去實現相應的方法，因爲一旦需要呼叫新的 API，我又必须再添加一個個新的方法。所以我最好可以隨意地寫，wrapper 則幫我生成新方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># 假设 `calculate_getUnrelatedMusic()` 是個新 API 呼叫方法</span>
</span><span class="line"><span class="n">unrelated_musics</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">calculate_getUnrelatedMusic</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">aaa</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">bbb</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="n">ccc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其實說到這裏，我想很多老 Python 程序員應該是想到我要用的「神奇方法」了。沒錯，就是 <code>__getattr__(self, name)</code>。Python 會在找不到所呼叫的 attribute 的時候來調用這個方法。這不正是我想要的嘛，我只要截獲這個方法的邏輯就可以動態生成 API 調用方法了。所以解決方案一下子變得很簡單：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">ABCAPI</span><span class="p">:</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;ABC API wrapper&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="c"># 初始化，很常規</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">accesskey</span><span class="p">,</span> <span class="n">sharedsecret</span><span class="p">,</span> <span class="n">server</span><span class="o">=</span><span class="s">&#39;abc.com&#39;</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&#39;4.10&#39;</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">accesskey</span> <span class="o">=</span> <span class="n">accesskey</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">sharedsecret</span> <span class="o">=</span> <span class="n">sharedsecret</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="n">server</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">version</span> <span class="o">=</span> <span class="n">version</span>
</span><span class="line">
</span><span class="line">    <span class="c"># 這個方法是今天的主角。局部變量 name 就是我們上面所提到的 `search_getRelatedArticles`</span>
</span><span class="line">    <span class="c"># 之類的方法名。而方法裏的那些參數都會被 `**params` 拿進來。這種寫法有關閉包，不在本文</span>
</span><span class="line">    <span class="c"># 討論範疇裏。</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;Get API Call&quot;&quot;&quot;</span>
</span><span class="line">        <span class="c"># 進了方法先判斷下方法名是不是`__`開頭，只要是就拋異常，這樣 `__getattr__()` 就不會</span>
</span><span class="line">        <span class="c"># 失去原有的行爲模式，即保護私有變量或方法。</span>
</span><span class="line">        <span class="k">if</span> <span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">):</span>
</span><span class="line">            <span class="k">raise</span> <span class="ne">AttributeError</span><span class="p">,</span> <span class="n">name</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">def</span> <span class="nf">caller</span><span class="p">(</span><span class="o">**</span><span class="n">params</span><span class="p">):</span>
</span><span class="line">                <span class="c"># 构建 API URL 的所有东西都在这儿了，这需要按照一定规律把这些材料组建成合法 URL</span>
</span><span class="line">                <span class="n">url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">construct_api_url</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">                <span class="c"># 呼叫刚刚构建好的 URL 并返回结果</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">call_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="n">caller</span>
</span><span class="line">
</span><span class="line">    <span class="c">#...</span>
</span><span class="line">    <span class="c"># other utility methods for building the api url and calling the api</span>
</span><span class="line">    <span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上就是我认为很优美的解决方案，短小精悍。然而这种用法并没有在我上文提到的那個有關「神奇方法」的文檔裏提及。所以在參考的時候請開動腦筋，不要侷限在作者的框框裏。你可以拿它們來做很多意想不到的事情。</p>

<p>那最後我的這種實現方式到底屬於上文提到的哪種元編程實現方式呢？留作思考題吧～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[簡單粗暴解決 Zsh Home 和 End 按鍵問題]]></title>
    <link href="https://conanblog.me/blog/linux/unix/zsh/hack/2012/08/20/resolve-zsh-home-and-end-key-problem/"/>
    <updated>2012-08-20T22:21:00-04:00</updated>
    <id>https://conanblog.me/blog/linux/unix/zsh/hack/2012/08/20/resolve-zsh-home-and-end-key-problem</id>
    <content type="html"><![CDATA[<p>記得剛來美國那會兒，有一次在地鐵裏聽到兩位老太太聊關於手機待機時間短的話題，當中一個老太太勸另一個老太太說去找客服「Go talk to them. Don’t settle.」這句話很大程度上概括了美國人的生活態度 —— 不妥協，有不滿就去解決。這種思想對 Hack 文化也有着潛移默化的影響，用中國人的話說便是「折騰」。<!--more--></p>

<p>半年前我加入了 <code>Zsh</code> 的用戶陣營，一番配置後倒也用着挺爽。前幾天又去折騰 <code>.zshrc</code> 文件，更爽了，可是 <kbd>Home</kbd> 和 <kbd>End</kbd> 鍵工作得不正常了，就像這樣：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>H
</span><span class="line">git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>按完 <kbd>Home</kbd> 鍵就在我的命令裏加了一個 H 還換行，我居然就這樣「settle」了一段時間。今天實在忍不住，找解決方案。網上的解決方案很多，也有很成熟的，比如用 <code>autoload zkbd</code>
來問答式生成按鍵和含義對應表的，可我嫌麻煩。更大部分的解決方案只是放一堆配置文件代碼，而事實上這些代碼在不同環境下是不一樣的。所以換句話說這些代碼只是治標不治本，答者沒有授問者以漁。</p>

<p>問題的本身在 <code>bindkey</code> 上。也就是說只要找到對應的按鍵和 <code>Zsh</code> 內的含義接口就可以解決問題。而含義接口就是 <code>beginning-of-line</code> 和 <code>end-of-line</code>。所以只需要找到我們的按鍵碼是什麼就可以了。下面這個小技巧可能鮮爲人知，就是利用 <code>cat</code> 來查看按鍵碼。很簡單，在命令行下直接 <code>cat</code> + <kbd>回車</kbd>，然後接着按你想知道按鍵碼的按鍵，在我的例子裏就是 <kbd>Home</kbd> 鍵：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>cat
</span><span class="line">^<span class="o">[</span>OH
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接着我又得到了 <kbd>End</kbd> 鍵的按鍵碼。最後在 <code>.zshrc</code> 裏添加兩行代碼：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bindkey <span class="s2">&quot;^[OH&quot;</span> beginning-of-line
</span><span class="line">bindkey <span class="s2">&quot;^[OF&quot;</span> end-of-line
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>問題解決，簡單粗暴，但直截了當。Don’t settle. Happy hacking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於編程，對我最有用的建議]]></title>
    <link href="https://conanblog.me/blog/programming/zen/2012/08/20/the-best-programming-advice-i-ever-got/"/>
    <updated>2012-08-20T15:58:00-04:00</updated>
    <id>https://conanblog.me/blog/programming/zen/2012/08/20/the-best-programming-advice-i-ever-got</id>
    <content type="html"><![CDATA[<p>關於編程，其實具體用什麼技術並不重要，很多時候是思想或方法決定了效率。今天我讀到一篇帖子：<a href="http://www.informit.com/promotions/promotion.aspx?promo=138930">“The Best Programming Advice I Ever Got”</a>，這些建議都是影響着這些業界精英們的職業生涯的，感覺對我很有用，於是在這裏做一個整理。<!--more--></p>

<ul>
  <li>
    <p>「寫更少的代碼。」不要覺得寫很多代碼來修補一個 bug 是一件很光榮的事情，有時問題的關鍵只是多餘的一行代碼，刪除即可。寫更多的代碼只會增加維護成本。可以少寫代碼就少寫。</p>
  </li>
  <li>
    <p>「在動手修改代碼前，先仔細理解報錯。」這一點看起來是廢話，但是我自己也好、別人也好，都多多少少犯過這樣的錯誤。原因很簡單，因爲人們寫代碼的時候很多是在壓力下完成的，比如要在下班前完成某個功能，或者在這禮拜前完成教授佈置的編程作業。所以經常就有人在沒有理解報錯的情況下枉自猜測着
debug。結果是反而浪費了很多時間在無用地猜測和推理上。這種現象在新手身上尤爲顯著，這裏的新手跟你寫程序的時間沒有關係，我雖然寫了十餘年程序，但對 Lisp 這門語言來說我仍然是新手。</p>
  </li>
  <li>
    <p>「讀多於寫，只讀高質量的書籍，一直更新知識庫。」程序員，尤其是老程序員，會傾向與專攻一項技術。當知識水平滿足了現在的工作需求的時候，一些人可能會停止繼續學習。這樣的程序員往往會遇到以下的情況：比如他是 C++ 程序員，兩年後再看別人新寫的 C++  代碼，可能會很不能理解。因爲他們的知識體系老化了。技術也是隨着摩爾定律一起發展的。所以當你完成了四年的大學，你已經有一半的知識快要淘汰。所以，繼續學習，學習更好更新的知識。</p>
  </li>
  <li>
    <p>「學習新的知識，要從更小的切入點進入。」學習新的知識對於程序員來說可以說是家常便飯，可是學得效果是好是壞往往因人而異。導致這種差異的原因有很多，但是我認爲這一點非常關鍵。很多人在學習一個新技術或編程語言的時候偏向於廣泛地學習。事實上這並無助於你對知識的掌握和理解；相反，如果縮小切入點，你能夠學得更好。比如不是學習 JavaScript 一整本厚厚的書，而是學習 JavaScript 的語義學。這樣學習的知識相對少，但是足夠深入；深入之後逐漸會使你學到更廣泛的其他相關知識。這樣你自然能比別人學得好。這也就能解釋爲什麼有些人能夠在短短幾年內成長爲某領域的專家。</p>
  </li>
  <li>
    <p>「以後別碰別人的代碼。」必須在此聲明，<strong>這不是個好建議；相反，你應該更加積極地團隊合作，讓權利鬥爭、包幹領域和理讓得體去見鬼</strong>。事實上這個建議是作者早年在一個大企業裏做的時候某個上司給他的。因爲他私自修改了別人的代碼而帶來了很多人際關係上的麻煩。我覺得這個很大程度上跟企業文化有關係。我相信程序員們都是或多或少有 Hacker 情懷的，所以自由開放的工作環境才是適合我們的。遇到這樣的公司，無論薪資怎樣，都請跳槽吧，這樣的企業不值得你在那裏浪費青春。</p>
  </li>
  <li>
    <p>「debug 前先深入思考。」這一點跟上面的第二點很像。但是作者在文章中提到了在腦中建立模型，深入地理解 bug，這往往不僅可以讓你很快能夠解決局部的 bug，你甚至還能預見更高層次的 bug。</p>
  </li>
  <li>
    <p>「你要重構代碼，你要 TDD」。代碼重構的目的就在於最大程度地使代碼能夠被重用，要做到這一點，最佳方式是銘記「一個 function 只做一件事，並且把這件事做好」。重構後的代碼通常更加短小便於理解，而且小巧的 function debug 起來也更加方便。其二就是你要貫徹 TDD (Test Driven Design/Development)。筆者一度是 TDD 的反對者，因爲我覺得它太麻煩，浪費了太多時間。而事實上，TDD
恰好可以幫助你節省很多時間。此話怎講？當系統越來越複雜時，任何一個模塊的小變動都有可能引起系統其他部分出錯，那這個時候你可能就需要深入到各個可能出錯的地方尋找癥結。但是如果之前你是一直做 Test 的，那任何新加的模塊或是修改的模塊，只要跑了 Test Suite 你就知道哪兒有問題，而不是等到 release 了，等用戶來給你反饋哪兒哪兒有問題。</p>
  </li>
  <li>
    <p>「重用之前先確保代碼能用」。其實我認爲這是「不要過早重構」的另一種說法。首先你代碼還不能滿足功用的時候你是不知道哪些東西是要擴展的哪些是要重用的。其次如果過早重構很可能讓你一直停滯不前。</p>
  </li>
</ul>

<p>我在總結的時候就已經對以上的好多條深有共鳴了，這些確確實實對我的工作很有幫助。如果還沒有共鳴那恐怕也只是時間問題吧。</p>

<p>最後我也來分享一下對我一直有深遠影響的建議：「70% 思考，30% 做」。</p>
]]></content>
  </entry>
  
</feed>

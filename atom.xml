<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[conan@notes:~/]]></title>
  <link href="http://ConanChou.github.com/atom.xml" rel="self"/>
  <link href="http://ConanChou.github.com/"/>
  <updated>2012-09-01T17:29:24-04:00</updated>
  <id>http://ConanChou.github.com/</id>
  <author>
    <name><![CDATA[Conan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 調優筆記·理性主義調優]]></title>
    <link href="http://ConanChou.github.com/blog/Python/Optimization/Serial/Programming/2012/08/26/python-optimization-3-disassembling/"/>
    <updated>2012-08-26T00:10:00-04:00</updated>
    <id>http://ConanChou.github.com/blog/Python/Optimization/Serial/Programming/2012/08/26/python-optimization-3-disassembling</id>
    <content type="html"><![CDATA[<p><a href="http://conanchou.github.com/blog/Optimization/Programming/Python/Serial/2012/07/25/python-optimization-2-profiling/">上次</a>我們學會了如何使用造影工具，使用它們的目的自然是設法找到代碼「慢」的理由。不過在上次的博文裏對於那段代碼慢的分析也是建立在我們有一定經驗的基礎上的。那我們總有第一次，如果第一次我們碰到這樣的瓶頸我們是不是就不知道該如何優化了呢？答案顯然是否定的。計算機作爲一門人造科學，可以說是完全在數學和邏輯的基礎上堆砌起來的，是完全可以推導出問題出在哪裏的（題外話，我認爲後者也屬於前者，可是聯合國教科文組織卻把它們分開了）。本篇博文就是要說如何在無經驗狀態下找到癥結。我稱之爲「理性主義調優」，當然這裏只指代碼級別的調優。（理性主義相對於經驗主義，是兩個相對的哲學流派。）<!--more--></p>

<p>我們要做的第一步就是學會使用代碼造影，上次我們討論的幾個工具並不是你每次每個都要使用，但是先做大範圍的模塊造影，再做有針對性的行造影是造影的常規步驟。</p>

<p>經過上面的第一步，我們會得到一組有問題的代碼。能直接解決的可以直接解決，不能直接找到原因的就是下面我重點要講的了。因爲 Python 是相對很高級的語言，很多底層細節會被隱藏掉，這從某種程度上加大了找出癥結的難度。換句話說，只要能夠摸清楚某行有問題的代碼到底怎麼執行的，那基本也就能夠推導出問題所在了。所以「理性主義調優」的問題就被簡化爲「如何弄懂代碼到底幹什麼」的問題。</p>

<p>爲此去讀長篇的文檔當然算是一個辦法，很學院派，但是並不是很高效。另一條路就是「Disassembling」，有 C 背景的同學多半是聽過這個詞的。說白了，就是把程序執行時在內存裏的每一步操作都打印出來，以供分析。（如果對此不瞭解的同學可以到我翻譯的開源文集<a href="http://www.conanblog.me/Unix-as-IDE-CN/html/compiling.html#id3">相關章節</a>學習）其實 Python 也可以 Disassembling，不過這和 C 的有些區別。因爲我們知道 Python 在運行時，其機制和 Java 是類似的，都是從源碼到字節碼，即
bytecode，而非二進制碼（binary code）；然後再把字節碼放在虛擬機裏運行。所以 Python 裏面的 Disassembling 其實是字節碼層面的。下面用到的工具就來自 Python 自帶的 <code><span class="CodeRay">dis</span></code>。</p>

<p>我們繼續之前的<a href="https://raw.github.com/ianozsvald/HighPerformancePython_PyCon2012/master/mandelbrot/pure_python/pure_python_slow.py">代碼例子</a>，只是假設我們現在還不知道「慢」的原因。目前的狀況是我們知道了瓶頸在 <code><span class="CodeRay">calculate_z_serial_purepython()</span></code> 裏，並且通過行造影，我們知道 <code><span class="CodeRay">z[i] = z[i]*z[i] +q[i]</span></code> 花了很多时间。现在我们来 Disassembling：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pure_python_slow</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">pure_python_slow</span><span class="o">.</span><span class="n">calculate_z_serial_purepython</span><span class="p">)</span>
</span><span class="line"><span class="c"># 前略</span>
</span><span class="line">
</span><span class="line"> <span class="mi">32</span>     <span class="o">&gt;&gt;</span>   <span class="mi">90</span> <span class="n">SETUP_LOOP</span>              <span class="mi">86</span> <span class="p">(</span><span class="n">to</span> <span class="mi">179</span><span class="p">)</span>
</span><span class="line">             <span class="mi">93</span> <span class="n">LOAD_GLOBAL</span>              <span class="mi">1</span> <span class="p">(</span><span class="nb">range</span><span class="p">)</span>
</span><span class="line">             <span class="mi">96</span> <span class="n">LOAD_FAST</span>                <span class="mi">1</span> <span class="p">(</span><span class="n">maxiter</span><span class="p">)</span>
</span><span class="line">             <span class="mi">99</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">1</span>
</span><span class="line">            <span class="mi">102</span> <span class="n">GET_ITER</span>
</span><span class="line">        <span class="o">&gt;&gt;</span>  <span class="mi">103</span> <span class="n">FOR_ITER</span>                <span class="mi">72</span> <span class="p">(</span><span class="n">to</span> <span class="mi">178</span><span class="p">)</span>
</span><span class="line">            <span class="mi">106</span> <span class="n">STORE_FAST</span>               <span class="mi">5</span> <span class="p">(</span><span class="n">iteration</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"> <span class="mi">33</span>         <span class="mi">109</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class="line">            <span class="mi">112</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">115</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 z[i] 的值</span>
</span><span class="line">            <span class="mi">116</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class="line">            <span class="mi">119</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">122</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 z[i] 的值</span>
</span><span class="line">            <span class="mi">123</span> <span class="n">BINARY_MULTIPLY</span>                  <span class="c"># 計算 z[i]*z[i]</span>
</span><span class="line">            <span class="mi">124</span> <span class="n">LOAD_FAST</span>                <span class="mi">0</span> <span class="p">(</span><span class="n">q</span><span class="p">)</span>   <span class="c"># 載入 q</span>
</span><span class="line">            <span class="mi">127</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">130</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 q[i] 的值</span>
</span><span class="line">            <span class="mi">131</span> <span class="n">BINARY_ADD</span>                       <span class="c"># 計算 z[i]*z[i]+q[i]</span>
</span><span class="line">            <span class="mi">132</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class="line">            <span class="mi">135</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">138</span> <span class="n">STORE_SUBSCR</span>                     <span class="c"># 保存剛剛的計算結果進 z[i]</span>
</span><span class="line">
</span><span class="line"> <span class="mi">34</span>         <span class="mi">139</span> <span class="n">LOAD_GLOBAL</span>              <span class="mi">2</span> <span class="p">(</span><span class="nb">abs</span><span class="p">)</span> <span class="c"># 載入 abs 方法</span>
</span><span class="line">            <span class="mi">142</span> <span class="n">LOAD_FAST</span>                <span class="mi">2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span>   <span class="c"># 載入 z</span>
</span><span class="line">            <span class="mi">145</span> <span class="n">LOAD_FAST</span>                <span class="mi">4</span> <span class="p">(</span><span class="n">i</span><span class="p">)</span>   <span class="c"># 載入 i</span>
</span><span class="line">            <span class="mi">148</span> <span class="n">BINARY_SUBSCR</span>                    <span class="c"># 獲得 z[i]</span>
</span><span class="line">            <span class="mi">149</span> <span class="n">CALL_FUNCTION</span>            <span class="mi">1</span>       <span class="c"># 執行 abs 方法</span>
</span><span class="line">            <span class="mi">152</span> <span class="n">LOAD_CONST</span>               <span class="mi">6</span> <span class="p">(</span><span class="mf">2.0</span><span class="p">)</span> <span class="c"># 載入 2.0</span>
</span><span class="line">            <span class="mi">155</span> <span class="n">COMPARE_OP</span>               <span class="mi">4</span> <span class="p">(</span><span class="o">&gt;</span><span class="p">)</span>   <span class="c"># 將 abd 的執行結果和 2.0 比較</span>
</span><span class="line">            <span class="mi">158</span> <span class="n">POP_JUMP_IF_FALSE</span>      <span class="mi">103</span>       <span class="c"># 根據結果跳到 103</span>
</span><span class="line">
</span><span class="line"><span class="c"># 後略</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因爲我們已經將我們的注意力定在了這幾行，所以我略去了前後無關的內容。後面的註釋是我加的，說實話光是註釋就加得累死我了，那問題看來也很顯然了吧。太多重複調用了，非常不科學。</p>

<p>這裏對輸出的每一列的內容做一個介紹，以便理解，從左往右：</p>

<ol>
  <li>對應源碼的行號</li>
  <li>當前指令用 <code>--&gt;</code> 表示，上面的例子中沒有</li>
  <li>有標記的指令用 <code>&gt;&gt;</code> 表示</li>
  <li>指令地址</li>
  <li>指令名</li>
  <li>指令傳入參數</li>
  <li>解析參數後對應原程序裏的變量名、常量、分支目標和比較符號</li>
</ol>

<p>至於指令名的具體含義，請參考<a href="http://docs.python.org/library/dis.html#python-bytecode-instructions">官方文檔</a>。</p>

<p>以上便是「理性主義調優」。我想我必須強調，「過早優化」沒有好處。所以，use it wisely.</p>

<hr />

<p>本文是『Python 調優筆記』系列中的一篇，其它文章還有：</p>

<ul>
  <li><a href="http://localhost:4000/blog/Python/Optimization/Serial/Programming/2012/07/23/python-optimization-1/" title="Python 調優筆記·序">序，一切的開始</a></li>
  <li><a href="http://conanchou.github.com/blog/Optimization/Programming/Python/Serial/2012/07/25/python-optimization-2-profiling/" title=" Python 調優筆記·代碼造影">代碼造影，定位癥結</a></li>
  <li><a href="http://conanchou.github.com/blog/Python/Optimization/Serial/Programming/2012/08/26/python-optimization-3-disassembling/" title="Python 調優筆記·理性主義調優">理性主義調優，一切從根本出發</a></li>
  <li><a href="localhost" title="Python 調優筆記·經驗主義調優">經驗主義調優，站在巨人的肩膀上</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用另一臺計算機寫 Octopress]]></title>
    <link href="http://ConanChou.github.com/blog/Octopress/Hack/2012/08/23/write-octopress-in-another-box/"/>
    <updated>2012-08-23T23:26:00-04:00</updated>
    <id>http://ConanChou.github.com/blog/Octopress/Hack/2012/08/23/write-octopress-in-another-box</id>
    <content type="html"><![CDATA[<p>用 Octopress 寫博客已經有幾天了，一直都在家裏的臺機上寫。今天想在我的小黑上寫點東西的時候我就只是把 Github 上所有的 branch <code>clone</code> 下來，裝了改裝的東西，可是折騰半天不能從小黑上發佈。去 doc 里面看了一下，也没有这方面的记录。於是決定刨根。<!--more--></p>

<p>Octopress 的運行機制很簡單，就是用類似 <code>make</code> 的 <code>rake</code> 將寫好的 <code>markdown</code> 文件轉化成 HTML 文件，皮膚什麼的都也一併生成好，然後再把生成好的一堆靜態文件 <code>push</code> 到 Github 或其他類似的地方。我想不能推送的話應該是可以從 Rakefile 裏找到答案。果不其然：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">mkdir</span> <span class="n">deploy_dir</span>
</span><span class="line"><span class="n">cd</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git init&quot;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;echo &#39;My Octopress Page is coming soon &amp;hellip;&#39; &gt; index.html&quot;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git add .&quot;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git commit -m </span><span class="se">\&quot;</span><span class="s2">Octopress init</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git branch -m gh-pages&quot;</span> <span class="k">unless</span> <span class="n">branch</span> <span class="o">==</span> <span class="s1">&#39;master&#39;</span>
</span><span class="line">  <span class="nb">system</span> <span class="s2">&quot;git remote add origin </span><span class="si">#{</span><span class="n">repo_url</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="n">rakefile</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line">  <span class="n">rakefile</span><span class="o">.</span><span class="n">sub!</span><span class="p">(</span><span class="sr">/deploy_branch(\s*)=(\s*)([&quot;&#39;])[\w-]*[&quot;&#39;]/</span><span class="p">,</span> <span class="s2">&quot;deploy_branch</span><span class="se">\\</span><span class="s2">1=</span><span class="se">\\</span><span class="s2">2</span><span class="se">\\</span><span class="s2">3</span><span class="si">#{</span><span class="n">branch</span><span class="si">}</span><span class="se">\\</span><span class="s2">3&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="n">rakefile</span><span class="o">.</span><span class="n">sub!</span><span class="p">(</span><span class="sr">/deploy_default(\s*)=(\s*)([&quot;&#39;])[\w-]*[&quot;&#39;]/</span><span class="p">,</span> <span class="s2">&quot;deploy_default</span><span class="se">\\</span><span class="s2">1=</span><span class="se">\\</span><span class="s2">2</span><span class="se">\\</span><span class="s2">3push</span><span class="se">\\</span><span class="s2">3&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="n">rakefile</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很顯然，這個 <code>deploy_dir</code> 也是一個單獨的 git 目錄。追溯其根源，也就是默認設置，就是 「_deploy」 目錄。而這個目錄是被 「.gitignore」 排除的。這就難怪爲什麼單純的 <code>clone</code> 沒法工作了。于是完整的 <code>clone</code> 过程如下（包含註解）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>;: go to the dir you want to put your octopress repo
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ~/Documents
</span><span class="line"><span class="nv">$ </span>;: clone repo from your exists octopress repo
</span><span class="line"><span class="nv">$ </span>git clone git@github.com:ConanChou/conanchou.github.com.git octopress
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>octopress
</span><span class="line"><span class="nv">$ </span>;: get the <span class="nb">source </span>branch
</span><span class="line"><span class="nv">$ </span>git checkout -b origin/source <span class="nb">source</span>
</span><span class="line"><span class="nv">$ </span>;: add original octopress repo to remote <span class="k">for </span>updates
</span><span class="line"><span class="nv">$ </span>git remote add octopress https://github.com/imathis/octopress.git
</span><span class="line"><span class="nv">$ </span>;: clone the master branch to _deploy dir
</span><span class="line"><span class="nv">$ </span>git clone git@github.com:ConanChou/conanchou.github.com.git _deploy
</span><span class="line"><span class="nv">$ </span>;: install bundles
</span><span class="line"><span class="nv">$ </span>gem install bundler
</span><span class="line"><span class="nv">$ </span>bundle install
</span><span class="line"><span class="nv">$ </span>rake install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Python 的「神奇方法」元編程]]></title>
    <link href="http://ConanChou.github.com/blog/Python/Programming/2012/08/21/python-metaprogramming-with-magic-methods/"/>
    <updated>2012-08-21T22:41:00-04:00</updated>
    <id>http://ConanChou.github.com/blog/Python/Programming/2012/08/21/python-metaprogramming-with-magic-methods</id>
    <content type="html"><![CDATA[<p>在開始聊這個話題前，我覺得有必要先簡單說說這兩個概念：「神奇方法」和「元編程」。</p>

<p>什麼是「神奇方法」？其實是我亂翻譯的，英文中大家叫它們「Magic Methods」。我沒有在靜態語言中聽到過這個概念，只在 Python、PHP 這類動態語言中聽到。這是一類比較特殊的方法（Method/Function），是隨語言本身所故有的，在程序中無聲無息地起到作用。它們的命名方式都很特別，比如在 Python 中就是用<code>__</code>開頭用<code>__</code>結尾的方法，而在 PHP
中則是類似地用<code>__</code>開頭的方法。<!--more-->說他們默默無聞一點不假，因爲正常編程的過程中較少的跟它們打交道，就連官方的文檔都只是用只言片語描述了下，以示存在。然而它們非常重要。幸好有一些熱心人做了<a href="http://www.rafekettler.com/magicmethods.html">一份較爲詳細的文檔</a>可作參考。</p>

<p>「元編程」的概念並不新鮮，簡單而廣義地說就是語言本身可以在運行時被修改或可以增量編譯，那麼我們就可以使用該語言進行元編程。而要實現上述功能，語言本身就需要有反射或者泛型編程的語言特性。這術語聽起來很嚇人，但其實說具體如何實踐就不嚇人了。根據維基百科，實現元編程可以有三種方法。一是語言本身暴露一些本身運行時的 API，然後我們可以通過對調教 API
來實現元編程。二是語言本身可以動態地執行一些本身是程序方法的字符串表達式。而第三種可能略有爭議，就是撤徹底底用一種可以形容別的語言的系統來生成目標語言。而元編程的目的嘛，自然是更加簡單優美地解決問題啦。元編程這話題本來就博大精深，我可不敢說我很明白，希望觀者掂量着看這些文字吧。</p>

<p>下面就進入正題。我不會在下文中概括所有有關 Python 的元編程方法，而是通過一個我最近遇到的實例來說明兩件事：元編程跟原子彈都姓 Yuan，它們都很強大；Python 的動態和優美賦予其元編程的能力。</p>

<p>前不久我因工作，需要寫一個腳本來訪問某私有 API，並把內容全部按照 json 結構錄入到數據庫中。接口大致上是這樣的類型：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http://abc.com/jsonrest/api/4.10/search_getRelatedVideos?x=aaa&amp;y=bbb
</span><span class="line">http://abc.com/jsonrest/api/4.10/search_getRelatedArticles?x=aaa&amp;y=bbb
</span><span class="line">http://abc.com/jsonrest/api/4.10/search_getRelatedTopics?x=aaa&amp;y=bbb</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>問題就在於，我要如何做才能簡單而優美地寫一個 API wrapper。這個 wrapper 要可以做到這樣：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">related_articles</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">search_getRelatedArticles</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">aaa</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">bbb</span><span class="p">)</span>
</span><span class="line"><span class="n">related_topics</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">search_getRelatedTopics</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">aaa</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">bbb</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而且最好我都不需要一個一個地去實現相應的方法，因爲一旦需要呼叫新的 API，我又必须再添加一個個新的方法。所以我最好可以隨意地寫，wrapper 則幫我生成新方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># 假设 `calculate_getUnrelatedMusic()` 是個新 API 呼叫方法</span>
</span><span class="line"><span class="n">unrelated_musics</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">calculate_getUnrelatedMusic</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">aaa</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">bbb</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="n">ccc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其實說到這裏，我想很多老 Python 程序員應該是想到我要用的「神奇方法」了。沒錯，就是 <code>__getattr__(self, name)</code>。Python 會在找不到所呼叫的 attribute 的時候來調用這個方法。這不正是我想要的嘛，我只要截獲這個方法的邏輯就可以動態生成 API 調用方法了。所以解決方案一下子變得很簡單：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">ABCAPI</span><span class="p">:</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;ABC API wrapper&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="c"># 初始化，很常規</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">accesskey</span><span class="p">,</span> <span class="n">sharedsecret</span><span class="p">,</span> <span class="n">server</span><span class="o">=</span><span class="s">&#39;abc.com&#39;</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&#39;4.10&#39;</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">accesskey</span> <span class="o">=</span> <span class="n">accesskey</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">sharedsecret</span> <span class="o">=</span> <span class="n">sharedsecret</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">server</span> <span class="o">=</span> <span class="n">server</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">version</span> <span class="o">=</span> <span class="n">version</span>
</span><span class="line">
</span><span class="line">    <span class="c"># 這個方法是今天的主角。局部變量 name 就是我們上面所提到的 `search_getRelatedArticles`</span>
</span><span class="line">    <span class="c"># 之類的方法名。而方法裏的那些參數都會被 `**params` 拿進來。這種寫法有關閉包，不在本文</span>
</span><span class="line">    <span class="c"># 討論範疇裏。</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&quot;&quot;&quot;Get API Call&quot;&quot;&quot;</span>
</span><span class="line">        <span class="c"># 進了方法先判斷下方法名是不是`__`開頭，只要是就拋異常，這樣 `__getattr__()` 就不會</span>
</span><span class="line">        <span class="c"># 失去原有的行爲模式，即保護私有變量或方法。</span>
</span><span class="line">        <span class="k">if</span> <span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">):</span>
</span><span class="line">            <span class="k">raise</span> <span class="ne">AttributeError</span><span class="p">,</span> <span class="n">name</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">def</span> <span class="nf">caller</span><span class="p">(</span><span class="o">**</span><span class="n">params</span><span class="p">):</span>
</span><span class="line">                <span class="c"># 构建 API URL 的所有东西都在这儿了，这需要按照一定规律把这些材料组建成合法 URL</span>
</span><span class="line">                <span class="n">url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">construct_api_url</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">                <span class="c"># 呼叫刚刚构建好的 URL 并返回结果</span>
</span><span class="line">                <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">call_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="n">caller</span>
</span><span class="line">
</span><span class="line">    <span class="c">#...</span>
</span><span class="line">    <span class="c"># other utility methods for building the api url and calling the api</span>
</span><span class="line">    <span class="c">#...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上就是我认为很优美的解决方案，短小精悍。然而这种用法并没有在我上文提到的那個有關「神奇方法」的文檔裏提及。所以在參考的時候請開動腦筋，不要侷限在作者的框框裏。你可以拿它們來做很多意想不到的事情。</p>

<p>那最後我的這種實現方式到底屬於上文提到的哪種元編程實現方式呢？留作思考題吧～</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[簡單粗暴解決 Zsh Home 和 End 按鍵問題]]></title>
    <link href="http://ConanChou.github.com/blog/Linux/Unix/Zsh/Hack/2012/08/20/resolve-zsh-home-and-end-key-problem/"/>
    <updated>2012-08-20T22:21:00-04:00</updated>
    <id>http://ConanChou.github.com/blog/Linux/Unix/Zsh/Hack/2012/08/20/resolve-zsh-home-and-end-key-problem</id>
    <content type="html"><![CDATA[<p>記得剛來美國那會兒，有一次在地鐵裏聽到兩位老太太聊關於手機待機時間短的話題，當中一個老太太勸另一個老太太說去找客服「Go talk to them. Don’t settle.」這句話很大程度上概括了美國人的生活態度 —— 不妥協，有不滿就去解決。這種思想對 Hack 文化也有着潛移默化的影響，用中國人的話說便是「折騰」。<!--more--></p>

<p>半年前我加入了 <code>Zsh</code> 的用戶陣營，一番配置後倒也用着挺爽。前幾天又去折騰 <code>.zshrc</code> 文件，更爽了，可是 <kbd>Home</kbd> 和 <kbd>End</kbd> 鍵工作得不正常了，就像這樣：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>H
</span><span class="line">git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>按完 <kbd>Home</kbd> 鍵就在我的命令裏加了一個 H 還換行，我居然就這樣「settle」了一段時間。今天實在忍不住，找解決方案。網上的解決方案很多，也有很成熟的，比如用 <code>autoload zkbd</code>
來問答式生成按鍵和含義對應表的，可我嫌麻煩。更大部分的解決方案只是放一堆配置文件代碼，而事實上這些代碼在不同環境下是不一樣的。所以換句話說這些代碼只是治標不治本，答者沒有授問者以漁。</p>

<p>問題的本身在 <code>bindkey</code> 上。也就是說只要找到對應的按鍵和 <code>Zsh</code> 內的含義接口就可以解決問題。而含義接口就是 <code>beginning-of-line</code> 和 <code>end-of-line</code>。所以只需要找到我們的按鍵碼是什麼就可以了。下面這個小技巧可能鮮爲人知，就是利用 <code>cat</code> 來查看按鍵碼。很簡單，在命令行下直接 <code>cat</code> + <kbd>回車</kbd>，然後接着按你想知道按鍵碼的按鍵，在我的例子裏就是 <kbd>Home</kbd> 鍵：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>cat
</span><span class="line">^<span class="o">[</span>OH
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接着我又得到了 <kbd>End</kbd> 鍵的按鍵碼。最後在 <code>.zshrc</code> 裏添加兩行代碼：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bindkey <span class="s2">&quot;^[OH&quot;</span> beginning-of-line
</span><span class="line">bindkey <span class="s2">&quot;^[OF&quot;</span> end-of-line
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>問題解決，簡單粗暴，但直截了當。Don’t settle. Happy hacking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於編程，對我最有用的建議]]></title>
    <link href="http://ConanChou.github.com/blog/Programming/Zen/2012/08/20/the-best-programming-advice-i-ever-got/"/>
    <updated>2012-08-20T15:58:00-04:00</updated>
    <id>http://ConanChou.github.com/blog/Programming/Zen/2012/08/20/the-best-programming-advice-i-ever-got</id>
    <content type="html"><![CDATA[<p>關於編程，其實具體用什麼技術並不重要，很多時候是思想或方法決定了效率。今天我讀到一篇帖子：<a href="http://www.informit.com/promotions/promotion.aspx?promo=138930">“The Best Programming Advice I Ever Got”</a>，這些建議都是影響着這些業界精英們的職業生涯的，感覺對我很有用，於是在這裏做一個整理。<!--more--></p>

<ul>
  <li>
    <p>「寫更少的代碼。」不要覺得寫很多代碼來修補一個 bug 是一件很光榮的事情，有時問題的關鍵只是多餘的一行代碼，刪除即可。寫更多的代碼只會增加維護成本。可以少寫代碼就少寫。</p>
  </li>
  <li>
    <p>「在動手修改代碼前，先仔細理解報錯。」這一點看起來是廢話，但是我自己也好、別人也好，都多多少少犯過這樣的錯誤。原因很簡單，因爲人們寫代碼的時候很多是在壓力下完成的，比如要在下班前完成某個功能，或者在這禮拜前完成教授佈置的編程作業。所以經常就有人在沒有理解報錯的情況下枉自猜測着 debug。結果是反而浪費了很多時間在無用地猜測和推理上。這種現象在新手身上尤爲顯著，這裏的新手跟你寫程序的時間沒有關係，我雖然寫了10年程序，但對 Lisp 這門語言來說我仍然是新手。</p>
  </li>
  <li>
    <p>「讀多於寫，只讀高質量的書籍，一直更新知識庫。」程序員，尤其是老程序員，會傾向與專攻一項技術。當知識水平滿足了現在的工作需求的時候，一些人可能會停止繼續學習。這樣的程序員往往會遇到以下的情況：比如他是 C++ 程序員，兩年後再看別人新寫的 C++  代碼，可能會很不能理解。因爲他們的知識體系老化了。技術也是隨着摩爾定律一起發展的。所以當你完成了四年的大學，你已經有一半的知識快要淘汰。所以，繼續學習，學習更好更新的知識。</p>
  </li>
  <li>
    <p>「學習新的知識，要從更小的切入點進入。」學習新的知識對於程序員來說可以說是家常便飯，可是學得效果是好是壞往往因人而異。導致這種差異的原因有很多，但是我認爲這一點非常關鍵。很多人在學習一個新技術或編程語言的時候偏向於廣泛地學習。事實上這並無助於你對知識的掌握和理解；相反，如果縮小切入點，你能夠學得更好。比如不是學習 JavaScript 一整本厚厚的書，而是學習 JavaScript 的語義學。這樣學習的知識相對少，但是足夠深入；深入之後逐漸會使你學到更廣泛的其他相關知識。這樣你自然能比別人學得好。這也就能解釋爲什麼有些人能夠在短短幾年內成長爲某領域的專家。</p>
  </li>
  <li>
    <p>「以後別碰別人的代碼。」必須在此聲明，<strong>這不是個好建議；相反，你應該更加積極地團隊合作，讓權利鬥爭、包幹領域和理讓得體去見鬼</strong>。事實上這個建議是作者早年在一個大企業裏做的時候某個上司給他的。因爲他私自修改了別人的代碼而帶來了很多人際關係上的麻煩。我覺得這個很大程度上跟企業文化有關係。我相信程序員們都是或多或少有 Hacker 情懷的，所以自由開放的工作環境才是適合我們的。遇到這樣的公司，無論薪資怎樣，都請跳槽吧，這樣的企業不值得你在那裏浪費青春。</p>
  </li>
  <li>
    <p>「debug 前先深入思考。」這一點跟上面的第二點很像。但是作者在文章中提到了在腦中建立模型，深入地理解 bug，這往往不僅可以讓你很快能夠解決局部的 bug，你甚至還能預見更高層次的 bug。</p>
  </li>
  <li>
    <p>「你要重構代碼，你要 TDD」。代碼重構的目的就在於最大程度地使代碼能夠被重用，要做到這一點，最佳方式是銘記「一個 function 只做一件事，並且把這件事做好」。重構後的代碼通常更加短小便於理解，而且小巧的 function debug 起來也更加方便。其二就是你要貫徹 TDD (Test Driven Design/Development)。筆者一度是 TDD 的反對者，因爲我覺得它太麻煩，浪費了太多時間。而事實上，TDD
恰好可以幫助你節省很多時間。此話怎講？當系統越來越複雜時，任何一個模塊的小變動都有可能引起系統其他部分出錯，那這個時候你可能就需要深入到各個可能出錯的地方尋找癥結。但是如果之前你是一直做 Test 的，那任何新加的模塊或是修改的模塊，只要跑了 Test Suite 你就知道哪兒有問題，而不是等到 release 了，等用戶來給你反饋哪兒哪兒有問題。</p>
  </li>
  <li>
    <p>「重用之前先確保代碼能用」。其實我認爲這是「不要過早重構」的另一種說法。首先你代碼還不能滿足功用的時候你是不知道哪些東西是要擴展的哪些是要重用的。其次如果過早重構很可能讓你一直停滯不前。</p>
  </li>
</ul>

<p>我在總結的時候就已經對以上的好多條深有共鳴了，這些確確實實對我的工作很有幫助。如果還沒有共鳴那恐怕也只是時間問題吧。</p>

<p>最後我也來分享一下對我一直有深遠影響的建議：「70% 思考，30% 做」。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 調優筆記·代碼造影]]></title>
    <link href="http://ConanChou.github.com/blog/Optimization/Programming/Python/Serial/2012/07/25/python-optimization-2-profiling/"/>
    <updated>2012-07-25T00:14:00-04:00</updated>
    <id>http://ConanChou.github.com/blog/Optimization/Programming/Python/Serial/2012/07/25/python-optimization-2-profiling</id>
    <content type="html"><![CDATA[<p>在序中，我提到了熱門語言的運行速度比較，比較效率的前提是 benchmark 程序的質量必須相當。這也就是說，優化運行速度、比別人的跑得快，前提是你的代碼也足夠好。足夠好自然是沒有個標準，不過我認爲，效率高的代碼必須是將瓶頸消除化，或者說是將瓶頸代碼拉得越快越好。經驗再老道的程序員也有可能沒法看出代碼瓶頸的時候。這個時候我們就需要利用一些工具來幫助我們檢查代碼，看看每個部分的運行時長，這便是 Profiling，我用醫學詞彙來說便是「代碼造影」。<!-- more --></p>

<p>Python 是自帶造影工具的，從 <a href="http://docs.python.org/library/profile.html">官方文檔</a> 看，有三款。但是一款太慢（profile），一款欠維護（hotshot），所以只剩下 cProfile 可用。爲了演示方便，我必須找一個不大不複雜又 CPU intensive 的小程序。於是我找來了 Ian Ozsvald 在 PyCon 上使用的案例 —— 一個畫分形的 <a href="https://raw.github.com/ianozsvald/HighPerformancePython_PyCon2012/master/mandelbrot/pure_python/pure_python_slow.py">小腳本</a>。</p>

<p>我們不妨先來運行一下該腳本：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>python pure_python_slow.py
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>運行結果是會生成這張圖片：</p>

<p><img src="https://public.blu.livefilestore.com/y1pn9Ob0P_ELpnDR_BxhnQc9bjmo0F8y1gz4qudepNB2yt5xpJba35Q_fJmBdGT1TDqCszaOgh2-U_5WkHYh4ldTQ/fractal.png?psid=1" alt="分形" title="分形" /></p>

<p>命令行下的運行結果輸出則是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">Main took 0:00:17.247938
</span><span class="line">Total sum of elements <span class="o">(</span><span class="k">for </span>validation<span class="o">)</span>: 1148485
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面我們來用 cProfile 看看哪些地方用的時間比較長：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>python -m cProfile -o rep.prof pure_python_slow.py
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用這種方法可以對整個腳本進行 profiling，然後把結果輸出到 <code>rep.prof</code> 中。當然對於一些較大的項目，這麼做是不恰當的，因爲一些大的項目往往有人機交互，所以使用這樣的方式來獲取運行時長顯然不可行。所以 <code>cProfile</code> 也提供了 function 方式的調用，也就是說可以在代碼裏使用它。而事實上官網的文檔就是這樣用的。使用 Django
的同學可以試試<a href="http://djangosnippets.org/snippets/727/">這樣的代碼</a>。</p>

<p>接着我們來分析一下所得的 profile，在與生成的 profile 文件同目錄下打開 Python 交互命令行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">pstats</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">pstats</span><span class="o">.</span><span class="n">Stats</span><span class="p">(</span><span class="s">&#39;rep.prof&#39;</span><span class="p">)</span>
</span><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="o">.</span><span class="n">sort_stats</span><span class="p">(</span><span class="s">&#39;cumulative&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">print_stats</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="n">Sun</span> <span class="n">May</span> <span class="mi">13</span> <span class="mi">20</span><span class="p">:</span><span class="mi">12</span><span class="p">:</span><span class="mi">47</span> <span class="mi">2012</span>    <span class="n">rep</span><span class="o">.</span><span class="n">prof</span>
</span><span class="line">
</span><span class="line">         <span class="mi">52166198</span> <span class="n">function</span> <span class="n">calls</span> <span class="p">(</span><span class="mi">52166197</span> <span class="n">primitive</span> <span class="n">calls</span><span class="p">)</span> <span class="ow">in</span> <span class="mf">20.844</span> <span class="n">seconds</span>
</span><span class="line">
</span><span class="line">   <span class="n">Ordered</span> <span class="n">by</span><span class="p">:</span> <span class="n">cumulative</span> <span class="n">time</span>
</span><span class="line">   <span class="n">List</span> <span class="n">reduced</span> <span class="kn">from</span> <span class="err">182</span> <span class="nn">to</span> <span class="err">10</span> <span class="nn">due</span> <span class="nn">to</span> <span class="nn">restriction</span> <span class="err">&lt;10&gt;</span>
</span><span class="line">
</span><span class="line">   <span class="n">ncalls</span>  <span class="n">tottime</span>  <span class="n">percall</span>  <span class="n">cumtime</span>  <span class="n">percall</span> <span class="n">filename</span><span class="p">:</span><span class="n">lineno</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.026</span>    <span class="mf">0.026</span>   <span class="mf">20.844</span>   <span class="mf">20.844</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">1</span><span class="p">(</span><span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.066</span>    <span class="mf">0.066</span>   <span class="mf">20.818</span>   <span class="mf">20.818</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">40</span><span class="p">(</span><span class="n">calc_pure_python</span><span class="p">)</span>
</span><span class="line">        <span class="mi">1</span>   <span class="mf">16.048</span>   <span class="mf">16.048</span>   <span class="mf">20.602</span>   <span class="mf">20.602</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">25</span><span class="p">(</span><span class="n">calculate_z_serial_purepython</span><span class="p">)</span>
</span><span class="line"> <span class="mi">51414419</span>    <span class="mf">3.588</span>    <span class="mf">0.000</span>    <span class="mf">3.588</span>    <span class="mf">0.000</span> <span class="p">{</span><span class="nb">abs</span><span class="p">}</span>
</span><span class="line">   <span class="mi">250001</span>    <span class="mf">0.966</span>    <span class="mf">0.000</span>    <span class="mf">0.966</span>    <span class="mf">0.000</span> <span class="p">{</span><span class="nb">range</span><span class="p">}</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.035</span>    <span class="mf">0.035</span>    <span class="mf">0.136</span>    <span class="mf">0.136</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">8</span><span class="p">(</span><span class="n">show</span><span class="p">)</span>
</span><span class="line">   <span class="mi">250001</span>    <span class="mf">0.042</span>    <span class="mf">0.000</span>    <span class="mf">0.042</span>    <span class="mf">0.000</span> <span class="n">pure_python_slow</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">14</span><span class="p">(</span><span class="o">&lt;</span><span class="n">genexpr</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.018</span>    <span class="mf">0.018</span>    <span class="mf">0.038</span>    <span class="mf">0.038</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">python2</span><span class="o">.</span><span class="mi">7</span><span class="o">/</span><span class="n">dist</span><span class="o">-</span><span class="n">packages</span><span class="o">/</span><span class="n">PIL</span><span class="o">/</span><span class="n">Image</span><span class="o">.</span><span class="n">py</span><span class="p">:</span><span class="mi">27</span><span class="p">(</span><span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class="line">      <span class="mi">3</span><span class="o">/</span><span class="mi">2</span>    <span class="mf">0.009</span>    <span class="mf">0.003</span>    <span class="mf">0.020</span>    <span class="mf">0.010</span> <span class="p">{</span><span class="nb">apply</span><span class="p">}</span>
</span><span class="line">        <span class="mi">1</span>    <span class="mf">0.000</span>    <span class="mf">0.000</span>    <span class="mf">0.019</span>    <span class="mf">0.019</span> <span class="p">{</span><span class="nb">__import__</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這裏我們可以看出，加了 <code>cProfile</code> 原來的程序會運行得略慢一些。這也是意料之中的。</p>

<p>下面我們來仔細看一下造影報告，也就是從第十一行開始的表格。
表格第一行是總時間，第二行是 <code>calc_pure_python</code> 所用時間，而第三行是 <code>calculate_z_serial_purepython</code> 所用時間，以此類推。從以上的這個表格我們至少可以判斷：大部分時間都花在了 <code>calculate_z_serial_purepython</code> 上。</p>

<p>可能這個表格並不是很直觀。那下面我再介紹一種更加直觀的方式 —— <code>runsnake</code>。我們回到命令行，用 <code>runsnake</code> 跑剛剛生成的造影文件（<code>rep.prof</code>）:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>runsnake res.prof
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>運行後你會看到這個窗口：</p>

<p><img src="https://xiil8w.blu.livefilestore.com/y1p-S46t388afLR5WALVXfzfgc36A_zh3jlEMbbjm3ouwkI1KEl7CRTPE8OS9mmtW7MZBCkujoUHT19OkiolKb1Dvd37IW8WMd-/runsnake.png?psid=1" alt="RunSnake 運行結果" title="RunSnake 運行結果" /></p>

<p>現在顯而易見了吧， <code>calculate_z_serial_purepython</code> 就是花時間最多的。可是到底是什麼使得它花這麼久，還是不能從上圖中找到原因。很顯然不是因爲 <code>&lt;abs&gt;</code> 和 <code>&lt;range&gt;</code>。于是我们定位到这个 function：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>function calculate_z_serial_purepython  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">calculate_z_serial_purepython</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">maxiter</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;Pure python with complex datatype, iterating over list of q and z&quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="c"># print out some progress info since it is so slow...</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&quot;</span><span class="si">%0.2f%%</span><span class="s"> complete&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">*</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">iteration</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxiter</span><span class="p">):</span>
</span><span class="line">            <span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mf">2.0</span><span class="p">:</span>
</span><span class="line">                <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">iteration</span>
</span><span class="line">                <span class="k">break</span>
</span><span class="line">    <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有經驗的 Python 程序員可能已經知道問題出在哪裏了，但是我先賣個關子。當然目的是爲了介紹下面的一個造影工具 —— <code>kernprof.py</code>，line profiling，行造影工具。</p>

<p>相比之下，使用 <code>kernprof.py</code> 略麻煩一點。你得在需要做“行造影”的 function 前面加一個 decorator <code>@profile</code>，然后运行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>kernprof.py -l -v pure_python_slow_lineprof.py
</span><span class="line"><span class="c">#...略去部分無關輸出</span>
</span><span class="line">Main took 0:03:38.140994
</span><span class="line">Total sum of elements <span class="o">(</span><span class="k">for </span>validation<span class="o">)</span>: 1148485
</span><span class="line">Wrote profile results to pure_python_slow_lineprof.py.lprof
</span><span class="line">Timer unit: 1e-06 s
</span><span class="line">
</span><span class="line">File: pure_python_slow_lineprof.py
</span><span class="line">Function: calculate_z_serial_purepython at line 24
</span><span class="line">Total <span class="nb">time</span>: 112.149 s
</span><span class="line">
</span><span class="line">Line <span class="c">#      Hits         Time  Per Hit   % Time  Line Contents</span>
</span><span class="line"><span class="o">==============================================================</span>
</span><span class="line">    24                                           @profile
</span><span class="line">    25                                           def calculate_z_serial_purepython<span class="o">(</span>q, maxiter, z<span class="o">)</span>:
</span><span class="line">    26                                               <span class="s2">&quot;&quot;&quot;Pure python with complex datatype, iterating over list of q and z&quot;&quot;&quot;</span>
</span><span class="line">    27         1         1193   1193.0      0.0      <span class="nv">output</span> <span class="o">=</span> <span class="o">[</span>0<span class="o">]</span> * len<span class="o">(</span>q<span class="o">)</span>
</span><span class="line">    28    250001       158612      0.6      0.1      <span class="k">for </span>i in range<span class="o">(</span>len<span class="o">(</span>q<span class="o">))</span>:
</span><span class="line">    29    250000       178444      0.7      0.2          <span class="k">if </span>i % <span class="nv">1000</span> <span class="o">==</span> 0:
</span><span class="line">    30                                                       <span class="c"># print out some progress info since it is so slow...</span>
</span><span class="line">    31       250         5943     23.8      0.0              print <span class="s2">&quot;%0.2f%% complete&quot;</span> % <span class="o">(</span>1.0/len<span class="o">(</span>q<span class="o">)</span> * i * 100<span class="o">)</span>
</span><span class="line">    32  51464485     31971119      0.6     28.5          <span class="k">for </span>iteration in range<span class="o">(</span>maxiter<span class="o">)</span>:
</span><span class="line">    33  51414419     40896082      0.8     36.5              z<span class="o">[</span>i<span class="o">]</span> <span class="o">=</span> z<span class="o">[</span>i<span class="o">]</span>*z<span class="o">[</span>i<span class="o">]</span> + q<span class="o">[</span>i<span class="o">]</span>
</span><span class="line">    34  51414419     38095052      0.7     34.0              <span class="k">if </span>abs<span class="o">(</span>z<span class="o">[</span>i<span class="o">])</span> &gt; 2.0:
</span><span class="line">    35    199934       128641      0.6      0.1                  output<span class="o">[</span>i<span class="o">]</span> <span class="o">=</span> iteration
</span><span class="line">    36    199934       714362      3.6      0.6                  <span class="nb">break</span>
</span><span class="line"><span class="nb">    </span>37         1            4      4.0      0.0      <span class="k">return </span>output
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這裏我爲了不弄亂之前的文件裏的代碼，就直接另存爲了 <code>pure_python_slow_lineprof.py</code>。</p>

<p>如果你剛剛也跟我一起運行的話，你可能會首先注意到，運行速度非常之慢。所以我分享一則小技巧，就是想辦法讓運行的腳本縮小運行 scope。比方說你在做一個 1TB 數據的分析，在做優化的時候可以將目標數據減少到 1GB 之類的，數據量的減小不會對我們的行造影結果產生影響。在我們的這個例子裏，我們可以在運行的命令行末加上 ` 300 300`，這樣腳本就只會算一個 300*300 的分形圖，計算量相對要小很多。</p>

<p>那結果的最重要部分自然是表格部分了，這個表格裏我們可以看到對應代碼行的運行時間。因爲這個代碼相對很簡單，所以我們可以立刻看出是哪裏的問題了。重點在第 32、33、34 行。</p>

<p>這三行裏就有兩個小問題。</p>

<ul>
  <li>首先是 32 行，在 Python 3.x 之前，<code>range()</code> 和 <code>xrange()</code> 還是有區別的。前者會在內存中真的生成 <code>list</code>，而後者只是返回一個類似的 object。性能上略有提升，但是並不顯著，從運行時間上來說，區別不大。</li>
  <li>33、34 行一直在直接從 <code>list</code> 裏查詢數據，而查詢時間複雜度是 O(n)，所以這樣做勢必會消耗更多時間。</li>
</ul>

<p>所以通過分析，我們知道就以上的第一點而言，我們即使改用成 <code>xrange()</code>，在速度上我們也不會得到很大的提升。而就第二點，我們可以做如下修改：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">calculate_z_serial_purepython</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">maxiter</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;Pure python with complex datatype, iterating over list of q and z&quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)):</span>
</span><span class="line">        <span class="n">zi</span> <span class="o">=</span> <span class="n">z</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">        <span class="n">qi</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="c"># print out some progress info since it is so slow...</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&quot;</span><span class="si">%0.2f%%</span><span class="s"> complete&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="o">*</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">iteration</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">maxiter</span><span class="p">):</span>
</span><span class="line">            <span class="c">#z[i] = z[i]*z[i] + q[i]</span>
</span><span class="line">            <span class="n">zi</span> <span class="o">=</span> <span class="n">zi</span> <span class="o">*</span> <span class="n">zi</span> <span class="o">+</span> <span class="n">qi</span>
</span><span class="line">            <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">zi</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mf">2.0</span><span class="p">:</span>
</span><span class="line">                <span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">iteration</span>
</span><span class="line">                <span class="k">break</span>
</span><span class="line">    <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改後我們再運行一遍行造影：</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">File: pure_python_improved_lineprof.py
</span><span class="line">Function: calculate_z_serial_purepython at line 24
</span><span class="line">Total <span class="nb">time</span>: 110.898 s
</span><span class="line">
</span><span class="line">Line <span class="c">#      Hits         Time  Per Hit   % Time  Line Contents</span>
</span><span class="line"><span class="o">==============================================================</span>
</span><span class="line">    24                                           @profile
</span><span class="line">    25                                           def calculate_z_serial_purepython<span class="o">(</span>q, maxiter, z<span class="o">)</span>:
</span><span class="line">    26                                               <span class="s2">&quot;&quot;&quot;Pure python with complex datatype, iterating over list of q and z&quot;&quot;&quot;</span>
</span><span class="line">    27         1         1180   1180.0      0.0      <span class="nv">output</span> <span class="o">=</span> <span class="o">[</span>0<span class="o">]</span> * len<span class="o">(</span>q<span class="o">)</span>
</span><span class="line">    28    250001       162404      0.6      0.1      <span class="k">for </span>i in range<span class="o">(</span>len<span class="o">(</span>q<span class="o">))</span>:
</span><span class="line">    29    250000       161958      0.6      0.1          <span class="nv">zi</span> <span class="o">=</span> z<span class="o">[</span>i<span class="o">]</span>
</span><span class="line">    30    250000       155260      0.6      0.1          <span class="nv">qi</span> <span class="o">=</span> q<span class="o">[</span>i<span class="o">]</span>
</span><span class="line">    31    250000       173665      0.7      0.2          <span class="k">if </span>i % <span class="nv">1000</span> <span class="o">==</span> 0:
</span><span class="line">    32                                                       <span class="c"># print out some progress info since it is so slow...</span>
</span><span class="line">    33       250         5647     22.6      0.0              print <span class="s2">&quot;%0.2f%% complete&quot;</span> % <span class="o">(</span>1.0/len<span class="o">(</span>q<span class="o">)</span> * i * 100<span class="o">)</span>
</span><span class="line">    34  51464485     31790147      0.6     28.7          <span class="k">for </span>iteration in xrange<span class="o">(</span>maxiter<span class="o">)</span>:
</span><span class="line">    35                                                       <span class="c">#z[i] = z[i]*z[i] + q[i]</span>
</span><span class="line">    36  51414419     37946710      0.7     34.2              <span class="nv">zi</span> <span class="o">=</span> zi * zi + qi
</span><span class="line">    37  51414419     40239095      0.8     36.3              <span class="k">if </span>abs<span class="o">(</span>zi<span class="o">)</span> &gt; 2.0:
</span><span class="line">    38    199934       138030      0.7      0.1                  output<span class="o">[</span>i<span class="o">]</span> <span class="o">=</span> iteration
</span><span class="line">    39    199934       123589      0.6      0.1                  <span class="nb">break</span>
</span><span class="line"><span class="nb">    </span>40         1            4      4.0      0.0      <span class="k">return </span>output
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看似沒有多大提升？確實，就每行時間上來看確實沒有多大提升，但是從總時間看，有了差不多兩秒的提升。而且如果我把行造影去掉，裸跑的話，速度的提升更加顯著一些（大約 6 秒）。有人說這樣的提升要不要都也無所謂，其實不然。我剛剛說到 scope，如果放大 scope，原先兩秒的優勢可能會被放大到 20 分鐘甚至更多。</p>

<p>大致總結下，代碼造影工具可以有效地幫助你找到代碼運行速度上的癥結，<code>cProfile</code> 可用於造影模塊的運行，<code>RunSnake</code> 可以幫助可視化造影結果，而 <code>kernprof.py</code> 可以對代碼進行更加精準的行造影。另外，在使用這些造影工具的同時，我們還要注意學習前人的經驗，知道如何寫更好的代碼。</p>

<p>最後我要說，代碼層面的優化是很有限的，只要運行機制層面不改變，可能最好的代碼都會很慢，所以本系列之後的文章我會談一談優化「運行機制」。</p>

<hr />

<p>本文是『Python 調優筆記』系列中的一篇，其它文章還有：</p>

<ul>
  <li><a href="http://localhost:4000/blog/Python/Optimization/Serial/Programming/2012/07/23/python-optimization-1/" title="Python 調優筆記·序">序，一切的開始</a></li>
  <li><a href="http://conanchou.github.com/blog/Optimization/Programming/Python/Serial/2012/07/25/python-optimization-2-profiling/" title=" Python 調優筆記·代碼造影">代碼造影，定位癥結</a></li>
  <li><a href="http://conanchou.github.com/blog/Python/Optimization/Serial/Programming/2012/08/26/python-optimization-3-disassembling/" title="Python 調優筆記·理性主義調優">理性主義調優，一切從根本出發</a></li>
  <li><a href="localhost" title="Python 調優筆記·經驗主義調優">經驗主義調優，站在巨人的肩膀上</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 調優筆記·序]]></title>
    <link href="http://ConanChou.github.com/blog/Python/Optimization/Serial/Programming/2012/07/23/python-optimization-1/"/>
    <updated>2012-07-23T01:19:00-04:00</updated>
    <id>http://ConanChou.github.com/blog/Python/Optimization/Serial/Programming/2012/07/23/python-optimization-1</id>
    <content type="html"><![CDATA[<p>以往我都以寫命令行下的 Python 腳本爲主。即使做項目也基本是做小規模 Web 類的。所以很少遇到效率太低受不了的情況，所以也鮮有調優的需要。當然，在寫代碼時就已經注意了一些效率問題，所以基本不需要很費心機地調優。可是幾個月前我做了兩個項目，一是一個機器學習引擎，用以學習在線讀者閱讀習慣；另一個是一個下 Chess 的 AI，用以人機對奕。<!-- more -->兩個系統都用 Python 構建。因爲這兩個項目都是 CPU intensive 的，真的是慢的可以。於是這逼得我不得不去研究下有關 Python
的調優。而在機器學習的項目中，因爲當時自己的服務器實在很爛（只有256 MB 內存），所以得瘋狂得做服務器部署的優化才能讓它處理外部請求和部分邏輯。加上以往的服務器調優經驗，也算是積累了一些有用的東西。</p>

<p>上個禮拜一個朋友跟我討論 Python 以及 Django 網站的調優問題。我告訴了他一些我的經驗。雖然當時聊得很匆忙，可是我想這些信息是有用的，至少對我很有用。一方面我真的沒有具體地整理過，另一方面也是怕自己將來忘記。所以趁熱打鐵，打算整理成系列。在這個系列裏，我將會涉及到以下兩大類瓶頸的調優：</p>

<ul>
  <li>瓶頸在計算的調優</li>
  <li>瓶頸在數據讀寫的調優</li>
</ul>

<p>讓我們來看張圖先：</p>

<p><img src="https://public.blu.livefilestore.com/y1pauSVpp8onRf0BIEWig2UQ0yvy0OYj-1bpinVGs6SqA4s4q2qZV1daZXxKrQXoG4ktnb0ddekeu2iTohP_PtyuQ/chart.png?psid=1" alt="熱門編程語言速度對比" title="熱門編程語言速度對比" /></p>

<p>調優之後我們的程序到底能跑多快？猜 V8 JavaScript 的很大膽。但是你還不夠大膽，事實上效果好的情況可以直逼 GCC C。也就是可以提升 20 多倍的速度。而這張圖測試的背景是代碼本身已經優化過的基礎上。那在真實的生產生活中，這個數字可以是上三位數的。</p>

<p>優化是沒有一針見血很徹底的方案的，因爲優化牽扯到程序從編寫到運行的方方面面。有句話說：如果一個程序能夠很正常地運行，那說明沒有地方有問題；但是如果程序出錯了，就有可能不止一處有問題。同樣的道理，調優也是如此。因此，本系列會分很多篇，每一篇針對一個話題。</p>

<hr />

<p>本文是『Python 調優筆記』系列中的一篇，其它文章還有：</p>

<ul>
  <li><a href="http://localhost:4000/blog/Python/Optimization/Serial/Programming/2012/07/23/python-optimization-1/" title="Python 調優筆記·序">序，一切的開始</a></li>
  <li><a href="http://conanchou.github.com/blog/Optimization/Programming/Python/Serial/2012/07/25/python-optimization-2-profiling/" title=" Python 調優筆記·代碼造影">代碼造影，定位癥結</a></li>
  <li><a href="http://conanchou.github.com/blog/Python/Optimization/Serial/Programming/2012/08/26/python-optimization-3-disassembling/" title="Python 調優筆記·理性主義調優">理性主義調優，一切從根本出發</a></li>
  <li><a href="localhost" title="Python 調優筆記·經驗主義調優">經驗主義調優，站在巨人的肩膀上</a></li>
</ul>

<p>在整理時我參考了大量資料，以一定程度上確保靠譜。</p>

<p>整理和尋找知識系統和方法理論的時候，我使用了非常好用的 Mind Mapping 開源軟件 <a href="http://freemind.sourceforge.net/wiki/index.php/Main_Page">FreeMind</a>，提高效率的 <a href="http://tmux.sourceforge.net/">tmux</a> 和 <a href="http://tmux.sourceforge.net/">Vim</a>。題外話，推薦一下。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[touch log]]></title>
    <link href="http://ConanChou.github.com/blog/routine/2012/07/21/touch-log/"/>
    <updated>2012-07-21T02:05:00-04:00</updated>
    <id>http://ConanChou.github.com/blog/routine/2012/07/21/touch-log</id>
    <content type="html"><![CDATA[<p>大半年前就在 HN 上看到一篇文章说 <a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">像黑客一样写博客</a> 的文章。看到标题的时候，我还以为肯定是一篇无聊的炫耀文。可是我错了。文章是 GitHub 的联合创始人 Tom Preston-Werner 写的。他在文中推荐了一种新的写作博客的方式。其实说穿了就是拿 Ruby 世界的 <code>make</code>，<code>rake</code> 来生成基于 markdown 的静态网页，然后将这些网页再部署到 GitHub。</p>

<!-- more -->

<p>这看似有点吃饱了撑着，但是仔细想想，确实有不少好处。首先，这样的方案是完全免费的。其次，虽然免费，但不代表 QoS 就差，事实上正好相反。相比较 WordPress 这样的博客平台，它对服务器的要求更低、反应更快。不奇怪嘛，它是纯静态的。再来，写的文稿可以在 Git 中得到版本控制。你不再受网络、环境的影响。想什么时候写就什么写，想在哪里写就在哪里写，因为 Git
是分布式的。这让写作变得随心所欲。还有就是书写形式是用 markdown，简单快捷。不过据说如果文章变多的时候编译时间会很长。但对于程序员来说这应该是可以忍受的。我们经常遇到一编译就是小半天的情况不是吗。</p>

<p>当时看完后就想换博客。可是那会儿有些忙、加之我还是花钱买的服务器，不用多亏啊，于是就没行动。之后有些空的时候，我便架起来一个，迟迟没有写。毕竟还在用着现在的那个 <a href="http://conanblog.me">conanblog.me</a>。后来的今天，或者说最近的这个礼拜，特别想写一些技术相关记录性的文档。而之前在 <a href="https://github.com/ConanChou/Unix-as-IDE--Chinese-">Unix as IDE Chinese</a> 项目的时候就有非常好的用 markdown 以及 Git
处理文案的经历，就特别想继续这样的方式。于是决定将来凡是技术相关的文章就在<a href="http://conanchou.github.com">本站</a>写，旧博客会使用到服务器到期。到期之前我会最终把文章备份被转移到这边。</p>

<p>在配置里写描述时，我是写的“Open Source, Computer Science, Linux, Unix, Hack, Programming, Math, Python, Ruby, Lisp”。我没有放 Life，其实也是希望自己能够更多地专注于写有质量的文章。希望能够做到。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">conan@notes:~/ touch log</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
